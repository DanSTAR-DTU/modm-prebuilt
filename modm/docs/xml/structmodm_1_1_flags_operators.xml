<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structmodm_1_1_flags_operators" kind="struct" language="C++" prot="public">
    <compoundname>modm::FlagsOperators</compoundname>
    <basecompoundref refid="structmodm_1_1_register" prot="public" virt="non-virtual">modm::Register&lt; T &gt;</basecompoundref>
    <derivedcompoundref refid="structmodm_1_1_flags" prot="public" virt="non-virtual">modm::Flags&lt; Enum, T &gt;</derivedcompoundref>
    <includes refid="register_8hpp" local="no">modm/architecture/interface/register.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Enum</declname>
        <defname>Enum</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a1979ef9b9355bdc69e938c43dd89dcb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsOperators&lt; Enum, T &gt;::FlagsOperators</definition>
        <argsstring>()</argsstring>
        <name>FlagsOperators</name>
        <briefdescription>
<para>default constructor initializes <computeroutput>value</computeroutput> to zero </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="135" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1adcf3c618c16f217e8ec1ac5ce825b726" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsOperators&lt; Enum, T &gt;::FlagsOperators</definition>
        <argsstring>(Enum flag)</argsstring>
        <name>FlagsOperators</name>
        <param>
          <type>Enum</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>constructs itself out of a strongly-typed enum </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="138" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="138" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a69210167d06c667cc1363652ebb4720f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsOperators&lt; Enum, T &gt;::FlagsOperators</definition>
        <argsstring>(UnderlyingType flag)</argsstring>
        <name>FlagsOperators</name>
        <param>
          <type><ref refid="structmodm_1_1_register_1a01eabc4e19471d308132e16098f245cd" kindref="member">UnderlyingType</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>When explicitly called, this class constructs itself out of the underlying type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="142" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="142" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1aeac8d1600b0567c340a62eae299a434e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsOperators&lt; Enum, T &gt;::FlagsOperators</definition>
        <argsstring>(Register&lt; T &gt; const &amp;o)</argsstring>
        <name>FlagsOperators</name>
        <param>
          <type><ref refid="structmodm_1_1_register" kindref="compound">Register</ref>&lt; T &gt; const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>When explicitly called, this class constructs itself out of the superclass. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="146" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="146" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1ae60e3d89b041aea0a242c8c332843849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsOperators&lt; Enum, T &gt;::FlagsOperators</definition>
        <argsstring>(FlagsOperators const &amp;o)=default</argsstring>
        <name>FlagsOperators</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a5a15da92c03131959f00fe3122d3f2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsOperators&lt; Enum, T &gt;::FlagsOperators</definition>
        <argsstring>(FlagsOperators &amp;&amp;o)=default</argsstring>
        <name>FlagsOperators</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="150" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a92001e0adca0280cd7bc248543635c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator=</definition>
        <argsstring>(FlagsOperators const &amp;o)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a0baf85508f4708a386420aad5749c460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator=</definition>
        <argsstring>(FlagsOperators &amp;&amp;o)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="155" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a1a22f48deee83c98157648b5fab35b19" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators modm::FlagsOperators&lt; Enum, T &gt;::operator&amp;</definition>
        <argsstring>(FlagsOperators const &amp;o) const</argsstring>
        <name>operator &amp;</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>AND</bold> with multiple bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="168" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a600cfb6f6939c33ff1dd555ff7c4757e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators modm::FlagsOperators&lt; Enum, T &gt;::operator|</definition>
        <argsstring>(FlagsOperators const &amp;o) const</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>OR</bold> with multiple bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="170" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1acd0240578bf6dde719f39464c82002be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators modm::FlagsOperators&lt; Enum, T &gt;::operator^</definition>
        <argsstring>(FlagsOperators const &amp;o) const</argsstring>
        <name>operator^</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>XOR</bold> with multiple bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="172" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="172" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1aa37c7eae13739d1f79fae64329034b6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator&amp;=</definition>
        <argsstring>(FlagsOperators const &amp;o)</argsstring>
        <name>operator &amp;=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>AND</bold> with multiple bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="178" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a9e09e13d81dd36cb32a53274185b9286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator|=</definition>
        <argsstring>(FlagsOperators const &amp;o)</argsstring>
        <name>operator|=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>OR</bold> with multiple bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="180" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a1b9f2672e756b82403df85f3abd953e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator^=</definition>
        <argsstring>(FlagsOperators const &amp;o)</argsstring>
        <name>operator^=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>XOR</bold> with multiple bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="182" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="182" bodyend="182"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a42b56aa9bcbda706bcaf5fc86df01bcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator&amp;=</definition>
        <argsstring>(Enum const &amp;flag)</argsstring>
        <name>operator &amp;=</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>AND</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="188" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1afecc755620b863362cd6be1b7b01174d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator|=</definition>
        <argsstring>(Enum const &amp;flag)</argsstring>
        <name>operator|=</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>OR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="190" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a40e2f53dd48f6889db0290fe6b594814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> &amp;</type>
        <definition>FlagsOperators&amp; modm::FlagsOperators&lt; Enum, T &gt;::operator^=</definition>
        <argsstring>(Enum const &amp;flag)</argsstring>
        <name>operator^=</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>XOR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="192" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="192" bodyend="192"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1af242a1c559780336753e58183ca51104" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator&amp;</definition>
        <argsstring>(Enum const &amp;a, FlagsOperators const &amp;b)</argsstring>
        <name>operator &amp;</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>AND</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="198" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a94848dda5041d305f367abc4c39f327a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator|</definition>
        <argsstring>(Enum const &amp;a, FlagsOperators const &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>OR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="200" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a3a49f7e1c7caf05575bb4f2e4bfec29e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator^</definition>
        <argsstring>(Enum const &amp;a, FlagsOperators const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>XOR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="202" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="202" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a587d5c947e1b1688cc8b8463d8104cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator&amp;</definition>
        <argsstring>(FlagsOperators const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator &amp;</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>AND</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a26e004c57eba88d8201df7be071bf84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator|</definition>
        <argsstring>(FlagsOperators const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>OR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="224" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a3ca154d188fea587c7589f49cfbb034b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator^</definition>
        <argsstring>(FlagsOperators const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>XOR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="226" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1ad2f92bd4fb96ddcbabc4f501b052a94a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator&amp;</definition>
        <argsstring>(Enum const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator &amp;</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>AND</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="232" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a45e47c0db507bf89a29d8ecdd5ce5bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator|</definition>
        <argsstring>(Enum const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>OR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="234" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a12d86a9a77241c13b80ef5bbca1f2718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators operator^</definition>
        <argsstring>(Enum const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>bitwise <bold>XOR</bold> with a single bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="236" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a9d8c3a729e59ad02477d5cc0e0166cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(FlagsOperators const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares if two flags are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="241" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a756878b7f29d2226ff2c4fd0b0716d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(FlagsOperators const &amp;a, Enum const &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Enum const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="242" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a4defdead1819f5bf32b63a3e4f05866e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(Enum const &amp;a, FlagsOperators const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="243" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structmodm_1_1_flags_operators_1a7bea73f21e1b1a7a41e2104126caee0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(Enum const &amp;a, FlagsOperators const &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="244" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structmodm_1_1_flags_operators_1a9df5a6983573bcc224398c2020d6459c" prot="public" static="no">
        <type>Enum</type>
        <definition>typedef Enum modm::FlagsOperators&lt; Enum, T &gt;::EnumType</definition>
        <argsstring></argsstring>
        <name>EnumType</name>
        <briefdescription>
<para>The enum type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="128" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1aa92025455589054692cce6ad6329ca38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>constexpr FlagsOperators modm::FlagsOperators&lt; Enum, T &gt;::operator~</definition>
        <argsstring>() const</argsstring>
        <name>operator~</name>
        <briefdescription>
<para>bitwise negation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="163" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structmodm_1_1_flags_operators_1a5c3fbed98d9c8aa6bdbae7aa2d40fc7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref></type>
        <definition>static constexpr FlagsOperators modm::FlagsOperators&lt; Enum, T &gt;::mask</definition>
        <argsstring>()</argsstring>
        <name>mask</name>
        <briefdescription>
<para>returns the mask of the integer type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="158" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="158" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class for operating on a register.</para><para>This class extends the <ref refid="structmodm_1_1_register" kindref="compound">Register</ref> base class by adding constructor and bitwise operation overloading between a strongly-typed enum and itself. It is the common base class for <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref>, Configurations and Values!</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Enum</parametername>
</parameternamelist>
<parameterdescription>
<para>a strongly-typed enum containing the bit masks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying integer type to be for internal representation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref></para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="259">
        <label>modm::FlagsOperators&lt; Enum, T &gt;</label>
        <link refid="structmodm_1_1_flags_operators"/>
        <childnode refid="260" relation="public-inheritance">
        </childnode>
      </node>
      <node id="260">
        <label>modm::Register&lt; T &gt;</label>
        <link refid="structmodm_1_1_register"/>
      </node>
      <node id="261">
        <label>modm::Flags&lt; Enum, T &gt;</label>
        <link refid="structmodm_1_1_flags"/>
        <childnode refid="259" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="264">
        <label>T</label>
      </node>
      <node id="262">
        <label>modm::FlagsOperators&lt; Enum, T &gt;</label>
        <link refid="structmodm_1_1_flags_operators"/>
        <childnode refid="263" relation="public-inheritance">
        </childnode>
      </node>
      <node id="263">
        <label>modm::Register&lt; T &gt;</label>
        <link refid="structmodm_1_1_register"/>
        <childnode refid="264" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="122" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="121" bodyend="247"/>
    <listofallmembers>
      <member refid="structmodm_1_1_flags_operators_1a9df5a6983573bcc224398c2020d6459c" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>EnumType</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1979ef9b9355bdc69e938c43dd89dcb6" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1adcf3c618c16f217e8ec1ac5ce825b726" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a69210167d06c667cc1363652ebb4720f" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1aeac8d1600b0567c340a62eae299a434e" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1ae60e3d89b041aea0a242c8c332843849" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a5a15da92c03131959f00fe3122d3f2b0" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a5c3fbed98d9c8aa6bdbae7aa2d40fc7a" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>mask</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1a22f48deee83c98157648b5fab35b19" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator &amp;</name></member>
      <member refid="structmodm_1_1_flags_operators_1af242a1c559780336753e58183ca51104" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator &amp;</name></member>
      <member refid="structmodm_1_1_flags_operators_1a587d5c947e1b1688cc8b8463d8104cfd" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator &amp;</name></member>
      <member refid="structmodm_1_1_flags_operators_1ad2f92bd4fb96ddcbabc4f501b052a94a" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator &amp;</name></member>
      <member refid="structmodm_1_1_flags_operators_1aa37c7eae13739d1f79fae64329034b6c" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator &amp;=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a42b56aa9bcbda706bcaf5fc86df01bcb" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator &amp;=</name></member>
      <member refid="structmodm_1_1_register_1aca49e332e09a999a9c10182c44a0ddff" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator bool</name></member>
      <member refid="structmodm_1_1_register_1a959d3b687497e1485faec27887cd8925" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator!</name></member>
      <member refid="structmodm_1_1_flags_operators_1a756878b7f29d2226ff2c4fd0b0716d42" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator!=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a7bea73f21e1b1a7a41e2104126caee0f" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator!=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a92001e0adca0280cd7bc248543635c6a" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a0baf85508f4708a386420aad5749c460" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a9d8c3a729e59ad02477d5cc0e0166cff" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator==</name></member>
      <member refid="structmodm_1_1_flags_operators_1a4defdead1819f5bf32b63a3e4f05866e" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator==</name></member>
      <member refid="structmodm_1_1_flags_operators_1acd0240578bf6dde719f39464c82002be" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator^</name></member>
      <member refid="structmodm_1_1_flags_operators_1a3a49f7e1c7caf05575bb4f2e4bfec29e" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator^</name></member>
      <member refid="structmodm_1_1_flags_operators_1a3ca154d188fea587c7589f49cfbb034b" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator^</name></member>
      <member refid="structmodm_1_1_flags_operators_1a12d86a9a77241c13b80ef5bbca1f2718" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator^</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1b9f2672e756b82403df85f3abd953e5" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator^=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a40e2f53dd48f6889db0290fe6b594814" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator^=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a600cfb6f6939c33ff1dd555ff7c4757e" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator|</name></member>
      <member refid="structmodm_1_1_flags_operators_1a94848dda5041d305f367abc4c39f327a" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator|</name></member>
      <member refid="structmodm_1_1_flags_operators_1a26e004c57eba88d8201df7be071bf84d" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator|</name></member>
      <member refid="structmodm_1_1_flags_operators_1a45e47c0db507bf89a29d8ecdd5ce5bd4" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator|</name></member>
      <member refid="structmodm_1_1_flags_operators_1a9e09e13d81dd36cb32a53274185b9286" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator|=</name></member>
      <member refid="structmodm_1_1_flags_operators_1afecc755620b863362cd6be1b7b01174d" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator|=</name></member>
      <member refid="structmodm_1_1_flags_operators_1aa92025455589054692cce6ad6329ca38" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>operator~</name></member>
      <member refid="structmodm_1_1_register_1a6011e04b6402adbf7a4497e11dfb9b04" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>Register</name></member>
      <member refid="structmodm_1_1_register_1a9b9f9dfa762f2912886ee6618e807087" prot="protected" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>Register</name></member>
      <member refid="structmodm_1_1_register_1a01eabc4e19471d308132e16098f245cd" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>UnderlyingType</name></member>
      <member refid="structmodm_1_1_register_1a4d86255f7cd8fc09c9f88d1776535f68" prot="public" virt="non-virtual"><scope>modm::FlagsOperators</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
