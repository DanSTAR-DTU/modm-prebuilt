<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_vector_3_01_t_00_013_01_4" kind="class" language="C++" prot="public">
    <compoundname>modm::Vector&lt; T, 3 &gt;</compoundname>
    <includes refid="vector3_8hpp" local="no">modm/math/geometry/vector3.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1add3b541534912ed8031d3be9bc660b80" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 3 &gt;::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="194" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ac75f8db6a9effe931327d136db9c4952" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 3 &gt;::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="195" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0e20a8f0158c235ff728674410e99b75" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 3 &gt;::z</definition>
        <argsstring></argsstring>
        <name>z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="196" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0942d30d1e4619a9b416121a827672bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1abde54c9401375cdd0a0827543c98f8aa" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const U *array)</argsstring>
        <name>Vector</name>
        <param>
          <type>const U *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ada987ffe5f4af1cd9b20664c3712d6af" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(T inVal)</argsstring>
        <name>Vector</name>
        <param>
          <type>T</type>
          <declname>inVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ace36f0cdf4c1dfc064eb8d17b7f2c7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(T inX, T inY, T inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>T</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>T</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>T</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a80935be29f53ab9a2ba649792e099de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 1 &gt; &amp;inX, const T &amp;inY, const T &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1115f8f64a99eaa00790dbc1081c00dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const T &amp;inX, const Vector&lt; T, 1 &gt; &amp;inY, const T &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const T &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a146bfa667b532822facde667c0faa735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const T &amp;inX, const T &amp;inY, const Vector&lt; T, 1 &gt; &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const T &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a3d9ab695472a2832c240bb3d7bab414e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 1 &gt; &amp;inX, const T &amp;inY, const Vector&lt; T, 1 &gt; &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a323ebb3aea808b28300c8d2427bbe853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 1 &gt; &amp;inX, const Vector&lt; T, 1 &gt; &amp;inY, const T &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a3eb7e667ae0af2ce53a292234c23eddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const T &amp;inX, const Vector&lt; T, 1 &gt; &amp;inY, const Vector&lt; T, 1 &gt; &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const T &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1aac5ef6499684ffb084227871f73aca97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 1 &gt; &amp;inX, const Vector&lt; T, 1 &gt; &amp;inY, const Vector&lt; T, 1 &gt; &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inY</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a547a82b06428b2f9016015e8f81cc529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 2 &gt; &amp;inXY, const T &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>inXY</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0b12423cc7dccd378235a1359d3bd732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const T &amp;inX, const Vector&lt; T, 2 &gt; &amp;inYZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const T &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>inYZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a2352e3ddb46579e9dafbea25c8b8bb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 2 &gt; &amp;inXY, const Vector&lt; T, 1 &gt; &amp;inZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>inXY</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ad06ac39105d648adfd0445a11559497f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 1 &gt; &amp;inX, const Vector&lt; T, 2 &gt; &amp;inYZ)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>inYZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1f187cdb16486f096f67ae0a9a5af074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; U, 3 &gt; &amp;rhs)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; U, 3 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a48f4e8f74415b832d2ead4fa254558e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 3 &gt;::Vector</definition>
        <argsstring>(const Matrix&lt; T, 3, 1 &gt; &amp;rhs)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 3, 1 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a371fcc2fad5aade86b6ac232072a3b49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 3 &gt;::set</definition>
        <argsstring>(const T &amp;x, const T &amp;y, const T &amp;z)</argsstring>
        <name>set</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a81996cc5a19af2ea5acfec1a2cc31ea5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 3 &gt;::setX</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>setX</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a8365786e6030b90f23e7a8fb4e9d49f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 3 &gt;::setY</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>setY</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a48be0caae7f1b6d5adf9add51f4308b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 3 &gt;::setZ</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>setZ</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a44e74ed3197f9a74ba2f372fe8a2c556" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, 3 &gt;::getX</definition>
        <argsstring>() const</argsstring>
        <name>getX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a30e2c8dc1a46d676b8548ba001160184" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, 3 &gt;::getY</definition>
        <argsstring>() const</argsstring>
        <name>getY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae35d33e5d7fcbf155f4f3fce91a2d51a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, 3 &gt;::getZ</definition>
        <argsstring>() const</argsstring>
        <name>getZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a33c98a9d9fa1ea3798986e510d0f90d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 3 &gt;::operator=</definition>
        <argsstring>(const Matrix&lt; T, 3, 1 &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 3, 1 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1aea3e9133b2206a04009dde25bfdc1674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 3 &gt;::operator=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0c547f1fcca7599cc65843097694481d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::operator==</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1aa3b056b2f02c364fdb78c816c3071c31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::operator !=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a2cd356319a0bc23001be3eb1243b703b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::operator&lt;</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1afd4ad0a4af7a16233636096bf0b5b46b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::operator&lt;=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a02d012470d927a005a6a5c37bf29fbae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::operator &gt;</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator &gt;</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a793efb2c37979cc3666fde197a81727c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::operator &gt;=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator &gt;=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a25e87a0f9799b84077a35b3f00426108" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, 3 &gt;::operator []</definition>
        <argsstring>(uint8_t index) const</argsstring>
        <name>operator []</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a2fd1782307dd139e573d9724bb73ce1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::Vector&lt; T, 3 &gt;::operator []</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>operator []</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ad9c3af11995670ea9543f80b9ad7baba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* modm::Vector&lt; T, 3 &gt;::ptr</definition>
        <argsstring>()</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a329cb0cb0244f6d53c85b3184dd3b897" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* modm::Vector&lt; T, 3 &gt;::ptr</definition>
        <argsstring>() const</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a85426a812f488549676e74fd0e5651ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::operator -</definition>
        <argsstring>() const</argsstring>
        <name>operator -</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a015daf2d167c74a612da795381e0837b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::operator+</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ac99830662d432242b7f3e5a97a8041cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::operator -</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a538a929a965195cb55e2bfbfaa7bba97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 3 &gt;::operator *</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1a2250c1f6cc210b47bd3a72de23862b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::operator ^</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator ^</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1adcc4332b53322fe647cbb1affb192f80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::operator *</definition>
        <argsstring>(const T &amp;rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ab9ee5dc10c515ff9e318d7de1828baf0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::operator/</definition>
        <argsstring>(const T &amp;rhs) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a3a61331a53714ba330ecc4396ca8b6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 3 &gt;::operator+=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a761d7bf69fe26efd6040fd0cc500e024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 3 &gt;::operator -=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ac7cf13288e2e30903942528fdf55736d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 3 &gt;::operator *=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a8e9800c8b2e6595019e09c6b2f2dda27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 3 &gt;::operator/=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae1df8a796a29d2ee785787d2b4b2a1f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float modm::Vector&lt; T, 3 &gt;::getLength</definition>
        <argsstring>() const</argsstring>
        <name>getLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1af9e0cd4920d193824f36ff6a56e79d1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float modm::Vector&lt; T, 3 &gt;::getLengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>getLengthSquared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0bc66c9f5207ba830cda56827bad1f07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::scaled</definition>
        <argsstring>(float newLength) const</argsstring>
        <name>scaled</name>
        <param>
          <type>float</type>
          <declname>newLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae11249c52d8ac114a2ff51842637ff08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 3 &gt;::scale</definition>
        <argsstring>(float newLength)</argsstring>
        <name>scale</name>
        <param>
          <type>float</type>
          <declname>newLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1aa309f29608ddc62941be7b20d05f1de1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 3 &gt;::normalized</definition>
        <argsstring>() const</argsstring>
        <name>normalized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1aa04c99b087db3ee547d385b25aec3d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 3 &gt;::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0fa47d197ff2297ae72c4e6c3ae43678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 3, 1 &gt; &amp;</type>
        <definition>Matrix&lt;T, 3, 1&gt;&amp; modm::Vector&lt; T, 3 &gt;::asMatrix</definition>
        <argsstring>()</argsstring>
        <name>asMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ab9419dc666862bb54c808b1fecf34fbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 3, 1 &gt; &amp;</type>
        <definition>const Matrix&lt;T, 3, 1&gt;&amp; modm::Vector&lt; T, 3 &gt;::asMatrix</definition>
        <argsstring>() const</argsstring>
        <name>asMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae37799a6561bf3143b0f098774af5087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, 3 &gt; &amp;</type>
        <definition>Matrix&lt;T, 1, 3&gt;&amp; modm::Vector&lt; T, 3 &gt;::asTransposedMatrix</definition>
        <argsstring>()</argsstring>
        <name>asTransposedMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1f4553d45b19dbfebc1922e613ce725d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, 3 &gt; &amp;</type>
        <definition>const Matrix&lt;T, 1, 3&gt;&amp; modm::Vector&lt; T, 3 &gt;::asTransposedMatrix</definition>
        <argsstring>() const</argsstring>
        <name>asTransposedMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1a30e9a8604c429d5cfe9edaf65d61e348" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::hasNan</definition>
        <argsstring>() const</argsstring>
        <name>hasNan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae66fd0eb21b35f898afded06eb708fa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 3 &gt;::hasInf</definition>
        <argsstring>() const</argsstring>
        <name>hasInf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for handling common vector operations (3D) </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>: addition of points</para>
</listitem><listitem><para>: different of points</para>
</listitem><listitem><para>: dot product or scalar multiplication / : scalar division ^ : cross product (determinant)</para>
</listitem></itemizedlist>
</para>
<para>Adapted from the implementation of Gaspard Petit (<ulink url="mailto:gaspardpetit@gmail.com">gaspardpetit@gmail.com</ulink>).</para>
<para><simplesect kind="see"><para>&lt;a href&quot;http://www-etud.iro.umontreal.ca/~petitg/cpp/point.html&quot;&gt;Homepage</para>
</simplesect>
<simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1819">
        <label>T</label>
      </node>
      <node id="1818">
        <label>modm::Vector&lt; T, 3 &gt;</label>
        <link refid="classmodm_1_1_vector_3_01_t_00_013_01_4"/>
        <childnode refid="1819" relation="usage">
          <edgelabel>x</edgelabel>
          <edgelabel>y</edgelabel>
          <edgelabel>z</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" line="40" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/vector3.hpp" bodystart="39" bodyend="197"/>
    <listofallmembers>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0fa47d197ff2297ae72c4e6c3ae43678" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>asMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ab9419dc666862bb54c808b1fecf34fbe" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>asMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae37799a6561bf3143b0f098774af5087" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>asTransposedMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1f4553d45b19dbfebc1922e613ce725d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>asTransposedMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae1df8a796a29d2ee785787d2b4b2a1f4" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>getLength</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1af9e0cd4920d193824f36ff6a56e79d1a" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>getLengthSquared</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a44e74ed3197f9a74ba2f372fe8a2c556" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>getX</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a30e2c8dc1a46d676b8548ba001160184" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>getY</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae35d33e5d7fcbf155f4f3fce91a2d51a" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>getZ</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae66fd0eb21b35f898afded06eb708fa3" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>hasInf</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a30e9a8604c429d5cfe9edaf65d61e348" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>hasNan</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1aa04c99b087db3ee547d385b25aec3d67" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>normalize</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1aa309f29608ddc62941be7b20d05f1de1" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>normalized</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1aa3b056b2f02c364fdb78c816c3071c31" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator !=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a538a929a965195cb55e2bfbfaa7bba97" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator *</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1adcc4332b53322fe647cbb1affb192f80" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator *</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ac7cf13288e2e30903942528fdf55736d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator *=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a85426a812f488549676e74fd0e5651ba" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator -</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ac99830662d432242b7f3e5a97a8041cf" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator -</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a761d7bf69fe26efd6040fd0cc500e024" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator -=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a02d012470d927a005a6a5c37bf29fbae" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator &gt;</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a793efb2c37979cc3666fde197a81727c" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator &gt;=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a25e87a0f9799b84077a35b3f00426108" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator []</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a2fd1782307dd139e573d9724bb73ce1e" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator []</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1a2250c1f6cc210b47bd3a72de23862b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator ^</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a015daf2d167c74a612da795381e0837b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator+</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a3a61331a53714ba330ecc4396ca8b6fb" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator+=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ab9ee5dc10c515ff9e318d7de1828baf0" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator/</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a8e9800c8b2e6595019e09c6b2f2dda27" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator/=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a2cd356319a0bc23001be3eb1243b703b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator&lt;</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1afd4ad0a4af7a16233636096bf0b5b46b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator&lt;=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a33c98a9d9fa1ea3798986e510d0f90d5" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1aea3e9133b2206a04009dde25bfdc1674" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0c547f1fcca7599cc65843097694481d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>operator==</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ad9c3af11995670ea9543f80b9ad7baba" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a329cb0cb0244f6d53c85b3184dd3b897" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ae11249c52d8ac114a2ff51842637ff08" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>scale</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0bc66c9f5207ba830cda56827bad1f07" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>scaled</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a371fcc2fad5aade86b6ac232072a3b49" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>set</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a81996cc5a19af2ea5acfec1a2cc31ea5" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>setX</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a8365786e6030b90f23e7a8fb4e9d49f6" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>setY</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a48be0caae7f1b6d5adf9add51f4308b0" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>setZ</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0942d30d1e4619a9b416121a827672bd" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1abde54c9401375cdd0a0827543c98f8aa" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ada987ffe5f4af1cd9b20664c3712d6af" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ace36f0cdf4c1dfc064eb8d17b7f2c7ac" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a80935be29f53ab9a2ba649792e099de8" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1115f8f64a99eaa00790dbc1081c00dc" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a146bfa667b532822facde667c0faa735" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a3d9ab695472a2832c240bb3d7bab414e" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a323ebb3aea808b28300c8d2427bbe853" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a3eb7e667ae0af2ce53a292234c23eddf" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1aac5ef6499684ffb084227871f73aca97" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a547a82b06428b2f9016015e8f81cc529" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0b12423cc7dccd378235a1359d3bd732" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a2352e3ddb46579e9dafbea25c8b8bb58" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ad06ac39105d648adfd0445a11559497f" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a1f187cdb16486f096f67ae0a9a5af074" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a48f4e8f74415b832d2ead4fa254558e9" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1add3b541534912ed8031d3be9bc660b80" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>x</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1ac75f8db6a9effe931327d136db9c4952" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>y</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_013_01_4_1a0e20a8f0158c235ff728674410e99b75" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 3 &gt;</scope><name>z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
