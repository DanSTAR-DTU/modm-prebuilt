<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_gpio_expander" kind="class" language="C++" prot="public">
    <compoundname>modm::GpioExpander</compoundname>
    <includes refid="gpio__expander_8hpp" local="no">modm/architecture/interface/gpio_expander.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmodm_1_1_gpio_expander_1a7465c714b304d6c0be85a04c4529f82c" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using modm::GpioExpander::PortType =  uint8_t</definition>
        <argsstring></argsstring>
        <name>PortType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This contains the underlying type that can hold the bits of the entire port. This value is implementation defined, it may also be <computeroutput>uint16_t</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="57" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmodm_1_1_gpio_expander_1aa8a015befd1dc7f2f28cbdfac6ded5bd" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::GpioExpander::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This holds the width of the port as number of bits and can be used in drivers to assert the correct requirements </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="53" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a5b49a30356d258534f5725d12c604404" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum Pin <ref refid="classmodm_1_1_gpio_expander_1a7465c714b304d6c0be85a04c4529f82c" kindref="member">PortType</ref> typedef <ref refid="structmodm_1_1_flags" kindref="compound">modm::Flags</ref>&lt; Pin, <ref refid="classmodm_1_1_gpio_expander_1a7465c714b304d6c0be85a04c4529f82c" kindref="member">PortType</ref> &gt; static Pins constexpr uint8_t</type>
        <definition>enum Pin PortType typedef modm::Flags&lt;Pin, PortType&gt; static Pins constexpr uint8_t modm::GpioExpander::indexFromPin</definition>
        <argsstring>(Pin pin)</argsstring>
        <name>indexFromPin</name>
        <param>
          <type>Pin</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Use type-safe flags container for the pins. </para>        </briefdescription>
        <detaileddescription>
<para>A type containing a unique identifier for each pin. This is mostly a bit mask, however, since this is implementation defined it can also be an index.Returns the <emphasis>index</emphasis> of the pin as a constexpr function. The mapping is implementation defined, however, as an implementation hint when using a bit mask, you should use <computeroutput><ref refid="group__modm__math__utils_1gad8ca8a97b6f8b1f20e73ca32d717dcb7" kindref="member">modm::leftmostBit()</ref></computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1aafabf1048b9bcca5949b98dfedb28fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::setOutput</definition>
        <argsstring>(Pins pins)</argsstring>
        <name>setOutput</name>
        <param>
          <type>Pins</type>
          <declname>pins</declname>
        </param>
        <briefdescription>
<para>Sets one or more pins to output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1ae5881d8681366f460b2f0453d0f0678d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::set</definition>
        <argsstring>(Pins pins)</argsstring>
        <name>set</name>
        <param>
          <type>Pins</type>
          <declname>pins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets one or more pins to logic high <simplesect kind="warning"><para>only modifies pins that have previously been set to output! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a28580aa613ee9da1ec8bf2d7d2d5211a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::reset</definition>
        <argsstring>(Pins pins)</argsstring>
        <name>reset</name>
        <param>
          <type>Pins</type>
          <declname>pins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets one or more pins to logic low <simplesect kind="warning"><para>only modifies pins that have previously been set to output! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a4bdeea78b07f8f3ad9d77d22e9d2308d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::toggle</definition>
        <argsstring>(Pins pins)</argsstring>
        <name>toggle</name>
        <param>
          <type>Pins</type>
          <declname>pins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Toggles one or more pins <simplesect kind="warning"><para>only modifies pins that have previously been set to output! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a006c8dcfde188b210378867a687044ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::set</definition>
        <argsstring>(Pins pins, bool value)</argsstring>
        <name>set</name>
        <param>
          <type>Pins</type>
          <declname>pins</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets one or more pins to high or low level <simplesect kind="warning"><para>only modifies pins that have previously been set to output! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1afe488bc21d63dd2dc3bd65bf7bf26502" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::GpioExpander::isSet</definition>
        <argsstring>(Pin pin) const</argsstring>
        <name>isSet</name>
        <param>
          <type>Pin</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Returns the set logical output state of the pin. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1ad61d5b99ae9fe42f686932032a661897" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_gpio_1a5c167852e8d86eded53f554eabace79b" kindref="member">modm::Gpio::Direction</ref></type>
        <definition>modm::Gpio::Direction modm::GpioExpander::getDirection</definition>
        <argsstring>(Pin pin) const</argsstring>
        <name>getDirection</name>
        <param>
          <type>Pin</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>returns direction of one pin at run-time </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a1b0579087c24a4d8c42e511d55876870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::setInput</definition>
        <argsstring>(Pins pins)</argsstring>
        <name>setInput</name>
        <param>
          <type>Pins</type>
          <declname>pins</declname>
        </param>
        <briefdescription>
<para>Sets one or more pins to input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1aefd0a3ce972a52133cb75470dec7bfcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::GpioExpander::read</definition>
        <argsstring>(Pins pins) const</argsstring>
        <name>read</name>
        <param>
          <type>Pins</type>
          <declname>pins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if <bold>all</bold> pins have a high level <simplesect kind="warning"><para>This function operates on the buffered input read. You have to call <computeroutput><ref refid="classmodm_1_1_gpio_expander_1a0ff2d45b32740b6fe5852f68060c2039" kindref="member">readInput()</ref></computeroutput> to update the result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a0ff2d45b32740b6fe5852f68060c2039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::readInput</definition>
        <argsstring>()</argsstring>
        <name>readInput</name>
        <briefdescription>
<para>Reads the inputs and buffers them. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a53548c5f110e3df75eeb8f53cea0dddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::writePort</definition>
        <argsstring>(PortType data)</argsstring>
        <name>writePort</name>
        <param>
          <type><ref refid="classmodm_1_1_gpio_expander_1a7465c714b304d6c0be85a04c4529f82c" kindref="member">PortType</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes data to the entire port <simplesect kind="warning"><para>only modifies pins that have previously been set to output! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1afaf1513fe1b5e8551bfb30a12e3abd92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::GpioExpander::readPort</definition>
        <argsstring>(PortType &amp;data)</argsstring>
        <name>readPort</name>
        <param>
          <type><ref refid="classmodm_1_1_gpio_expander_1a7465c714b304d6c0be85a04c4529f82c" kindref="member">PortType</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads the entire port, buffers them and outputs the result to data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1af419c1b7d2a42fd7fd5f5fe061183b91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Pins</type>
        <definition>Pins modm::GpioExpander::getDirections</definition>
        <argsstring>() const</argsstring>
        <name>getDirections</name>
        <briefdescription>
<para>Returns the direction bits: 0 for Input, 1 for Output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a5966fd722d4268b4fdac841c94bb7786" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Pins</type>
        <definition>Pins modm::GpioExpander::getOutputs</definition>
        <argsstring>() const</argsstring>
        <name>getOutputs</name>
        <briefdescription>
<para>Returns the output bits: 0 for low, 1 for high. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_1a896cbb620e84ccaba5b420c373664fb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Pins</type>
        <definition>Pins modm::GpioExpander::getInputs</definition>
        <argsstring>() const</argsstring>
        <name>getInputs</name>
        <briefdescription>
<para>Returns the input bits: 0 for low, 1 for high. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="143" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interface of an IO expander driver.</para><para>All IO expander driver should implement this interface, so that they can be wrapped into <computeroutput><ref refid="classmodm_1_1_gpio_expander_pin" kindref="compound">modm::GpioExpanderPin</ref></computeroutput> and <computeroutput><ref refid="classmodm_1_1_gpio_expander_port" kindref="compound">modm::GpioExpanderPort</ref></computeroutput>.</para><para>The interface is almost identical to an GPIO pin, except multiple pins can be set at once.</para><para><simplesect kind="note"><para>The driver must buffer the expanders IO registers. This means at least the direction, output and input values should be buffered so that a read-modify-write can be performed on SRAM and then only one write is performed on the bus instead of a read and write!</para></simplesect>
<simplesect kind="warning"><para>The <computeroutput><ref refid="classmodm_1_1_gpio_expander_1aefd0a3ce972a52133cb75470dec7bfcc" kindref="member">read()</ref></computeroutput> function does not perform a read bus access, but operates on the buffered result of <computeroutput><ref refid="classmodm_1_1_gpio_expander_1a0ff2d45b32740b6fe5852f68060c2039" kindref="member">readInput()</ref></computeroutput>. This allows a capture-and-evaluate approach, which is especially useful for reducing bus traffic and necessary for sampling all pins at the same time for <computeroutput><ref refid="classmodm_1_1_gpio_expander_port" kindref="compound">modm::GpioExpanderPort</ref></computeroutput>.</para></simplesect>
<simplesect kind="see"><para><ref refid="classmodm_1_1_gpio_expander_pin" kindref="compound">modm::GpioExpanderPin</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classmodm_1_1_gpio_expander_port" kindref="compound">modm::GpioExpanderPort</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classmodm_1_1_gpio_i_o" kindref="compound">modm::GpioIO</ref></para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="48" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="47" bodyend="145"/>
    <listofallmembers>
      <member refid="classmodm_1_1_gpio_expander_1ad61d5b99ae9fe42f686932032a661897" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>getDirection</name></member>
      <member refid="classmodm_1_1_gpio_expander_1af419c1b7d2a42fd7fd5f5fe061183b91" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>getDirections</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a896cbb620e84ccaba5b420c373664fb1" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>getInputs</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a5966fd722d4268b4fdac841c94bb7786" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>getOutputs</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a5b49a30356d258534f5725d12c604404" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>indexFromPin</name></member>
      <member refid="classmodm_1_1_gpio_expander_1afe488bc21d63dd2dc3bd65bf7bf26502" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>isSet</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a7465c714b304d6c0be85a04c4529f82c" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>PortType</name></member>
      <member refid="classmodm_1_1_gpio_expander_1aefd0a3ce972a52133cb75470dec7bfcc" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>read</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a0ff2d45b32740b6fe5852f68060c2039" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>readInput</name></member>
      <member refid="classmodm_1_1_gpio_expander_1afaf1513fe1b5e8551bfb30a12e3abd92" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>readPort</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a28580aa613ee9da1ec8bf2d7d2d5211a" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>reset</name></member>
      <member refid="classmodm_1_1_gpio_expander_1ae5881d8681366f460b2f0453d0f0678d" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>set</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a006c8dcfde188b210378867a687044ff" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>set</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a1b0579087c24a4d8c42e511d55876870" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>setInput</name></member>
      <member refid="classmodm_1_1_gpio_expander_1aafabf1048b9bcca5949b98dfedb28fab" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>setOutput</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a4bdeea78b07f8f3ad9d77d22e9d2308d" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>toggle</name></member>
      <member refid="classmodm_1_1_gpio_expander_1aa8a015befd1dc7f2f28cbdfac6ded5bd" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>width</name></member>
      <member refid="classmodm_1_1_gpio_expander_1a53548c5f110e3df75eeb8f53cea0dddd" prot="public" virt="non-virtual"><scope>modm::GpioExpander</scope><name>writePort</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
