<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_doubly_linked_list" kind="class" language="C++" prot="public">
    <compoundname>modm::DoublyLinkedList</compoundname>
    <includes refid="doubly__linked__list_8hpp" local="no">modm/container/doubly_linked_list.hpp</includes>
    <innerclass refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" prot="public">modm::DoublyLinkedList::const_iterator</innerclass>
    <innerclass refid="classmodm_1_1_doubly_linked_list_1_1iterator" prot="public">modm::DoublyLinkedList::iterator</innerclass>
    <innerclass refid="structmodm_1_1_doubly_linked_list_1_1_node" prot="protected">modm::DoublyLinkedList::Node</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename Allocator</type>
        <defval><ref refid="classmodm_1_1allocator_1_1_dynamic" kindref="compound">allocator::Dynamic</ref>&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classmodm_1_1_doubly_linked_list_1a2c2d6f838905f1525786eccb1732bf04" prot="protected" static="no">
        <type>Allocator::template rebind&lt; <ref refid="structmodm_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> &gt;::other</type>
        <definition>typedef Allocator::template rebind&lt; Node &gt;::other modm::DoublyLinkedList&lt; T, Allocator &gt;::NodeAllocator</definition>
        <argsstring></argsstring>
        <name>NodeAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="93" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmodm_1_1_doubly_linked_list_1ae8f16ce57abf4657747511050f3f41ed" prot="protected" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1a2c2d6f838905f1525786eccb1732bf04" kindref="member">NodeAllocator</ref></type>
        <definition>NodeAllocator modm::DoublyLinkedList&lt; T, Allocator &gt;::nodeAllocator</definition>
        <argsstring></argsstring>
        <name>nodeAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="95" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_doubly_linked_list_1a67f48f0960d35b9f6df920bd1ee2aac6" prot="protected" static="no" mutable="no">
        <type><ref refid="structmodm_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* modm::DoublyLinkedList&lt; T, Allocator &gt;::front</definition>
        <argsstring></argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="97" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_doubly_linked_list_1ac2bf3de4a44527c127904ec72025d725" prot="protected" static="no" mutable="no">
        <type><ref refid="structmodm_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* modm::DoublyLinkedList&lt; T, Allocator &gt;::back</definition>
        <argsstring></argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="98" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmodm_1_1_doubly_linked_list_1ac220ce1c155db1ac44146c12d178056f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="211" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classmodm_1_1_doubly_linked_list_1a67171474c4da6cc8efe0c7fafefd2b2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="212" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a72e6f00b1a02c28cc99b601c4eb35c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DoublyLinkedList&lt; T, Allocator &gt;::DoublyLinkedList</definition>
        <argsstring>(const Allocator &amp;allocator=Allocator())</argsstring>
        <name>DoublyLinkedList</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a699448488e4506d686026da0cc5881dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DoublyLinkedList&lt; T, Allocator &gt;::~DoublyLinkedList</definition>
        <argsstring>()</argsstring>
        <name>~DoublyLinkedList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1acd84a32b3c5ae92f1e80b8b1bd940bee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::DoublyLinkedList&lt; T, Allocator &gt;::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>check if there are any nodes in the list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a2704f3ffe76aba1fdced428f4c498120" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::DoublyLinkedList&lt; T, Allocator &gt;::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
<para>Get number of items in the list. </para>        </briefdescription>
        <detaileddescription>
<para>Very slow for a long list as it needs to iterate through all items in the list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a7b92a84a6303e3a7dc6089802b80e3fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::DoublyLinkedList&lt; T, Allocator &gt;::prepend</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>prepend</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert in front. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a368e36ec34bb1b61e2a6e3ee3bc37ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DoublyLinkedList&lt; T, Allocator &gt;::append</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert at the end of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1abb61d16b75ba877758e459967b534a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DoublyLinkedList&lt; T, Allocator &gt;::removeFront</definition>
        <argsstring>()</argsstring>
        <name>removeFront</name>
        <briefdescription>
<para>Remove the first entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a329fcaf3395364a7be161af64e26f954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DoublyLinkedList&lt; T, Allocator &gt;::removeBack</definition>
        <argsstring>()</argsstring>
        <name>removeBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a01c4c0eaf4d6ef327051834b6ad0a182" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::DoublyLinkedList&lt; T, Allocator &gt;::getFront</definition>
        <argsstring>() const</argsstring>
        <name>getFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the first node in the list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1ad089b59dbe1f4db02bf38f013fe40324" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::DoublyLinkedList&lt; T, Allocator &gt;::getBack</definition>
        <argsstring>() const</argsstring>
        <name>getBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last node in the list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a4ea1c605beef3295d419c30f93fd1b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::DoublyLinkedList&lt; T, Allocator &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read/write iterator that points to the first element in the list. Iteration is done in ordinary element order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a6d3a587745db0912730cada49a6b675d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::DoublyLinkedList&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read-only (constant) iterator that points to the first element in the list. Iteration is done in ordinary element order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1ab3745b75728a8324edc683cddbb24aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::DoublyLinkedList&lt; T, Allocator &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read/write iterator that points one past the last element in the list. Iteration is done in ordinary element order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a58669d3078b932d75287eedd236f3159" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::DoublyLinkedList&lt; T, Allocator &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read-only (constant) iterator that points one past the last element in the list. Iteration is done in ordinary element order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a17b45c148abec96b03cf1ce5a60f00ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::DoublyLinkedList&lt; T, Allocator &gt;::erase</definition>
        <argsstring>(iterator position)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classmodm_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes element pointed to by iterator and returns an iterator to the next element behind the deleted one.</para><para>Warning: you must not use the iterator after calling <ref refid="classmodm_1_1_doubly_linked_list_1a17b45c148abec96b03cf1ce5a60f00ba" kindref="member">erase()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="208" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a611baea384db46a202dbad61096491bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DoublyLinkedList&lt; T, Allocator &gt;::DoublyLinkedList</definition>
        <argsstring>(const DoublyLinkedList &amp;other)</argsstring>
        <name>DoublyLinkedList</name>
        <param>
          <type>const <ref refid="classmodm_1_1_doubly_linked_list" kindref="compound">DoublyLinkedList</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1a40840b7f1d9fa94f1063ef498f0a1a60" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list" kindref="compound">DoublyLinkedList</ref> &amp;</type>
        <definition>DoublyLinkedList&amp; modm::DoublyLinkedList&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(const DoublyLinkedList &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_doubly_linked_list" kindref="compound">DoublyLinkedList</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="217" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>doubly-linked list </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of list entries</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Fabian Greif </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="218">
        <label>T</label>
      </node>
      <node id="216">
        <label>modm::DoublyLinkedList&lt; T, Allocator &gt;</label>
        <link refid="classmodm_1_1_doubly_linked_list"/>
        <childnode refid="217" relation="usage">
          <edgelabel>front</edgelabel>
          <edgelabel>back</edgelabel>
        </childnode>
      </node>
      <node id="217">
        <label>modm::DoublyLinkedList&lt; T, Allocator &gt;::Node</label>
        <link refid="structmodm_1_1_doubly_linked_list_1_1_node"/>
        <childnode refid="217" relation="usage">
          <edgelabel>previous</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="218" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="34" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="33" bodyend="218"/>
    <listofallmembers>
      <member refid="classmodm_1_1_doubly_linked_list_1a368e36ec34bb1b61e2a6e3ee3bc37ac6" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>append</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1ac2bf3de4a44527c127904ec72025d725" prot="protected" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>back</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a4ea1c605beef3295d419c30f93fd1b44" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>begin</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a6d3a587745db0912730cada49a6b675d" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>begin</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1ac220ce1c155db1ac44146c12d178056f" prot="private" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a72e6f00b1a02c28cc99b601c4eb35c39" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>DoublyLinkedList</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a611baea384db46a202dbad61096491bc" prot="private" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>DoublyLinkedList</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1ab3745b75728a8324edc683cddbb24aa3" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>end</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a58669d3078b932d75287eedd236f3159" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>end</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a17b45c148abec96b03cf1ce5a60f00ba" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>erase</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a67f48f0960d35b9f6df920bd1ee2aac6" prot="protected" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>front</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1ad089b59dbe1f4db02bf38f013fe40324" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>getBack</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a01c4c0eaf4d6ef327051834b6ad0a182" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>getFront</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a2704f3ffe76aba1fdced428f4c498120" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>getSize</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1acd84a32b3c5ae92f1e80b8b1bd940bee" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>isEmpty</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a67171474c4da6cc8efe0c7fafefd2b2d" prot="private" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>iterator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1ae8f16ce57abf4657747511050f3f41ed" prot="protected" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>nodeAllocator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a2c2d6f838905f1525786eccb1732bf04" prot="protected" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>NodeAllocator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a40840b7f1d9fa94f1063ef498f0a1a60" prot="private" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a7b92a84a6303e3a7dc6089802b80e3fc" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>prepend</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a329fcaf3395364a7be161af64e26f954" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>removeBack</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1abb61d16b75ba877758e459967b534a14" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>removeFront</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1a699448488e4506d686026da0cc5881dd" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList</scope><name>~DoublyLinkedList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
