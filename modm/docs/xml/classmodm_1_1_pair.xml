<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_pair" kind="class" language="C++" prot="public">
    <compoundname>modm::Pair</compoundname>
    <includes refid="pair_8hpp" local="no">modm/container/pair.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T1</declname>
        <defname>T1</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>T2</declname>
        <defname>T2</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmodm_1_1_pair_1ad1221d1fbc8f6e98ea9764730994c7e7" prot="public" static="no">
        <type>T1</type>
        <definition>typedef T1 modm::Pair&lt; T1, T2 &gt;::FirstType</definition>
        <argsstring></argsstring>
        <name>FirstType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="69" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmodm_1_1_pair_1a6dafb3d620d291d44eb7df2e453dc301" prot="public" static="no">
        <type>T2</type>
        <definition>typedef T2 modm::Pair&lt; T1, T2 &gt;::SecondType</definition>
        <argsstring></argsstring>
        <name>SecondType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="70" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmodm_1_1_pair_1a641122d09157530217ac1df466756ec7" prot="public" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_pair_1ad1221d1fbc8f6e98ea9764730994c7e7" kindref="member">FirstType</ref></type>
        <definition>FirstType modm::Pair&lt; T1, T2 &gt;::first</definition>
        <argsstring></argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="107" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_pair_1a4497a4fd53ef4a5063418de10174f24c" prot="public" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_pair_1a6dafb3d620d291d44eb7df2e453dc301" kindref="member">SecondType</ref></type>
        <definition>SecondType modm::Pair&lt; T1, T2 &gt;::second</definition>
        <argsstring></argsstring>
        <name>second</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="108" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_pair_1a492a3e44e16b73978557ab7c630fe327" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_pair_1ad1221d1fbc8f6e98ea9764730994c7e7" kindref="member">FirstType</ref> &amp;</type>
        <definition>FirstType&amp; modm::Pair&lt; T1, T2 &gt;::getFirst</definition>
        <argsstring>()</argsstring>
        <name>getFirst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="82" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_pair_1a73342c180df2b07ef10bb56b3d6fcc68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_pair_1ad1221d1fbc8f6e98ea9764730994c7e7" kindref="member">FirstType</ref> &amp;</type>
        <definition>const FirstType&amp; modm::Pair&lt; T1, T2 &gt;::getFirst</definition>
        <argsstring>() const</argsstring>
        <name>getFirst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="88" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_pair_1af246551e57ec593802f9ac37d68b78cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_pair_1a6dafb3d620d291d44eb7df2e453dc301" kindref="member">SecondType</ref> &amp;</type>
        <definition>SecondType&amp; modm::Pair&lt; T1, T2 &gt;::getSecond</definition>
        <argsstring>()</argsstring>
        <name>getSecond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="94" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_pair_1aa24d7983aa5110ecd0c999100f582e4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_pair_1a6dafb3d620d291d44eb7df2e453dc301" kindref="member">SecondType</ref> &amp;</type>
        <definition>const SecondType&amp; modm::Pair&lt; T1, T2 &gt;::getSecond</definition>
        <argsstring>() const</argsstring>
        <name>getSecond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="100" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Pair&lt;FirstType, SecondType&gt; is a heterogeneous pair. </para>    </briefdescription>
    <detaileddescription>
<para>This class holds one object of type FirstType and one object of type SecondType.</para><para>It provides only the default constructors and public variables to enable usage as POD (plain old data) object. Only with this characteristic it is possible to storage objects of this type inside the flash-memory which is desirable for example for the interpolation classes.</para><para><simplesect kind="see"><para><ref refid="classmodm_1_1interpolation_1_1_linear" kindref="compound">modm::interpolation::Linear</ref></para></simplesect>
This constraint make a the usage rather unusual. See this example: <programlisting><codeline><highlight class="normal">//<sp/>construction</highlight></codeline>
<codeline><highlight class="normal">modm::Pair&lt;uint8_t,<sp/>uint16_t&gt;<sp/>pair<sp/>=<sp/>{<sp/>12,<sp/>-12345<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>this<sp/>typedef<sp/>is<sp/>necessary<sp/>to<sp/>be<sp/>able<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>type<sp/>inside<sp/>the<sp/>FLASH<sp/>macro</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>modm::Pair&lt;int8_t,<sp/>int8_t&gt;<sp/>MyPair;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>put<sp/>some<sp/>values<sp/>into<sp/>the<sp/>flash<sp/>memory</highlight></codeline>
<codeline><highlight class="normal">FLASH_STORAGE(MyPair<sp/>pairs[3])<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>10<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>2,<sp/>30<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>5,<sp/>60<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>As this class has no constructor you need to use the following syntax to initialize an instance of this class: <programlisting><codeline><highlight class="normal">modm::Pair&lt;int,<sp/>float&gt;<sp/>pair<sp/>=<sp/>{<sp/>1203,<sp/>1035.234<sp/>};</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Even if this class provides public attributes it is recommend to use the access methods, because as soon as C++0x is available the implementation will be changed and the attributes will be made private. Until then just ignore that you can access them directly ;-)</para></simplesect>
<simplesect kind="author"><para>Fabian Greif </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" line="67" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/pair.hpp" bodystart="66" bodyend="109"/>
    <listofallmembers>
      <member refid="classmodm_1_1_pair_1a641122d09157530217ac1df466756ec7" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>first</name></member>
      <member refid="classmodm_1_1_pair_1ad1221d1fbc8f6e98ea9764730994c7e7" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>FirstType</name></member>
      <member refid="classmodm_1_1_pair_1a492a3e44e16b73978557ab7c630fe327" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>getFirst</name></member>
      <member refid="classmodm_1_1_pair_1a73342c180df2b07ef10bb56b3d6fcc68" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>getFirst</name></member>
      <member refid="classmodm_1_1_pair_1af246551e57ec593802f9ac37d68b78cc" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>getSecond</name></member>
      <member refid="classmodm_1_1_pair_1aa24d7983aa5110ecd0c999100f582e4e" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>getSecond</name></member>
      <member refid="classmodm_1_1_pair_1a4497a4fd53ef4a5063418de10174f24c" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>second</name></member>
      <member refid="classmodm_1_1_pair_1a6dafb3d620d291d44eb7df2e453dc301" prot="public" virt="non-virtual"><scope>modm::Pair</scope><name>SecondType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
