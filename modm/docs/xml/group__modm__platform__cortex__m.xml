<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__modm__platform__cortex__m" kind="group">
    <compoundname>modm_platform_cortex_m</compoundname>
    <title>ARM Cortex-M Core</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module generates the startup code, the vector table, the linkerscript and provides runtime support for dynamic memory allocations on the heap and assertion handling.</para><para><heading level="2">Linkerscript</heading>
</para><para>The linkerscript is generated for the devices memory map.</para><para><heading level="3">Placement of <computeroutput>.fastcode</computeroutput> section</heading>
</para><para>From the Cortex-M3 Technical Reference Manual:</para><para><blockquote><para>14.5 System Interface:</para><para>The system interface is a 32-bit AHB-Lite bus. Instruction and vector fetches, and data and debug accesses to the System memory space, 0x20000000 - 0xDFFFFFFF, 0xE0100000 - 0xFFFFFFFF, are performed over this bus.</para><para>14.5.6 Pipelined instruction fetches:</para><para>To provide a clean timing interface on the System bus, instruction and vector fetch requests to this bus are registered. This results in an additional cycle of latency because instructions fetched from the System bus take two cycles. This also means that back-to-back instruction fetches from the System bus are not possible.</para><para>Note: Instruction fetch requests to the ICode bus are not registered. Performance critical code must run from the ICode interface. </para></blockquote></para><para>So for STM32s where the CCM is <emphasis>not</emphasis> connected to the I-Bus, we execute <computeroutput>.fastcode</computeroutput> from Flash. </para>    </detaileddescription>
  </compounddef>
</doxygen>
