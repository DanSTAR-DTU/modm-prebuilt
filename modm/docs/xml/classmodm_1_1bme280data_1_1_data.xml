<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1bme280data_1_1_data" kind="class" language="C++" prot="public">
    <compoundname>modm::bme280data::Data</compoundname>
    <basecompoundref refid="structmodm_1_1bme280data_1_1_data_base" prot="public" virt="non-virtual">modm::bme280data::DataBase</basecompoundref>
    <includes refid="bme280__data_8hpp" local="no">modm/driver/pressure/bme280_data.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1bme280data_1_1_data_1a89613848ef534f38373bc6d15d79fc01" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t modm::bme280data::Data::calibratedTemperature</definition>
        <argsstring></argsstring>
        <name>calibratedTemperature</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="194" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1bme280data_1_1_data_1add480488c7a3458cfbfe4ee1e8ff25ce" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t modm::bme280data::Data::calibratedPressure</definition>
        <argsstring></argsstring>
        <name>calibratedPressure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="195" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1bme280data_1_1_data_1a1aa44628c39e06923216049749197b49" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t modm::bme280data::Data::calibratedHumidity</definition>
        <argsstring></argsstring>
        <name>calibratedHumidity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="196" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1bme280data_1_1_data_1aa0d05018775d5601614e5e0c8d231217" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t modm::bme280data::Data::t_fine</definition>
        <argsstring></argsstring>
        <name>t_fine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="199" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a974bca977aa2a7bf9a37fa8acb4e0b5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::bme280data::Data::Data</definition>
        <argsstring>()</argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="135" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data_impl_fp.hpp" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a46ba238a15e45ed9056b10988dd9160e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::bme280data::Data::getTemperature</definition>
        <argsstring>()</argsstring>
        <name>getTemperature</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the calibrated temperature for the device in 0.01 degree Celsius</para><para>If recalculation is necessary it is done on the fly. No I2C transaction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="144" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data_impl_fp.hpp" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a8c1d599f4a85d004f0e888124cb3d01e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::bme280data::Data::getTemperature</definition>
        <argsstring>(int32_t &amp;temp)</argsstring>
        <name>getTemperature</name>
        <param>
          <type>int32_t &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="147" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a60266b853c4925a346ef83a2dd00faf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::bme280data::Data::getTemperature</definition>
        <argsstring>(float &amp;temp)</argsstring>
        <name>getTemperature</name>
        <param>
          <type>float &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="150" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a81c09328bdcdd2d594d12618ee29a554" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::bme280data::Data::getTemperature</definition>
        <argsstring>(double &amp;temp)</argsstring>
        <name>getTemperature</name>
        <param>
          <type>double &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="153" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1ae2684a511acc8664f453a93054ea2662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::bme280data::Data::getPressure</definition>
        <argsstring>()</argsstring>
        <name>getPressure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the calibrated pressure from the device in Pascal.</para><para>If recalculation is necessary it is done on the fly. No I2C transaction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="162" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data_impl_fp.hpp" bodystart="153" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a887ba6cdbee62cb06bf19e88f9645aa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::bme280data::Data::getHumidity</definition>
        <argsstring>()</argsstring>
        <name>getHumidity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="165" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data_impl_fp.hpp" bodystart="162" bodyend="168"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a137540c23e2faa8dea2a4a8dfcb4b952" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::bme280data::Data::calculateCalibratedTemperature</definition>
        <argsstring>()</argsstring>
        <name>calculateCalibratedTemperature</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use the calibration data read from the sensor to calculate the calibrated temperature from the raw data. The result is stored in this struct for further access. Implemented differently for Fixed Point, Single and Double Precision by template specialsation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="178" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data_impl_fp.hpp" bodystart="41" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1a1ba3089e5ff4c8a336fc301b4b38725f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::bme280data::Data::calculateCalibratedPressure</definition>
        <argsstring>()</argsstring>
        <name>calculateCalibratedPressure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classmodm_1_1bme280data_1_1_data_1a137540c23e2faa8dea2a4a8dfcb4b952" kindref="member">calculateCalibratedTemperature()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="184" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data_impl_fp.hpp" bodystart="69" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1bme280data_1_1_data_1ac51bf08432b8ba50ff8f3ec23fdd2374" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::bme280data::Data::calculateCalibratedHumidity</definition>
        <argsstring>()</argsstring>
        <name>calculateCalibratedHumidity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="classmodm_1_1bme280data_1_1_data_1a137540c23e2faa8dea2a4a8dfcb4b952" kindref="member">calculateCalibratedTemperature()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="190" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data_impl_fp.hpp" bodystart="112" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="197">
        <label>modm::bme280data::DataBase</label>
        <link refid="structmodm_1_1bme280data_1_1_data_base"/>
      </node>
      <node id="196">
        <label>modm::bme280data::Data</label>
        <link refid="classmodm_1_1bme280data_1_1_data"/>
        <childnode refid="197" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="200">
        <label>modm::bme280data::Calibration</label>
        <link refid="structmodm_1_1bme280data_1_1_calibration"/>
      </node>
      <node id="199">
        <label>modm::bme280data::DataBase</label>
        <link refid="structmodm_1_1bme280data_1_1_data_base"/>
        <childnode refid="200" relation="usage">
          <edgelabel>calibration</edgelabel>
        </childnode>
      </node>
      <node id="198">
        <label>modm::bme280data::Data</label>
        <link refid="classmodm_1_1bme280data_1_1_data"/>
        <childnode refid="199" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" line="132" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/driver/pressure/bme280_data.hpp" bodystart="130" bodyend="200"/>
    <listofallmembers>
      <member refid="classmodm_1_1bme280data_1_1_data_1ac51bf08432b8ba50ff8f3ec23fdd2374" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>calculateCalibratedHumidity</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a1ba3089e5ff4c8a336fc301b4b38725f" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>calculateCalibratedPressure</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a137540c23e2faa8dea2a4a8dfcb4b952" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>calculateCalibratedTemperature</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a1aa44628c39e06923216049749197b49" prot="private" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>calibratedHumidity</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1add480488c7a3458cfbfe4ee1e8ff25ce" prot="private" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>calibratedPressure</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a89613848ef534f38373bc6d15d79fc01" prot="private" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>calibratedTemperature</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1ac44f0ec1d448d956eac1ff07f0b50fb6" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>calibration</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a974bca977aa2a7bf9a37fa8acb4e0b5f" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>Data</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1a5919a333b7d0dd374c8513b6cb3ec2dd" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>DataBase</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1a87b2e5f8ef99cfb0482aefdf681333ae" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>getCalibration</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a887ba6cdbee62cb06bf19e88f9645aa8" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>getHumidity</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1ae2684a511acc8664f453a93054ea2662" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>getPressure</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a46ba238a15e45ed9056b10988dd9160e" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>getTemperature</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a8c1d599f4a85d004f0e888124cb3d01e" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>getTemperature</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a60266b853c4925a346ef83a2dd00faf0" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>getTemperature</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1a81c09328bdcdd2d594d12618ee29a554" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>getTemperature</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1af6b6b2f160ccc5a701e8a4c52df0c77ba886b210636a5897aa0db0fd8e8539b87" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>HUMIDITY_CALCULATED</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1a8dc2153aac5cce57c51cab197f9a2853" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>meta</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1af6b6b2f160ccc5a701e8a4c52df0c77ba50387e1b4919c419733dfaacf24e8a02" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>PRESSURE_CALCULATED</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1a80c9b71642ef23dc2c987662ce0111d7" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>raw</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1a26938923b1531ea6d450104d3e8752e0" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>rawHumidityTouched</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1aa82be88305b961c19c11f29cadfe0cb7" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>rawPressureTouched</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1a976d4ce1a1e6654bafdbb21cbb35d3e2" prot="public" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>rawTemperatureTouched</name></member>
      <member refid="classmodm_1_1bme280data_1_1_data_1aa0d05018775d5601614e5e0c8d231217" prot="private" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>t_fine</name></member>
      <member refid="structmodm_1_1bme280data_1_1_data_base_1af6b6b2f160ccc5a701e8a4c52df0c77bab0dbf776fd00b286348c145b3424a77a" prot="protected" virt="non-virtual"><scope>modm::bme280data::Data</scope><name>TEMPERATURE_CALCULATED</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
