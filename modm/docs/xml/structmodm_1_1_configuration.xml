<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structmodm_1_1_configuration" kind="struct" language="C++" prot="public">
    <compoundname>modm::Configuration</compoundname>
    <basecompoundref refid="structmodm_1_1_flags_operators" prot="public" virt="non-virtual">modm::FlagsOperators&lt; Parent::EnumType, Parent::UnderlyingType &gt;</basecompoundref>
    <includes refid="register_8hpp" local="no">modm/architecture/interface/register.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Parent</type>
      </param>
      <param>
        <type>typename Enum</type>
      </param>
      <param>
        <type>typename Parent::UnderlyingType</type>
        <declname>Mask</declname>
        <defname>Mask</defname>
      </param>
      <param>
        <type>typename Parent::UnderlyingType</type>
        <declname>Position</declname>
        <defname>Position</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_configuration_1abf0d5fb3a94e6809c81cb1d58ed03086" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::set</definition>
        <argsstring>(Parent &amp;parent, Enum config)</argsstring>
        <name>set</name>
        <param>
          <type>Parent &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>Enum</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>clears and sets a new configuration in a <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="583" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="583" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_configuration_1a59636838699c9ba89267fcb801e01a81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::reset</definition>
        <argsstring>(Parent &amp;parent)</argsstring>
        <name>reset</name>
        <param>
          <type>Parent &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>clears the configuration in a <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="587" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="587" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_configuration_1ac29740c6f4c3adf62b7fdacdea673331" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr Enum</type>
        <definition>static constexpr Enum modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::get</definition>
        <argsstring>(Parent const &amp;parent)</argsstring>
        <name>get</name>
        <param>
          <type>Parent const &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>returns the configuration from a <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="591" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="591" bodyend="592"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structmodm_1_1_configuration_1ab9d46bf21367ff120e0d4cc972eda5b3" prot="private" static="no">
        <type>Parent::UnderlyingType</type>
        <definition>typedef Parent::UnderlyingType modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::UnderlyingType</definition>
        <argsstring></argsstring>
        <name>UnderlyingType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="563" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmodm_1_1_configuration_1a96d52bacb9baf91a1377b67b6cd4a404" prot="private" static="no">
        <type>UnderlyingType</type>
        <definition>typedef UnderlyingType modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::UType</definition>
        <argsstring></argsstring>
        <name>UType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="564" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structmodm_1_1_configuration_1a3273d71424f9af03e693db618fc11356" prot="private" static="no">
        <type>Parent::EnumType</type>
        <definition>typedef Parent::EnumType modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::EType</definition>
        <argsstring></argsstring>
        <name>EType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="565" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="565" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmodm_1_1_configuration_1a5ec48a181b69a0449fea9f4be17e43ba" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::Configuration</definition>
        <argsstring>(UnderlyingType config)</argsstring>
        <name>Configuration</name>
        <param>
          <type>UnderlyingType</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>explicit constructor for the underlying type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="569" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="569" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_configuration_1a6290307c60e58959878d0fcee2139d5c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::Configuration</definition>
        <argsstring>(Enum config)</argsstring>
        <name>Configuration</name>
        <param>
          <type>Enum</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>explicit constructor for the enum type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="572" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="572" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_configuration_1a065e33a67abe6e57966ce718c6456b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::Configuration</definition>
        <argsstring>(Configuration const &amp;o)=default</argsstring>
        <name>Configuration</name>
        <param>
          <type><ref refid="structmodm_1_1_configuration" kindref="compound">Configuration</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_configuration_1a3bf31e71f6913ca780a55e367a033d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::Configuration</definition>
        <argsstring>(Configuration &amp;&amp;o)=default</argsstring>
        <name>Configuration</name>
        <param>
          <type><ref refid="structmodm_1_1_configuration" kindref="compound">Configuration</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>move constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="578" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structmodm_1_1_configuration_1aedefe9e8396caa9a6364562759a155ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr Parent</type>
        <definition>static constexpr Parent modm::Configuration&lt; Parent, Enum, Mask, Position &gt;::mask</definition>
        <argsstring>()</argsstring>
        <name>mask</name>
        <briefdescription>
<para>returns the shifted mask for this configuration </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="596" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="596" bodyend="597"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class for accessing a configuration in a register.</para><para>A configuration is a combination of bits, whose meaning is different from their numerical value. A typical example is a 2-bit prescaler with the values [0,1,2,3] correspond to the meanings [Div1, Div2, Div4, Div8].</para><para>The <ref refid="structmodm_1_1_configuration" kindref="compound">Configuration</ref> class belongs to a specific <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> class and connects a corresponding Sascha Schade enum with a specific mask and bit position. This means that the <ref refid="structmodm_1_1_configuration" kindref="compound">Configuration</ref> class will mask and shift the values whenever needed. However, shifting is only done when the Position template parameter is non-zero.</para><para>To understand when shifting is necessary, consider the following two scenarios:<orderedlist>
<listitem><para>There is only one prescaler configuration at bit position 4, and</para></listitem><listitem><para>There are two or more prescaler configurations at several bit positions.</para></listitem></orderedlist>
</para><para>For the first scenario, no shifting is required, as we can declare the prescaler values already in the shifted position: <programlisting><codeline><highlight class="normal">enum<sp/>class</highlight></codeline>
<codeline><highlight class="normal">Prescaler<sp/>:<sp/>uint8_t</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div1<sp/>=<sp/>(0<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div2<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div4<sp/>=<sp/>(2<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div8<sp/>=<sp/>(3<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Configuration&lt;Control_t,<sp/>Prescaler,<sp/>(0b11<sp/>&lt;&lt;<sp/>4)&gt;<sp/>Prescaler_t;</highlight></codeline>
</programlisting></para><para>For the second scenario, shifting is required: <programlisting><codeline><highlight class="normal">enum<sp/>class</highlight></codeline>
<codeline><highlight class="normal">Prescaler<sp/>:<sp/>uint8_t</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div1<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div2<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div4<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div8<sp/>=<sp/>3,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">//<sp/>shift<sp/>position<sp/>4</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Configuration&lt;Control_t,<sp/>Prescaler,<sp/>0b11,<sp/>4&gt;<sp/>Prescaler_t;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>shift<sp/>position<sp/>6</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Configuration&lt;Control_t,<sp/>Prescaler,<sp/>0b11,<sp/>6&gt;<sp/>Prescaler2_t;</highlight></codeline>
</programlisting></para><para>However, clever choice of the mask and shift position values can minimize shifting. <programlisting><codeline><highlight class="normal">enum<sp/>class</highlight></codeline>
<codeline><highlight class="normal">Prescaler<sp/>:<sp/>uint8_t</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div1<sp/>=<sp/>(0<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div2<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div4<sp/>=<sp/>(2<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Div8<sp/>=<sp/>(3<sp/>&lt;&lt;<sp/>4),</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">//<sp/>shift<sp/>position<sp/>4,<sp/>not<sp/>shifted</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Configuration&lt;Control_t,<sp/>Prescaler,<sp/>(0b11<sp/>&lt;&lt;<sp/>4)&gt;<sp/>Prescaler_t;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>shift<sp/>position<sp/>6,<sp/>shifted<sp/>only<sp/>by<sp/>2<sp/>bits</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Configuration&lt;Control_t,<sp/>Prescaler,<sp/>(0b11<sp/>&lt;&lt;<sp/>4),<sp/>2&gt;<sp/>Prescaler2_t;</highlight></codeline>
</programlisting></para><para>This is especially useful on CPUs, which do not have a barrelshifter like the AVRs.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Parent</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> class to which this configuration belongs to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Enum</parametername>
</parameternamelist>
<parameterdescription>
<para>a strongly-typed enum containing the configuration values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Mask</parametername>
</parameternamelist>
<parameterdescription>
<para>the (unshifted) bit mask corresponding to the enum values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Position</parametername>
</parameternamelist>
<parameterdescription>
<para>how many bits the configuration values need to be shifted</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="182">
        <label>modm::Register&lt; Parent::UnderlyingType &gt;</label>
        <link refid="structmodm_1_1_register"/>
      </node>
      <node id="180">
        <label>modm::Configuration&lt; Parent, Enum, Mask, Position &gt;</label>
        <link refid="structmodm_1_1_configuration"/>
        <childnode refid="181" relation="public-inheritance">
        </childnode>
      </node>
      <node id="181">
        <label>modm::FlagsOperators&lt; Parent::EnumType, Parent::UnderlyingType &gt;</label>
        <link refid="structmodm_1_1_flags_operators"/>
        <childnode refid="182" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="185">
        <label>modm::Register&lt; Parent::UnderlyingType &gt;</label>
        <link refid="structmodm_1_1_register"/>
      </node>
      <node id="183">
        <label>modm::Configuration&lt; Parent, Enum, Mask, Position &gt;</label>
        <link refid="structmodm_1_1_configuration"/>
        <childnode refid="184" relation="public-inheritance">
        </childnode>
      </node>
      <node id="184">
        <label>modm::FlagsOperators&lt; Parent::EnumType, Parent::UnderlyingType &gt;</label>
        <link refid="structmodm_1_1_flags_operators"/>
        <childnode refid="185" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="561" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="560" bodyend="603"/>
    <listofallmembers>
      <member refid="structmodm_1_1_configuration_1a5ec48a181b69a0449fea9f4be17e43ba" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>Configuration</name></member>
      <member refid="structmodm_1_1_configuration_1a6290307c60e58959878d0fcee2139d5c" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>Configuration</name></member>
      <member refid="structmodm_1_1_configuration_1a065e33a67abe6e57966ce718c6456b9e" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>Configuration</name></member>
      <member refid="structmodm_1_1_configuration_1a3bf31e71f6913ca780a55e367a033d46" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>Configuration</name></member>
      <member refid="structmodm_1_1_flags_operators_1a9df5a6983573bcc224398c2020d6459c" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>EnumType</name></member>
      <member refid="structmodm_1_1_configuration_1a3273d71424f9af03e693db618fc11356" prot="private" virt="non-virtual"><scope>modm::Configuration</scope><name>EType</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1979ef9b9355bdc69e938c43dd89dcb6" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1adcf3c618c16f217e8ec1ac5ce825b726" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a69210167d06c667cc1363652ebb4720f" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1aeac8d1600b0567c340a62eae299a434e" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1ae60e3d89b041aea0a242c8c332843849" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a5a15da92c03131959f00fe3122d3f2b0" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_configuration_1ac29740c6f4c3adf62b7fdacdea673331" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>get</name></member>
      <member refid="structmodm_1_1_configuration_1aedefe9e8396caa9a6364562759a155ae" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>mask</name></member>
      <member refid="structmodm_1_1_register_1aca49e332e09a999a9c10182c44a0ddff" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator bool</name></member>
      <member refid="structmodm_1_1_register_1a959d3b687497e1485faec27887cd8925" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator!</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1a22f48deee83c98157648b5fab35b19" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator&amp;</name></member>
      <member refid="structmodm_1_1_flags_operators_1aa37c7eae13739d1f79fae64329034b6c" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator&amp;=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a42b56aa9bcbda706bcaf5fc86df01bcb" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator&amp;=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a92001e0adca0280cd7bc248543635c6a" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a0baf85508f4708a386420aad5749c460" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_operators_1acd0240578bf6dde719f39464c82002be" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator^</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1b9f2672e756b82403df85f3abd953e5" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator^=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a40e2f53dd48f6889db0290fe6b594814" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator^=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a600cfb6f6939c33ff1dd555ff7c4757e" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator|</name></member>
      <member refid="structmodm_1_1_flags_operators_1a9e09e13d81dd36cb32a53274185b9286" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator|=</name></member>
      <member refid="structmodm_1_1_flags_operators_1afecc755620b863362cd6be1b7b01174d" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator|=</name></member>
      <member refid="structmodm_1_1_flags_operators_1aa92025455589054692cce6ad6329ca38" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>operator~</name></member>
      <member refid="structmodm_1_1_register_1a6011e04b6402adbf7a4497e11dfb9b04" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>Register</name></member>
      <member refid="structmodm_1_1_register_1a9b9f9dfa762f2912886ee6618e807087" prot="protected" virt="non-virtual"><scope>modm::Configuration</scope><name>Register</name></member>
      <member refid="structmodm_1_1_configuration_1a59636838699c9ba89267fcb801e01a81" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>reset</name></member>
      <member refid="structmodm_1_1_configuration_1abf0d5fb3a94e6809c81cb1d58ed03086" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>set</name></member>
      <member refid="structmodm_1_1_configuration_1ab9d46bf21367ff120e0d4cc972eda5b3" prot="private" virt="non-virtual"><scope>modm::Configuration</scope><name>UnderlyingType</name></member>
      <member refid="structmodm_1_1_configuration_1a96d52bacb9baf91a1377b67b6cd4a404" prot="private" virt="non-virtual"><scope>modm::Configuration</scope><name>UType</name></member>
      <member refid="structmodm_1_1_register_1a4d86255f7cd8fc09c9f88d1776535f68" prot="public" virt="non-virtual"><scope>modm::Configuration</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
