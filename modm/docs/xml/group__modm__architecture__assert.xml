<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__modm__architecture__assert" kind="group">
    <compoundname>modm_architecture_assert</compoundname>
    <title>Assertions</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__modm__architecture__assert_1gaf22c76f51642c50723ba439c5e080726" prot="public" static="no">
        <name>Abandonment</name>
        <enumvalue id="group__modm__architecture__assert_1ggaf22c76f51642c50723ba439c5e080726a60a3629ef6a8f991f45d7a85f2458544" prot="public">
          <name>DontCare</name>
          <initializer>= Bit0</initializer>
          <briefdescription>
<para>Do not care about failure. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__assert_1ggaf22c76f51642c50723ba439c5e080726afd038fc7f319e48f3115d92bf5bdbef9" prot="public">
          <name>Ignore</name>
          <initializer>= Bit1</initializer>
          <briefdescription>
<para>Safe to ignore this failure. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__assert_1ggaf22c76f51642c50723ba439c5e080726aceaa0734f0b3c738120c67344d8f3ec1" prot="public">
          <name>Fail</name>
          <initializer>= Bit2</initializer>
          <briefdescription>
<para>This failure is reason for abandonment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Describes abandonment type of assertions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="28" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" bodystart="26" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__modm__architecture__assert_1ga7737b85c4054dc754b61bf0da7c165fe" prot="public" static="no">
        <type>Abandonment(*)(const char *module, const char *location, const char *failure, uintptr_t context)</type>
        <definition>using modm::AssertionHandler = typedef Abandonment (*)(const char * module, const char * location, const char * failure, uintptr_t context)</definition>
        <argsstring></argsstring>
        <name>AssertionHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature of the assertion handlers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="36" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__modm__architecture__assert_1gaa114a8966a537091056c29be69128d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure)</argsstring>
        <name>modm_assert</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier. This assert is always included in the source code. <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the failure identifier string is placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1ga30f972d5576059fc223eb1103fe410d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure, uintptr_t context)</argsstring>
        <name>modm_assert</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier and context. This assert is always included in the source code. <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the failure identifier string is placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1ga5550f5d2d8e1c93ea54dab9b3ceece0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert_debug</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure)</argsstring>
        <name>modm_assert_debug</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier. This assert is only triggered in the source code on debug builds! <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the strings are placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1gafc6fdce377db677c250069879e8b54d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert_debug</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure, uintptr_t context)</argsstring>
        <name>modm_assert_debug</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier and context. This assert is only triggered in the source code on debug builds! <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the strings are placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1ga167476628ef21d7f3c88a79d7a90b7a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm_abandon</definition>
        <argsstring>(const char *module, const char *location, const char *failure, uintptr_t context) modm_weak</argsstring>
        <name>modm_abandon</name>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwriteable abandonment handler for all targets.</para><para>You should overwrite this handler for custom failure behaviour like blinking LEDs and outputting the failure string via a serial connection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="116" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__modm__architecture__assert_1ga16bc9b4ebefe47d1417ec75f99b30ee6" prot="public" static="no">
        <name>MODM_ASSERTION_HANDLER</name>
        <param><defname>handler</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This adds a function to the list of assertion handlers to execute on assertion failure. Note that this macro does not give you any influence over the order of handler execution on assertion failure. Do not write assertion handlers that depend on any ordered execution!</para><para><simplesect kind="warning"><para>On AVR targets the failure identifier resides in Flash memory!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A function of signature <computeroutput>AssertionHandler</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" line="57" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/assert.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>These functions allow you to assert a condition at runtime and define failure handlers in your application that can decide what to do with this assertion and provide custom functionality.</para><para>Each assertion has the form <computeroutput>modm_assert(condition, module, location, failure)</computeroutput>, where the condition is a boolean and rest are strings, so that a simple string compare can be used to match for module, location or failure. For example, the identifier <computeroutput>&quot;can&quot;, &quot;init&quot;, &quot;timeout&quot;</computeroutput> describes a timeout failure in the CAN initializer function. The assert <computeroutput>modm_assert_debug(condition, module, location, failure)</computeroutput> is only available on debug builds and is removed from the code for a release build.</para><para>The user can define one or multiple assertion handlers in any part of the application using the <computeroutput><ref refid="group__modm__architecture__assert_1ga16bc9b4ebefe47d1417ec75f99b30ee6" kindref="member">MODM_ASSERTION_HANDLER(function)</ref></computeroutput> macro. All assertion handlers will be executed when an assertion fails anywhere in the code and get passed the identifier string.</para><para><simplesect kind="note"><para>The order of assertion handler execution is undefined and must not been relied upon for any functionality!</para></simplesect>
<simplesect kind="warning"><para>Assertion handlers may be executed in interrupt context!</para></simplesect>
Depending on the information in the failure identifier, the assertion handler returns <computeroutput>Abandonment::DontCare</computeroutput> if the failure is not of interest, or <computeroutput>Abandonment::Ignore</computeroutput> for recoverable failures, or <computeroutput>Abandonment::Fail</computeroutput> for failures that do not allow normal program continuation. The program is aborted, if any assertion handler returns <computeroutput>Abandonment::Fail</computeroutput>, all assertion handlers return <computeroutput>Abandonment::DontCare</computeroutput> or no assertion handlers have been defined in the application. Only if one or many assertion handlers return <computeroutput>Abandonment::Ignore</computeroutput> and the remainder returns <computeroutput>Abandonment::DontCare</computeroutput>, only then is the assertion ignored.</para><para><simplesect kind="note"><para>It is intended that the assertion handlers do not block (forever), so that all assertion handlers can get called.</para></simplesect>
On program abandonment <computeroutput>modm_abandon(module, location, failure)</computeroutput> is called, which exits the program silently by default. Only on hosted an formatted error string is output by default. It is therefore recommended to overwrite this function on embedded targets for custom behavior like blinking an LED and printing to a serial connection.</para><para><simplesect kind="warning"><para>The abandonment handler may also be executed in interrupt context! </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
