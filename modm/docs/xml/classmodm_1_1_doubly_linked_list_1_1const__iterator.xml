<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_doubly_linked_list_1_1const__iterator" kind="class" language="C++" prot="public">
    <compoundname>modm::DoublyLinkedList::const_iterator</compoundname>
    <includes refid="doubly__linked__list_8hpp" local="no">modm/container/doubly_linked_list.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a8518425fc192346c00bedb825184bcf1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class DoublyLinkedList</definition>
        <argsstring></argsstring>
        <name>DoublyLinkedList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="137" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a65d4f7e5fcc3205a44536fb29299d49b" prot="private" static="no" mutable="no">
        <type>const <ref refid="structmodm_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>const Node* modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="167" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a94771c2237af9df81a42215a57d765d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>()</argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1aa5af0b130a281dcf58aa80c6cc01472d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const iterator &amp;other)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="classmodm_1_1_doubly_linked_list_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Used to convert a normal iterator to a const iterator. The other way is not possible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a76593c51b28f6e859a2bb687fd804c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const const_iterator &amp;other)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a40928050c1f77f5ce6fd29902b276775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::operator=</definition>
        <argsstring>(const const_iterator &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a973241797ae73e7d9df0f152978701c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1aeefc7183a31fcfcf956935a123ae6f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1acbee4f6e2771feda07523d3ce4a52f87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::operator==</definition>
        <argsstring>(const const_iterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1adc72627e17bcbc48ffa63e274260edf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::operator!=</definition>
        <argsstring>(const const_iterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_doubly_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a6a9b66af77da6693e0784b43db886841" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a37d47f14ddea91cc9e5c829dfc7ad62e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1_doubly_linked_list_1_1const__iterator_1ac56d0d188fcdb2a148ba6fabd3d12783" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DoublyLinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const Node *node)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="structmodm_1_1_doubly_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="165" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>forward const iterator </para>    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000004"><xreftitle>Todo</xreftitle><xrefdescription><para>decrement operator doesn&apos;t work correctly </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" line="136" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/container/doubly_linked_list.hpp" bodystart="135" bodyend="168"/>
    <listofallmembers>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a94771c2237af9df81a42215a57d765d9" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1aa5af0b130a281dcf58aa80c6cc01472d" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a76593c51b28f6e859a2bb687fd804c29" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1ac56d0d188fcdb2a148ba6fabd3d12783" prot="private" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a8518425fc192346c00bedb825184bcf1" prot="private" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>DoublyLinkedList</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a65d4f7e5fcc3205a44536fb29299d49b" prot="private" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>node</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1adc72627e17bcbc48ffa63e274260edf4" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>operator!=</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a6a9b66af77da6693e0784b43db886841" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>operator*</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a973241797ae73e7d9df0f152978701c4" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>operator++</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1aeefc7183a31fcfcf956935a123ae6f94" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>operator--</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a37d47f14ddea91cc9e5c829dfc7ad62e" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>operator-&gt;</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1a40928050c1f77f5ce6fd29902b276775" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_doubly_linked_list_1_1const__iterator_1acbee4f6e2771feda07523d3ce4a52f87" prot="public" virt="non-virtual"><scope>modm::DoublyLinkedList::const_iterator</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
