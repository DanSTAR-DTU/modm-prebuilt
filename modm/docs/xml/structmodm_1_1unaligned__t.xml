<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structmodm_1_1unaligned__t" kind="struct" language="C++" prot="public">
    <compoundname>modm::unaligned_t</compoundname>
    <includes refid="architecture_2interface_2unaligned_8hpp" local="no">modm/architecture/interface/unaligned.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmodm_1_1unaligned__t_1aa68228494dc9e4ba6c59e9acc7730a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::unaligned_t&lt; T &gt;::unaligned_t</definition>
        <argsstring>()</argsstring>
        <name>unaligned_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/unaligned.hpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1unaligned__t_1a4fbe78de7cb24cd8ec3a64b1149bc736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::unaligned_t&lt; T &gt;::unaligned_t</definition>
        <argsstring>(T value)</argsstring>
        <name>unaligned_t</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/unaligned.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1unaligned__t_1a10a5bff1f0ede400d7ac8e003d3d4aa7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::unaligned_t&lt; T &gt;::operator T</definition>
        <argsstring>() const</argsstring>
        <name>operator T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/unaligned.hpp" line="51" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structmodm_1_1unaligned__t_1a5ff5008a788106d7862341b8129cb33f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::unaligned_t&lt; T &gt;::write</definition>
        <argsstring>(T &amp;value)</argsstring>
        <name>write</name>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/unaligned.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1unaligned__t_1a94e81d11751d6f91085fed8cddce4cd4" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::unaligned_t&lt; T &gt;::read</definition>
        <argsstring>(T &amp;value) const</argsstring>
        <name>read</name>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/unaligned.hpp" line="58" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Accesses a type using byte-wise copy.</para>
<para>This wrapper manages unaligned access to memory, by copying the memory to and from the stack, which is always correctly aligned. Use this with teh <computeroutput>asUnaligned</computeroutput> helper: <programlisting><codeline><highlight class="normal">uint8_t<sp/>*buffer;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>`u32`<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>unaligned_t&lt;uint32_t&gt;<sp/>!</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>*u32<sp/>=<sp/>modm::asUnaligned&lt;uint32_t&gt;(buffer);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>write<sp/>to<sp/>the<sp/>unaligned<sp/>location</highlight></codeline>
<codeline><highlight class="normal">*u32<sp/>=<sp/>input;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>read<sp/>from<sp/>the<sp/>unaligned<sp/>location</highlight></codeline>
<codeline><highlight class="normal">output<sp/>=<sp/>*u32;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/unaligned.hpp" line="47" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/unaligned.hpp" bodystart="45" bodyend="59"/>
    <listofallmembers>
      <member refid="structmodm_1_1unaligned__t_1a10a5bff1f0ede400d7ac8e003d3d4aa7" prot="public" virt="non-virtual"><scope>modm::unaligned_t</scope><name>operator T</name></member>
      <member refid="structmodm_1_1unaligned__t_1a94e81d11751d6f91085fed8cddce4cd4" prot="protected" virt="non-virtual"><scope>modm::unaligned_t</scope><name>read</name></member>
      <member refid="structmodm_1_1unaligned__t_1aa68228494dc9e4ba6c59e9acc7730a0d" prot="public" virt="non-virtual"><scope>modm::unaligned_t</scope><name>unaligned_t</name></member>
      <member refid="structmodm_1_1unaligned__t_1a4fbe78de7cb24cd8ec3a64b1149bc736" prot="public" virt="non-virtual"><scope>modm::unaligned_t</scope><name>unaligned_t</name></member>
      <member refid="structmodm_1_1unaligned__t_1a5ff5008a788106d7862341b8129cb33f" prot="protected" virt="non-virtual"><scope>modm::unaligned_t</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
