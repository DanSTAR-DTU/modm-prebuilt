<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__modm__math__utils" kind="group">
    <compoundname>modm_math_utils</compoundname>
    <title>Utilities</title>
    <innergroup refid="group__arithmetic__traits">Arithmetic Traits</innergroup>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__modm__math__utils_1ga973d0e57eb4370f98cbd7bf685deb24c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t modm::swap</definition>
        <argsstring>(uint8_t n)</argsstring>
        <name>swap</name>
        <param>
          <type>uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Exchange the two nibbles of a byte. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0xab<sp/>=&gt;<sp/>0xba</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="38" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga76bafefd41e9954c8a95ef516947f019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::swap</definition>
        <argsstring>(uint8_t &amp;a, uint8_t &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type>uint8_t &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint8_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Exchange two byte. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="56" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga0e50dc2ed3c5aeddc5b0f94bd850bbae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::swap</definition>
        <argsstring>(uint16_t n)</argsstring>
        <name>swap</name>
        <param>
          <type>uint16_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Exchange the two bytes of a 16-bit integer. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0xabcd<sp/>=&gt;<sp/>0xcdab</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="71" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="71" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7008c2fdf9c8b9cb4869979220cc221a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::swap</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>swap</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Exchange the four bytes of a 32-bit integer. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0xabcdefgh<sp/>=&gt;<sp/>0xghefcdab</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="108" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7e5ae44a5c76a8deaac54480dcaf1aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::swap</definition>
        <argsstring>(int16_t &amp;a, int16_t &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type>int16_t &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int16_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="124" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaf059b757726ddbd2bd65c5cde94ea191" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t modm::bitReverse</definition>
        <argsstring>(uint8_t n)</argsstring>
        <name>bitReverse</name>
        <param>
          <type>uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Reverse the bits in a byte. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0b01110100<sp/>=&gt;<sp/>0b00101110</highlight></codeline>
</programlisting></para>
<para>15 clock cycles on an AVR, without call + return. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="142" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="142" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga21d50f72ee3eea7c6cfec85c9960c049" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::bitReverse</definition>
        <argsstring>(uint16_t n)</argsstring>
        <name>bitReverse</name>
        <param>
          <type>uint16_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Reverse the bits in a 16-bit integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="164" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="164" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga9dde46a0dced1c1aabd0f169633540cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::bitReverse</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>bitReverse</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Reverse the bits in a 32-bit integer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="188" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="188" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad8ca8a97b6f8b1f20e73ca32d717dcb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr int8_t</type>
        <definition>constexpr int8_t modm::leftmostBit</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>leftmostBit</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns position of leftmost bit at compile time. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>if no bit set in value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>position of leftmost bit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="220" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaf87b61c94640fb831d3e5a4c4e5d5e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::bitCount</definition>
        <argsstring>(uint8_t n)</argsstring>
        <name>bitCount</name>
        <param>
          <type>uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Count the number of bits set. </para>
        </briefdescription>
        <detaileddescription>
<para>16 clock cycles on an AVR, without call + return. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad44c478120365254aa1ee9387ebf7e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::bitCount</definition>
        <argsstring>(uint16_t n)</argsstring>
        <name>bitCount</name>
        <param>
          <type>uint16_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Count the number of bits set. </para>
        </briefdescription>
        <detaileddescription>
<para>33 clock cycles on an AVR, without call + return. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gae0d037914bc24d4e7d9ef3bd7875c106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::bitCount</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>bitCount</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Count the number of bits set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/bit_operation.hpp" line="244" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__modm__math__utils_1ga301a273e20d9bd3f736d2f6167b0b14c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::isBigEndian</definition>
        <argsstring>()</argsstring>
        <name>isBigEndian</name>
        <briefdescription>
<para>checks if current architecture is big endian </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="28" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7c894de412bf85a4aa1267d98fa4f54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::isLittleEndian</definition>
        <argsstring>()</argsstring>
        <name>isLittleEndian</name>
        <briefdescription>
<para>checks if current architecture is little endian </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="35" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga74f1bba34ce161a34e3e4929c72c0b18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::fromLittleEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="42" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga89290bd7631981b82f9b7e73a8c8aefc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::fromLittleEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="52" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad94b4c4f7a73c242d4d4b3fac74942c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::fromLittleEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="58" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gae5427b8adba982dbfc90908a8c7cd2a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::fromLittleEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="68" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaccf0f6763e19980c7e13cc290efee8c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::fromBigEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="74" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga2f483f2c4164f2dc41bce16ea891e2e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::fromBigEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="84" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaf9b4c1e8636b0bfb1fd32e73d803a5d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::fromBigEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="90" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaff16d1a02befbc605efc0bd8eeb8a7eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::fromBigEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="100" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7fee2ac5cac51ff58f8a73b184cf0272" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::toLittleEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="107" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga8ff15f8dd119979a92282b509665b6b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::toLittleEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="117" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad789b4631e10757beea62d0b035daac1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::toLittleEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="123" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga849d72afae2d2f3fa9168ffd042ebadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::toLittleEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="133" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga0a3d77b988d61f170ba1f341a9731956" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::toBigEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="139" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="139" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaacb7d7c5041c08bf7fcf1734ef995cf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::toBigEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="149" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga931b548d9b9ae92409e6666f053394d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::toBigEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="155" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="155" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gabf818a3c3a336f65afb39f15a17785c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::toBigEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" line="165" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/endianness.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__modm__math__utils_1ga1be252233ce1fdce3a1d75a489ea2b68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::math::crc32</definition>
        <argsstring>(const uint8_t *data, size_t length)</argsstring>
        <name>crc32</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Slow, but table-less computation of CRC32.</para>
<para><simplesect kind="see"><para><ulink url="http://www.hackersdelight.org/hdcodetxt/crc.c.txt">http://www.hackersdelight.org/hdcodetxt/crc.c.txt</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/crc32.hpp" line="26" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/crc32.hpp" bodystart="26" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaec13941291730157912e182afefe1be0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::isPositive</definition>
        <argsstring>(const float &amp;a)</argsstring>
        <name>isPositive</name>
        <param>
          <type>const float &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fast check if a float variable is positive</para>
<para>Checks only the sign bit for the AVR. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" line="36" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga5df53b0ad92fb8fa06b5dc17a16b1ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::pow</definition>
        <argsstring>(uint32_t base, uint8_t exponent)</argsstring>
        <name>pow</name>
        <param>
          <type>uint32_t</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile time and runtime exponentiation</para>
<para>Calculates base raised to the power of exponent. If base and exponent are compile-time constants, the results is calculated at compile time. Otherwise the result is computed at runtime, which might be very expensive.</para>
<para><programlisting><codeline><highlight class="normal">constexpr<sp/>int<sp/>value<sp/>=<sp/>modm::pow(10,<sp/>2);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" line="55" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga0911b63c9be749d20800b5f99fb6d4a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lesser of the parameters.</para>
</simplesect>
This is the simple classic generic implementation. It will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" line="73" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga222358293aace9c4f19a45cb3850f8ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The greater of the parameters.</para>
</simplesect>
This is the simple classic generic implementation. It will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" line="94" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaa89d150ac3c4c69a60307dd6c39f9c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T modm::max</definition>
        <argsstring>(const T a, const T b, const T c)</argsstring>
        <name>max</name>
        <param>
          <type>const T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Something else of arbitrary type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The greater of the three parameters.</para>
</simplesect>
This is the simple classic generic implementation. It will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" line="116" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga63941abd87426c326fd3d968c2fd2256" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b, Compare compare)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>A comparison functor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lesser of the parameters.</para>
</simplesect>
This will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" line="135" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga2a4606035f3c0e99d2bf894251b81b04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b, Compare compare)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>A comparison functor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The greater of the parameters.</para>
</simplesect>
This will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" line="156" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/misc.hpp" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaba15ad6593861fe6186555881ef58d10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::math::sqrt</definition>
        <argsstring>(uint32_t a)</argsstring>
        <name>sqrt</name>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Fast AVR integer square root assembly routines. </para>
        </briefdescription>
        <detaileddescription>
<para>Square root calculation based on a implementation by Ruud v Gessel. The maximum execution time is 310 clock cycles (inclusive CALL+RET)</para>
<para><simplesect kind="see"><para><ulink url="http://www.mikrocontroller.net/articles/AVR_Arithmetik#avr-gcc_Implementierung_.2832_Bit.29">Article on microcontroller.net</ulink> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="http://members.chello.nl/j.beentjes3/Ruud/sqrt32avr.htm">Original implementation</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/operator.hpp" line="42" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/operator.hpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga29f80139d32c4ef6a7720b1da1f83498" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::math::mul</definition>
        <argsstring>(uint16_t a, uint16_t b)</argsstring>
        <name>mul</name>
        <param>
          <type>uint16_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unsigned 16bit x 16bit = 32bit multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>AVR201 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/operator.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga44e2c38b63d9c29e97ec6cc2dee8194f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::math::mul</definition>
        <argsstring>(int16_t a, int16_t b)</argsstring>
        <name>mul</name>
        <param>
          <type>int16_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>signed 16bit x 16bit = 32bit multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>AVR201 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/operator.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7649ada53febd1ca04feeb994824fb00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::math::mac</definition>
        <argsstring>(int32_t result, int16_t a, int16_t b)</argsstring>
        <name>mac</name>
        <param>
          <type>int32_t</type>
          <declname>result</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Signed multiply accumulate of two 16bits numbers with a 32bits result. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">result<sp/>+=<sp/>a<sp/>*<sp/>b;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para>AVR201 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/utils/operator.hpp" line="77" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
