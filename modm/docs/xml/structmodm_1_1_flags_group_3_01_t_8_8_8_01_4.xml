<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4" kind="struct" language="C++" prot="public">
    <compoundname>modm::FlagsGroup&lt; T... &gt;</compoundname>
    <basecompoundref refid="structmodm_1_1_register" prot="public" virt="non-virtual">modm::Register&lt; T::UnderlyingType &gt;</basecompoundref>
    <includes refid="register_8hpp" local="no">modm/architecture/interface/register.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T...</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a6522d55f5c7ad5be50451989df4aee51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsGroup&lt; T... &gt;::FlagsGroup</definition>
        <argsstring>()</argsstring>
        <name>FlagsGroup</name>
        <briefdescription>
<para>default constructor initializes <computeroutput>value</computeroutput> to zero </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="465" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="465" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a6cbfc0390435ab6d80ac6d832be578d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsGroup&lt; T... &gt;::FlagsGroup</definition>
        <argsstring>(FlagsGroup const &amp;o)</argsstring>
        <name>FlagsGroup</name>
        <param>
          <type>FlagsGroup const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="468" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="468" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a320ec614137ccbcd3540cbb92d6d947e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsGroup&lt; T... &gt;::FlagsGroup</definition>
        <argsstring>(typename T::UnderlyingType value)</argsstring>
        <name>FlagsGroup</name>
        <param>
          <type>typename T::UnderlyingType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>explicit underlying type constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="471" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="471" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a307f9674cd6e35740546eebdd1570aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsGroup&lt; T... &gt;::FlagsGroup</definition>
        <argsstring>(typename T::EnumType value)</argsstring>
        <name>FlagsGroup</name>
        <param>
          <type>typename T::EnumType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>enum type constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="475" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="475" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a4e96e9b3e4ce73189ce03f17b9d039a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::FlagsGroup&lt; T... &gt;::FlagsGroup</definition>
        <argsstring>(::modm::FlagsOperators&lt; typename T::EnumType, typename T::UnderlyingType &gt; value)</argsstring>
        <name>FlagsGroup</name>
        <param>
          <type>::<ref refid="structmodm_1_1_flags_operators" kindref="compound">modm::FlagsOperators</ref>&lt; typename T::EnumType, typename T::UnderlyingType &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> operators and <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="478" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="478" bodyend="479"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class for grouping several <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> classes together.</para>
<para>This variadic template class allows you to create a type which provides constructor overloads for the provided types.</para>
<para>This will allow you to cast the passed <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> classes into one class, but not other classes. Notice that this cast destroys type information (naturally) and therefore you cannot use any of the <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> classes type-safe operator overloads. The same reasoning applies here as in the <ref refid="structmodm_1_1_register" kindref="compound">Register</ref> class.</para>
<para><programlisting><codeline><highlight class="normal">typedef<sp/>Flags8&lt;Control1&gt;<sp/>Control1_t;</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Flags8&lt;Control2&gt;<sp/>Control2_t;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">typedef<sp/>FlagsGroup&lt;Control1_t,<sp/>Control2_t&gt;<sp/>Control_t;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>function(Control_t<sp/>control);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>both<sp/>call<sp/>the<sp/>same<sp/>function</highlight></codeline>
<codeline><highlight class="normal">function(Control1_t(0x20));</highlight></codeline>
<codeline><highlight class="normal">function(Control2_t(0x10));</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T...</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> classes to be grouped. Must all have the same underlying types.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="250">
        <label>modm::FlagsGroup&lt; T... &gt;</label>
        <link refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4"/>
        <childnode refid="251" relation="public-inheritance">
        </childnode>
      </node>
      <node id="251">
        <label>modm::Register&lt; T::UnderlyingType &gt;</label>
        <link refid="structmodm_1_1_register"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="254">
        <label>T</label>
      </node>
      <node id="252">
        <label>modm::FlagsGroup&lt; T... &gt;</label>
        <link refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4"/>
        <childnode refid="253" relation="public-inheritance">
        </childnode>
      </node>
      <node id="253">
        <label>modm::Register&lt; T::UnderlyingType &gt;</label>
        <link refid="structmodm_1_1_register"/>
        <childnode refid="254" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="463" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="458" bodyend="481"/>
    <listofallmembers>
      <member refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a6522d55f5c7ad5be50451989df4aee51" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>FlagsGroup</name></member>
      <member refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a6cbfc0390435ab6d80ac6d832be578d8" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>FlagsGroup</name></member>
      <member refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a320ec614137ccbcd3540cbb92d6d947e" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>FlagsGroup</name></member>
      <member refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a307f9674cd6e35740546eebdd1570aa9" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>FlagsGroup</name></member>
      <member refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4_1a4e96e9b3e4ce73189ce03f17b9d039a5" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>FlagsGroup</name></member>
      <member refid="structmodm_1_1_register_1aca49e332e09a999a9c10182c44a0ddff" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>operator bool</name></member>
      <member refid="structmodm_1_1_register_1a959d3b687497e1485faec27887cd8925" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>operator!</name></member>
      <member refid="structmodm_1_1_register_1a6011e04b6402adbf7a4497e11dfb9b04" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>Register</name></member>
      <member refid="structmodm_1_1_register_1a9b9f9dfa762f2912886ee6618e807087" prot="protected" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>Register</name></member>
      <member refid="structmodm_1_1_register_1a01eabc4e19471d308132e16098f245cd" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>UnderlyingType</name></member>
      <member refid="structmodm_1_1_register_1a4d86255f7cd8fc09c9f88d1776535f68" prot="public" virt="non-virtual"><scope>modm::FlagsGroup&lt; T... &gt;</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
