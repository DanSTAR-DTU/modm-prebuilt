<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_adc" kind="class" language="C++" prot="public">
    <compoundname>modm::Adc</compoundname>
    <basecompoundref refid="classmodm_1_1_peripheral_driver" prot="public" virt="non-virtual">modm::PeripheralDriver</basecompoundref>
    <derivedcompoundref refid="classmodm_1_1_adc_interrupt" prot="public" virt="non-virtual">modm::AdcInterrupt</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_adc1" prot="public" virt="non-virtual">modm::platform::Adc1</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_adc2" prot="public" virt="non-virtual">modm::platform::Adc2</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_adc3" prot="public" virt="non-virtual">modm::platform::Adc3</derivedcompoundref>
    <includes refid="adc_8hpp" local="no">modm/architecture/interface/adc.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmodm_1_1_adc_1a80cfcf935b9394cac0c5fd0ddeffb06a" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t modm::Adc::Channel</definition>
        <argsstring></argsstring>
        <name>Channel</name>
        <briefdescription>
<para>this type may also be an enum or enum class </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="56" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmodm_1_1_adc_1accb65726d97868bd953b204e6807a3f9" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Adc::Resolution</definition>
        <argsstring></argsstring>
        <name>Resolution</name>
        <briefdescription>
<para>describes the maximum resolution in bits </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="59" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_adc_1a61ce9408d2a7bfb4403c0cfba4b4a78f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Signals</declname>
            <defname>Signals</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::Adc::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configures the input signals and connects them.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Signals</parametername>
</parameternamelist>
<parameterdescription>
<para>At least one input signal is required and can be passed out-of-order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a155f2716aee6988415cd32bcc2e2cb2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SystemClock</type>
          </param>
          <param>
            <type><ref refid="group__modm__math__units_1gaedfcd0a3509b2f2ae47fd1efd95bd3ce" kindref="member">frequency_t</ref></type>
            <declname>frequency</declname>
            <defname>frequency</defname>
            <defval>200_kHz</defval>
          </param>
          <param>
            <type><ref refid="group__modm__math__units_1ga4f017ee3fdf26cb780b0df55356f031c" kindref="member">percent_t</ref></type>
            <declname>tolerance</declname>
            <defname>tolerance</defname>
            <defval>10_pct</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::Adc::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the hardware and sets the datarate.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SystemClock</parametername>
</parameternamelist>
<parameterdescription>
<para>the currently active system clock </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired clock frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>the allowed relative tolerance for the resulting clock frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a6ba3015dc93d654adc29ae274c851fd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Adc::disable</definition>
        <argsstring>()</argsstring>
        <name>disable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1ad20105da541badf633266f3da4891024" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Adc::startConversion</definition>
        <argsstring>()</argsstring>
        <name>startConversion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>starts a conversion on the selected analog channel <simplesect kind="pre"><para>A channel must be selected with <ref refid="classmodm_1_1_adc_1a11367b26a7f631b73ef9fb3047b66240" kindref="member">setChannel()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1aa8d528f16fdf07a7d730b8eb2fa757ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::Adc::isConversionFinished</definition>
        <argsstring>()</argsstring>
        <name>isConversionFinished</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if all conversion have finished, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a5b3c7ad317985e35aa2b4b26a0083f43" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t modm::Adc::getValue</definition>
        <argsstring>()</argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the most recent result of any conversion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a73bac09f02e8c10479f4d023c95f9570" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t modm::Adc::readChannel</definition>
        <argsstring>(Channel channel)</argsstring>
        <name>readChannel</name>
        <param>
          <type><ref refid="classmodm_1_1_adc_1a80cfcf935b9394cac0c5fd0ddeffb06a" kindref="member">Channel</ref></type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function:</para>
<para><orderedlist>
<listitem><para>set the channel</para>
</listitem><listitem><para>starts the conversion</para>
</listitem><listitem><para>waits until conversion is complete <simplesect kind="return"><para>result of the conversion </para>
</simplesect>
</para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a11367b26a7f631b73ef9fb3047b66240" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::Adc::setChannel</definition>
        <argsstring>(Channel channel)</argsstring>
        <name>setChannel</name>
        <param>
          <type><ref refid="classmodm_1_1_adc_1a80cfcf935b9394cac0c5fd0ddeffb06a" kindref="member">Channel</ref></type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Analog channel selection.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the channel exists and was available, <computeroutput>false</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a4617f7d6e7b8885bf13ac8721cb2751f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t modm::Adc::getChannel</definition>
        <argsstring>()</argsstring>
        <name>getChannel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the currently selected analog channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a1656c2726ea0f707ddf6e6956859ecfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Adc::enableFreeRunningMode</definition>
        <argsstring>()</argsstring>
        <name>enableFreeRunningMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables free running mode</para>
<para>The ADC will continously start conversions and provide the most recent result in the ADC register. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1a90e4e9b0d02be1d9bdfb02ebe445a037" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Adc::disableFreeRunningMode</definition>
        <argsstring>()</argsstring>
        <name>disableFreeRunningMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables free running mode</para>
<para>The ADC will do only one sample and stop. The result will be in the ADC register. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1ae59dbc75533721dc1730cd4d9ba03aca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Adc::setLeftAdjustResult</definition>
        <argsstring>()</argsstring>
        <name>setLeftAdjustResult</name>
        <briefdescription>
<para>Change the presentation of the ADC conversion result to left adjusted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_adc_1aab08e943387f7b0d3583a950a1795a36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Adc::setRightAdjustResult</definition>
        <argsstring>()</argsstring>
        <name>setRightAdjustResult</name>
        <briefdescription>
<para>Change the presentation of the ADC conversion result to right adjusted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="156" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Basic interface of an ADC.</para>
<para>This interface only provides the very basic common functionality between modules. Therefore for any special operating mode, such as interlaced operation, external trigger options or DMA data management, you must refer to the platform specific documentation.</para>
<para>This interface only allows for synchronous operation: <programlisting><codeline><highlight class="normal">//<sp/>read<sp/>channel<sp/>2</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>value<sp/>=<sp/>Adc::readChannel(2);</highlight></codeline>
</programlisting></para>
<para>The above code is equivalent to this: <programlisting><codeline><highlight class="normal">//<sp/>start<sp/>a<sp/>new<sp/>conversion<sp/>on<sp/>channel<sp/>3</highlight></codeline>
<codeline><highlight class="normal">Adc::setChannel(3);</highlight></codeline>
<codeline><highlight class="normal">Adc::startConversion();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while(!Adc::isConversionFinished())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>read<sp/>the<sp/>converted<sp/>value</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>value<sp/>=<sp/>Adc::getValue();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="classmodm_1_1_adc_interrupt" kindref="compound">AdcInterrupt</ref> for the asynchronous method.</para>
</simplesect>
<simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="0">
        <label>modm::Adc</label>
        <link refid="classmodm_1_1_adc"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>modm::AdcInterrupt</label>
        <link refid="classmodm_1_1_adc_interrupt"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
      <node id="3">
        <label>modm::platform::AdcInterrupt1</label>
        <link refid="classmodm_1_1platform_1_1_adc_interrupt1"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>modm::platform::AdcInterrupt2</label>
        <link refid="classmodm_1_1platform_1_1_adc_interrupt2"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>modm::platform::AdcInterrupt3</label>
        <link refid="classmodm_1_1platform_1_1_adc_interrupt3"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>modm::platform::Adc1</label>
        <link refid="classmodm_1_1platform_1_1_adc1"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>modm::platform::Adc2</label>
        <link refid="classmodm_1_1platform_1_1_adc2"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>modm::platform::Adc3</label>
        <link refid="classmodm_1_1platform_1_1_adc3"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>modm::Adc</label>
        <link refid="classmodm_1_1_adc"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" line="52" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/adc.hpp" bodystart="51" bodyend="158"/>
    <listofallmembers>
      <member refid="classmodm_1_1_peripheral_driver_1a5c336ff9889c347e7eadb810bf984ebd" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>assertBaudrateInTolerance</name></member>
      <member refid="classmodm_1_1_adc_1a80cfcf935b9394cac0c5fd0ddeffb06a" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>Channel</name></member>
      <member refid="classmodm_1_1_adc_1a61ce9408d2a7bfb4403c0cfba4b4a78f" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>connect</name></member>
      <member refid="classmodm_1_1_adc_1a6ba3015dc93d654adc29ae274c851fd2" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>disable</name></member>
      <member refid="classmodm_1_1_adc_1a90e4e9b0d02be1d9bdfb02ebe445a037" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>disableFreeRunningMode</name></member>
      <member refid="classmodm_1_1_adc_1a1656c2726ea0f707ddf6e6956859ecfa" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>enableFreeRunningMode</name></member>
      <member refid="classmodm_1_1_adc_1a4617f7d6e7b8885bf13ac8721cb2751f" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>getChannel</name></member>
      <member refid="classmodm_1_1_adc_1a5b3c7ad317985e35aa2b4b26a0083f43" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>getValue</name></member>
      <member refid="classmodm_1_1_adc_1a155f2716aee6988415cd32bcc2e2cb2e" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>initialize</name></member>
      <member refid="classmodm_1_1_adc_1aa8d528f16fdf07a7d730b8eb2fa757ce" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>isConversionFinished</name></member>
      <member refid="classmodm_1_1_adc_1a73bac09f02e8c10479f4d023c95f9570" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>readChannel</name></member>
      <member refid="classmodm_1_1_adc_1accb65726d97868bd953b204e6807a3f9" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>Resolution</name></member>
      <member refid="classmodm_1_1_adc_1a11367b26a7f631b73ef9fb3047b66240" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>setChannel</name></member>
      <member refid="classmodm_1_1_adc_1ae59dbc75533721dc1730cd4d9ba03aca" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>setLeftAdjustResult</name></member>
      <member refid="classmodm_1_1_adc_1aab08e943387f7b0d3583a950a1795a36" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>setRightAdjustResult</name></member>
      <member refid="classmodm_1_1_adc_1ad20105da541badf633266f3da4891024" prot="public" virt="non-virtual"><scope>modm::Adc</scope><name>startConversion</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
