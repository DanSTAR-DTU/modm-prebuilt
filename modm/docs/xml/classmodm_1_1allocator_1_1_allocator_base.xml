<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1allocator_1_1_allocator_base" kind="class" language="C++" prot="public">
    <compoundname>modm::allocator::AllocatorBase</compoundname>
    <derivedcompoundref refid="classmodm_1_1allocator_1_1_block" prot="public" virt="non-virtual">modm::allocator::Block&lt; T, BLOCKSIZE &gt;</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1allocator_1_1_dynamic" prot="public" virt="non-virtual">modm::allocator::Dynamic&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1allocator_1_1_static" prot="public" virt="non-virtual">modm::allocator::Static&lt; T, N &gt;</derivedcompoundref>
    <includes refid="allocator__base_8hpp" local="no">modm/utils/allocator/allocator_base.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1allocator_1_1_allocator_base_1aa00e230191734784a8e0576871016fac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::allocator::AllocatorBase&lt; T &gt;::construct</definition>
        <argsstring>(T *p, const T &amp;value)</argsstring>
        <name>construct</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Construct an object. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs an object of type T (the template parameter) on the location pointed by p using its copy constructor to initialize its value to <computeroutput>value</computeroutput>.</para><para>Notice that this does not allocate space for the element, it should already be available at p. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" line="47" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1allocator_1_1_allocator_base_1a3ac0e1c924c98d1ac554f27c218cd574" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::allocator::AllocatorBase&lt; T &gt;::destroy</definition>
        <argsstring>(T *p)</argsstring>
        <name>destroy</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Destroy an object. </para>        </briefdescription>
        <detaileddescription>
<para>Destroys the object of type T (the template parameter) pointed by p.</para><para>Notice that this does not deallocate space for the element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" line="62" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmodm_1_1allocator_1_1_allocator_base_1a609f717f38153960b28c8b7894c53761" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::allocator::AllocatorBase&lt; T &gt;::AllocatorBase</definition>
        <argsstring>()</argsstring>
        <name>AllocatorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" line="68" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all allocator types. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="80">
        <label>modm::allocator::Block&lt; T &gt;</label>
        <link refid="classmodm_1_1allocator_1_1_block"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>modm::allocator::Static&lt; T &gt;</label>
        <link refid="classmodm_1_1allocator_1_1_static"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>modm::allocator::AllocatorBase&lt; T &gt;</label>
        <link refid="classmodm_1_1allocator_1_1_allocator_base"/>
      </node>
      <node id="81">
        <label>modm::allocator::Dynamic&lt; T &gt;</label>
        <link refid="classmodm_1_1allocator_1_1_dynamic"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" line="34" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/utils/allocator/allocator_base.hpp" bodystart="33" bodyend="71"/>
    <listofallmembers>
      <member refid="classmodm_1_1allocator_1_1_allocator_base_1a609f717f38153960b28c8b7894c53761" prot="protected" virt="non-virtual"><scope>modm::allocator::AllocatorBase</scope><name>AllocatorBase</name></member>
      <member refid="classmodm_1_1allocator_1_1_allocator_base_1aa00e230191734784a8e0576871016fac" prot="public" virt="non-virtual"><scope>modm::allocator::AllocatorBase</scope><name>construct</name></member>
      <member refid="classmodm_1_1allocator_1_1_allocator_base_1a3ac0e1c924c98d1ac554f27c218cd574" prot="public" virt="non-virtual"><scope>modm::allocator::AllocatorBase</scope><name>destroy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
