<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1atomic_1_1_flag" kind="class" language="C++" prot="public">
    <compoundname>modm::atomic::Flag</compoundname>
    <includes refid="flag_8hpp" local="no">modm/architecture/driver/atomic/flag.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1atomic_1_1_flag_1a5ce70ffbe69ee70b3d62167103e91c2a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>volatile bool modm::atomic::Flag::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="99" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1atomic_1_1_flag_1a9bcfe8e82eed2cd923bdde89eadda16d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::atomic::Flag::Flag</definition>
        <argsstring>(bool state=false)</argsstring>
        <name>Flag</name>
        <param>
          <type>bool</type>
          <declname>state</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1atomic_1_1_flag_1a1ac5b8124b90941d96e8b8f6a81f9a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::atomic::Flag::Flag</definition>
        <argsstring>(const Flag &amp;other)</argsstring>
        <name>Flag</name>
        <param>
          <type>const <ref refid="classmodm_1_1atomic_1_1_flag" kindref="compound">Flag</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1atomic_1_1_flag_1a6e8605da1113daebdcb8bfe93758662a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1atomic_1_1_flag" kindref="compound">Flag</ref> &amp;</type>
        <definition>Flag&amp; modm::atomic::Flag::operator=</definition>
        <argsstring>(const Flag &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1atomic_1_1_flag" kindref="compound">Flag</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1atomic_1_1_flag_1a74bfecb5de7c0830e28ea62a94ccb56b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::atomic::Flag::test</definition>
        <argsstring>() const</argsstring>
        <name>test</name>
        <briefdescription>
<para>Check state of the flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="61" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1atomic_1_1_flag_1a3a36ffc59a7151834e4d17187b2901f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::atomic::Flag::set</definition>
        <argsstring>()</argsstring>
        <name>set</name>
        <briefdescription>
<para>Set flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="70" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1atomic_1_1_flag_1ae594f85072478ed3008822df378c068d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::atomic::Flag::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Clear flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="79" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1atomic_1_1_flag_1af79522890bc3810cbda44571770a58d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::atomic::Flag::testAndSet</definition>
        <argsstring>(bool value)</argsstring>
        <name>testAndSet</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the flag to a new value and returns the old one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="88" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" bodystart="88" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classmodm_1_1atomic_1_1_flag" kindref="compound">Flag</ref> to signal events between interrupts and the main-loop. </para>    </briefdescription>
    <detaileddescription>
<para>This class is quite handy when exchanging flags between a interrupt routine and the main-loop.</para><para><programlisting><codeline><highlight class="normal">modm::atomic::Flag<sp/>isrFlag;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ISR()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>isrFlag.set();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">function()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>flag<sp/>=<sp/>isrFlag.testAndSet(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="author"><para>Fabian Greif </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" line="48" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/atomic/flag.hpp" bodystart="47" bodyend="100"/>
    <listofallmembers>
      <member refid="classmodm_1_1atomic_1_1_flag_1a9bcfe8e82eed2cd923bdde89eadda16d" prot="public" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>Flag</name></member>
      <member refid="classmodm_1_1atomic_1_1_flag_1a1ac5b8124b90941d96e8b8f6a81f9a80" prot="public" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>Flag</name></member>
      <member refid="classmodm_1_1atomic_1_1_flag_1a6e8605da1113daebdcb8bfe93758662a" prot="public" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>operator=</name></member>
      <member refid="classmodm_1_1atomic_1_1_flag_1ae594f85072478ed3008822df378c068d" prot="public" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>reset</name></member>
      <member refid="classmodm_1_1atomic_1_1_flag_1a3a36ffc59a7151834e4d17187b2901f8" prot="public" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>set</name></member>
      <member refid="classmodm_1_1atomic_1_1_flag_1a5ce70ffbe69ee70b3d62167103e91c2a" prot="private" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>state</name></member>
      <member refid="classmodm_1_1atomic_1_1_flag_1a74bfecb5de7c0830e28ea62a94ccb56b" prot="public" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>test</name></member>
      <member refid="classmodm_1_1atomic_1_1_flag_1af79522890bc3810cbda44571770a58d7" prot="public" virt="non-virtual"><scope>modm::atomic::Flag</scope><name>testAndSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
