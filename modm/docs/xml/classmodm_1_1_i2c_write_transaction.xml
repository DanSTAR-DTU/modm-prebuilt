<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_i2c_write_transaction" kind="class" language="C++" prot="public">
    <compoundname>modm::I2cWriteTransaction</compoundname>
    <basecompoundref refid="classmodm_1_1_i2c_transaction" prot="public" virt="non-virtual">modm::I2cTransaction</basecompoundref>
    <includes refid="i2c__transaction_8hpp" local="no">modm/architecture/interface/i2c_transaction.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmodm_1_1_i2c_write_transaction_1a7281e5c764b59fb6adc8050c210d5be1" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t modm::I2cWriteTransaction::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="467" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_i2c_write_transaction_1a57c5c0ac3491d8ac335b6897c78ad248" prot="protected" static="no" mutable="no">
        <type>const uint8_t *</type>
        <definition>const uint8_t* modm::I2cWriteTransaction::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="468" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="468" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1a959f5142c4f2c445f3ecc6ac33e51e14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::I2cWriteTransaction::I2cWriteTransaction</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>I2cWriteTransaction</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="412" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1a544a78194ce45f67557e92747550e7db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteTransaction::configurePing</definition>
        <argsstring>()</argsstring>
        <name>configurePing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="418" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1a18587288743b9e144b5d468ca8a6bc31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteTransaction::configureWriteRead</definition>
        <argsstring>(const uint8_t *, std::size_t, uint8_t *, std::size_t)</argsstring>
        <name>configureWriteRead</name>
        <param>
          <type>const uint8_t *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>uint8_t *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="424" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1a4c3783861a3b1b6095fbac6f9c71cc5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteTransaction::configureWrite</definition>
        <argsstring>(const uint8_t *buffer, std::size_t size)</argsstring>
        <name>configureWrite</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="430" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="430" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1a0573bd6e17fa5ea0ad4f5ed45a9e6e02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteTransaction::configureRead</definition>
        <argsstring>(uint8_t *, std::size_t)</argsstring>
        <name>configureRead</name>
        <param>
          <type>uint8_t *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="442" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="442" bodyend="445"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1af55820fbc7fded2e40b19fffe41970fb" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_starting" kindref="compound">Starting</ref></type>
        <definition>Starting modm::I2cWriteTransaction::starting</definition>
        <argsstring>() override</argsstring>
        <name>starting</name>
        <reimplements refid="classmodm_1_1_i2c_transaction_1a974f8a0785065703157b9c93984ebd6a">starting</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called when the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> is ready to (re-)start an operation.</para>
<para><simplesect kind="return"><para>the <computeroutput>Starting</computeroutput> struct containing slave address and the next operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="449" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1a1f9662798c9325ab9609b61c38f02168" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_writing" kindref="compound">Writing</ref></type>
        <definition>Writing modm::I2cWriteTransaction::writing</definition>
        <argsstring>() override</argsstring>
        <name>writing</name>
        <reimplements refid="classmodm_1_1_i2c_transaction_1a228135661dcee84d62f22715122551cf">writing</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called before the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> begins a write operation.</para>
<para><simplesect kind="return"><para>the <computeroutput>Writing</computeroutput> struct containing the write buffer and size and next operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="455" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_transaction_1a71480d18c4ae2ea238d89113a5348a56" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_reading" kindref="compound">Reading</ref></type>
        <definition>Reading modm::I2cWriteTransaction::reading</definition>
        <argsstring>() override</argsstring>
        <name>reading</name>
        <reimplements refid="classmodm_1_1_i2c_transaction_1ac013d2f70ccc9fd8bbfdc87b842aabb0">reading</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called before the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> begins a read operation.</para>
<para><simplesect kind="return"><para>the <computeroutput>Reading</computeroutput> struct containing the read buffer and size and next operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="461" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="461" bodyend="464"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is an implementation of <ref refid="classmodm_1_1_i2c_transaction" kindref="compound">modm::I2cTransaction</ref> which, when passed to an i2c driver, performs the sequence: start - address - write - stop.</para>
<para>After initialization and performing operation this class remains holding references to passed buffers and may be reused again without reinitialization as long the passed buffers remain valid.</para>
<para><simplesect kind="author"><para>Georgi Grinshpun </para>
</simplesect>
<simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1325">
        <label>modm::I2c</label>
        <link refid="structmodm_1_1_i2c"/>
      </node>
      <node id="1324">
        <label>modm::I2cTransaction</label>
        <link refid="classmodm_1_1_i2c_transaction"/>
        <childnode refid="1325" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1323">
        <label>modm::I2cWriteTransaction</label>
        <link refid="classmodm_1_1_i2c_write_transaction"/>
        <childnode refid="1324" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1328">
        <label>modm::I2c</label>
        <link refid="structmodm_1_1_i2c"/>
      </node>
      <node id="1327">
        <label>modm::I2cTransaction</label>
        <link refid="classmodm_1_1_i2c_transaction"/>
        <childnode refid="1328" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1326">
        <label>modm::I2cWriteTransaction</label>
        <link refid="classmodm_1_1_i2c_write_transaction"/>
        <childnode refid="1327" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="410" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="409" bodyend="469"/>
    <listofallmembers>
      <member refid="classmodm_1_1_i2c_transaction_1aceabf617d6e44fde8d017def19546126" prot="protected" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>address</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a7fc4cc4f94f1c9f7093d1944815f6ed7" prot="public" virt="virtual"><scope>modm::I2cWriteTransaction</scope><name>attaching</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a57c5c0ac3491d8ac335b6897c78ad248" prot="protected" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>buffer</name></member>
      <member refid="structmodm_1_1_i2c_1acc3232e086891a4564399117a4e0e450" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>ConfigurationHandler</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a544a78194ce45f67557e92747550e7db" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>configurePing</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a0573bd6e17fa5ea0ad4f5ed45a9e6e02" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>configureRead</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a4c3783861a3b1b6095fbac6f9c71cc5d" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>configureWrite</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a2cfa7b1089b48079716d99c5d1ee328d" prot="public" virt="non-virtual" ambiguityscope="modm::I2cTransaction::"><scope>modm::I2cWriteTransaction</scope><name>configureWrite</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a18587288743b9e144b5d468ca8a6bc31" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>configureWriteRead</name></member>
      <member refid="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcd" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>DetachCause</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a2729b9db6395b87b2404084a5a929d39" prot="public" virt="virtual"><scope>modm::I2cWriteTransaction</scope><name>detaching</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a3d8a51e219912d01250e2bb732d4b227" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>getState</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a36767dc9db6bd682fd8348f402745263" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>I2cTransaction</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a959f5142c4f2c445f3ecc6ac33e51e14" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>I2cWriteTransaction</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a5ebc6259434dc6e279a633eff1020089" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>isBusy</name></member>
      <member refid="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ad" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>Operation</name></member>
      <member refid="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>OperationAfterRead</name></member>
      <member refid="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350d" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>OperationAfterStart</name></member>
      <member refid="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbb" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>OperationAfterWrite</name></member>
      <member refid="structmodm_1_1_i2c_1af314fb0ec2e32a25c17cf9f0a54447ee" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>Read</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a71480d18c4ae2ea238d89113a5348a56" prot="protected" virt="virtual"><scope>modm::I2cWriteTransaction</scope><name>reading</name></member>
      <member refid="structmodm_1_1_i2c_1a1855002ad6a0992e32db4f3ebf0432da" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>resetDevices</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a04c0fbb865231d5263f4499ff6a7daeb" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>setAddress</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a7281e5c764b59fb6adc8050c210d5be1" prot="protected" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>size</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1af55820fbc7fded2e40b19fffe41970fb" prot="protected" virt="virtual"><scope>modm::I2cWriteTransaction</scope><name>starting</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1ae0568bb0ae518843c5642da840867805" prot="protected" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>state</name></member>
      <member refid="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>TransactionState</name></member>
      <member refid="structmodm_1_1_i2c_1a1f77408aecf63279f7c085d8c3692681" prot="public" virt="non-virtual"><scope>modm::I2cWriteTransaction</scope><name>Write</name></member>
      <member refid="classmodm_1_1_i2c_write_transaction_1a1f9662798c9325ab9609b61c38f02168" prot="protected" virt="virtual"><scope>modm::I2cWriteTransaction</scope><name>writing</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
