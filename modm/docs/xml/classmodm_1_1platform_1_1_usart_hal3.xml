<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1platform_1_1_usart_hal3" kind="class" language="C++" prot="public">
    <compoundname>modm::platform::UsartHal3</compoundname>
    <basecompoundref refid="classmodm_1_1platform_1_1_uart_base" prot="public" virt="non-virtual">modm::platform::UartBase</basecompoundref>
    <includes refid="uart__hal__3_8hpp" local="no">modm/platform/uart/uart_hal_3.hpp</includes>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a9c67eca9018b8a9e310bec1e1764ebfa" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::setParity</definition>
        <argsstring>(const Parity parity)</argsstring>
        <name>setParity</name>
        <param>
          <type>const <ref refid="classmodm_1_1platform_1_1_uart_base_1a598033b30db9a90ea5c34a7b1cdc41e1" kindref="member">Parity</ref></type>
          <declname>parity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disable Parity or Enable Odd/Even Parity</para><para>This method assumes 8 databits + 1 parity bit Remember to enable the clock but not the UART peripheral before setting the party. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="50" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a1fa73cd72f7b0870f52996f12c16c9e5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::enable</definition>
        <argsstring>()</argsstring>
        <name>enable</name>
        <briefdescription>
<para>Enables the clock, resets the hardware and sets the UE bit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a6e43feb626c5575fea56836530e2f29f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::disable</definition>
        <argsstring>()</argsstring>
        <name>disable</name>
        <briefdescription>
<para>Disables the hw module (by disabling its clock line) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a4c48773329f98dac108cb9bdfb8e66dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SystemClock</type>
          </param>
          <param>
            <type><ref refid="group__modm__math__units_1ga30af1fac499efa181bc4708e24c577d1" kindref="member">baudrate_t</ref></type>
            <declname>baudrate</declname>
            <defname>baudrate</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::initialize</definition>
        <argsstring>(Parity parity=Parity::Disabled)</argsstring>
        <name>initialize</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a598033b30db9a90ea5c34a7b1cdc41e1" kindref="member">Parity</ref></type>
          <declname>parity</declname>
          <defval><ref refid="classmodm_1_1platform_1_1_uart_base_1a598033b30db9a90ea5c34a7b1cdc41e1ab9f5c797ebbf55adccdd8539a65a0241" kindref="member">Parity::Disabled</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize <ref refid="classmodm_1_1_uart" kindref="compound">Uart</ref> HAL Peripheral</para><para>Enables clocks, the UART peripheral (but neither TX nor RX) Sets baudrate and parity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a68302d034246742f190ddb9e23f0974b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SystemClock</type>
          </param>
          <param>
            <type><ref refid="group__modm__math__units_1ga30af1fac499efa181bc4708e24c577d1" kindref="member">baudrate_t</ref></type>
            <declname>baudrate</declname>
            <defname>baudrate</defname>
          </param>
          <param>
            <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a7dd12333d203f746bca00aedd0d23d05" kindref="member">OversamplingMode</ref></type>
            <declname>oversample</declname>
            <defname>oversample</defname>
            <defval><ref refid="classmodm_1_1platform_1_1_uart_base_1a7dd12333d203f746bca00aedd0d23d05a576ef423a885b172d29d9d7f112d0084" kindref="member">OversamplingMode::By16</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::initialize</definition>
        <argsstring>(Parity parity=Parity::Disabled)</argsstring>
        <name>initialize</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a598033b30db9a90ea5c34a7b1cdc41e1" kindref="member">Parity</ref></type>
          <declname>parity</declname>
          <defval><ref refid="classmodm_1_1platform_1_1_uart_base_1a598033b30db9a90ea5c34a7b1cdc41e1ab9f5c797ebbf55adccdd8539a65a0241" kindref="member">Parity::Disabled</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize <ref refid="classmodm_1_1_uart" kindref="compound">Uart</ref> HAL Peripheral</para><para>Enables clocks, the UART peripheral (but neither TX nor RX) Sets baudrate and parity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a27d241612d8c2bcb97fcdf96bbf050f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::initializeWithBrr</definition>
        <argsstring>(uint16_t brr, Parity parity, OversamplingMode oversample)</argsstring>
        <name>initializeWithBrr</name>
        <param>
          <type>uint16_t</type>
          <declname>brr</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a598033b30db9a90ea5c34a7b1cdc41e1" kindref="member">Parity</ref></type>
          <declname>parity</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a7dd12333d203f746bca00aedd0d23d05" kindref="member">OversamplingMode</ref></type>
          <declname>oversample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize <ref refid="classmodm_1_1_uart" kindref="compound">Uart</ref> HAL Peripheral</para><para>Enables clocks, the UART peripheral (but neither TX nor RX) Sets raw brr, parity and oversampling mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1af08376f304a94227ea51aabd7fbf9b1e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::setOversamplingMode</definition>
        <argsstring>(OversamplingMode mode)</argsstring>
        <name>setOversamplingMode</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a7dd12333d203f746bca00aedd0d23d05" kindref="member">OversamplingMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Choose if you want to oversample by 16 (<emphasis>default</emphasis>) or by 8. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a6fd70d5443500d2dd52f51df8e470338" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::setSpiClock</definition>
        <argsstring>(SpiClock clk)</argsstring>
        <name>setSpiClock</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1aa946086fdf30e477d0a317d657c4e44f" kindref="member">SpiClock</ref></type>
          <declname>clk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a137267ee0a16eea3087f03818026a4e5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::setSpiDataMode</definition>
        <argsstring>(SpiDataMode mode)</argsstring>
        <name>setSpiDataMode</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1abb9ae2af6239db1ae39f2a789989e03c" kindref="member">SpiDataMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a64d9de9a29345617abe421c935738c08" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::setLastBitClockPulse</definition>
        <argsstring>(LastBitClockPulse pulse)</argsstring>
        <name>setLastBitClockPulse</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1ace789bf4bb98f058efde7ab625f10e0a" kindref="member">LastBitClockPulse</ref></type>
          <declname>pulse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1ab44014b94de264ca939e3f6685119fe3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::write</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>write</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write a single byte to the transmit register. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method does NOT do any sanity checks!! It is your responsibility to check if the register is empty! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a3ad2f7b391cd0448121cd0f8b073bc53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::read</definition>
        <argsstring>(uint8_t &amp;data)</argsstring>
        <name>read</name>
        <param>
          <type>uint8_t &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves the value of the receive register to data</para><para><simplesect kind="warning"><para>This method does NOT do any sanity checks!! It is your responsibility to check if the register contains something useful! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a535227692d4a89cc446a3ae28e206282" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::setTransmitterEnable</definition>
        <argsstring>(const bool enable)</argsstring>
        <name>setTransmitterEnable</name>
        <param>
          <type>const bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/Disable Transmitter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1aedfdd9f0c6394dd394ee7ab938bb8207" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::setReceiverEnable</definition>
        <argsstring>(bool enable)</argsstring>
        <name>setReceiverEnable</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/Disable Receiver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a0efaedff64db9eaf1c115c51b92e0185" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::enableOperation</definition>
        <argsstring>()</argsstring>
        <name>enableOperation</name>
        <briefdescription>
<para>Set the UE (USART enable) bit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a7790b55d6b77c6eb34ea396cee82206e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::disableOperation</definition>
        <argsstring>()</argsstring>
        <name>disableOperation</name>
        <briefdescription>
<para>Clear the UE (USART enable) bit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a4c34cca477065e4a987ad8760545e2d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::platform::UsartHal3::isReceiveRegisterNotEmpty</definition>
        <argsstring>()</argsstring>
        <name>isReceiveRegisterNotEmpty</name>
        <briefdescription>
<para>Returns true if data has been received. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a18e3759f23b028ea85c11059aa8f5375" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::platform::UsartHal3::isTransmitRegisterEmpty</definition>
        <argsstring>()</argsstring>
        <name>isTransmitRegisterEmpty</name>
        <briefdescription>
<para>Returns true if data can be written. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a5bd1020881b99d0a0b672174642e3401" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::enableInterruptVector</definition>
        <argsstring>(bool enable, uint32_t priority)</argsstring>
        <name>enableInterruptVector</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1ab31a3712121bedb42f13e2fbd878ff4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::enableInterrupt</definition>
        <argsstring>(Interrupt_t interrupt)</argsstring>
        <name>enableInterrupt</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a6ebe84a6b410051751c29464340e395f" kindref="member">Interrupt_t</ref></type>
          <declname>interrupt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a007ea3881e314fd84315b29ce8294935" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::disableInterrupt</definition>
        <argsstring>(Interrupt_t interrupt)</argsstring>
        <name>disableInterrupt</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a6ebe84a6b410051751c29464340e395f" kindref="member">Interrupt_t</ref></type>
          <declname>interrupt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1ae38ed29d490e373e7f827d066cd00269" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a918f65a6ffc3f0f1a6c64b9088e4dc5b" kindref="member">InterruptFlag_t</ref></type>
        <definition>static InterruptFlag_t modm::platform::UsartHal3::getInterruptFlags</definition>
        <argsstring>()</argsstring>
        <name>getInterruptFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1platform_1_1_usart_hal3_1a9b0d935229321cc4f22e56ccc67d2fa9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::platform::UsartHal3::acknowledgeInterruptFlags</definition>
        <argsstring>(InterruptFlag_t flags)</argsstring>
        <name>acknowledgeInterruptFlags</name>
        <param>
          <type><ref refid="classmodm_1_1platform_1_1_uart_base_1a918f65a6ffc3f0f1a6c64b9088e4dc5b" kindref="member">InterruptFlag_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of the receive register</para><para><simplesect kind="warning"><para>Not all InterruptFlags can be cleared this way. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="166" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Universal asynchronous receiver transmitter (<ref refid="classmodm_1_1platform_1_1_usart_hal3" kindref="compound">UsartHal3</ref>)</para><para>Not available on the low- and medium density devices.</para><para>Very basic implementation that exposes more hardware features than the regular Usart classes.</para><para><simplesect kind="author"><para>Kevin Laeufer </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1799">
        <label>modm::platform::UartBase</label>
        <link refid="classmodm_1_1platform_1_1_uart_base"/>
      </node>
      <node id="1798">
        <label>modm::platform::UsartHal3</label>
        <link refid="classmodm_1_1platform_1_1_usart_hal3"/>
        <childnode refid="1799" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1801">
        <label>modm::platform::UartBase</label>
        <link refid="classmodm_1_1platform_1_1_uart_base"/>
      </node>
      <node id="1800">
        <label>modm::platform::UsartHal3</label>
        <link refid="classmodm_1_1platform_1_1_usart_hal3"/>
        <childnode refid="1801" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" line="40" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/platform/uart/uart_hal_3.hpp" bodystart="39" bodyend="167"/>
    <listofallmembers>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a9b0d935229321cc4f22e56ccc67d2fa9" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>acknowledgeInterruptFlags</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a6e43feb626c5575fea56836530e2f29f" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>disable</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a007ea3881e314fd84315b29ce8294935" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>disableInterrupt</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a7790b55d6b77c6eb34ea396cee82206e" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>disableOperation</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a1fa73cd72f7b0870f52996f12c16c9e5" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>enable</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1ab31a3712121bedb42f13e2fbd878ff4d" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>enableInterrupt</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a5bd1020881b99d0a0b672174642e3401" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>enableInterruptVector</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a0efaedff64db9eaf1c115c51b92e0185" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>enableOperation</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1ae38ed29d490e373e7f827d066cd00269" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>getInterruptFlags</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a4c48773329f98dac108cb9bdfb8e66dd" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>initialize</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a68302d034246742f190ddb9e23f0974b" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>initialize</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a27d241612d8c2bcb97fcdf96bbf050f5" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>initializeWithBrr</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1ac9c1bc3b77588a11d520416c22a25832" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>Interrupt</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1a6ebe84a6b410051751c29464340e395f" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>Interrupt_t</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1a231dd8ca89bde31fb9bec6a65c1dae8f" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>InterruptFlag</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1a918f65a6ffc3f0f1a6c64b9088e4dc5b" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>InterruptFlag_t</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a4c34cca477065e4a987ad8760545e2d2" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>isReceiveRegisterNotEmpty</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a18e3759f23b028ea85c11059aa8f5375" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>isTransmitRegisterEmpty</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1ace789bf4bb98f058efde7ab625f10e0a" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>LastBitClockPulse</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1a7dd12333d203f746bca00aedd0d23d05" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>OversamplingMode</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1a598033b30db9a90ea5c34a7b1cdc41e1" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>Parity</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a3ad2f7b391cd0448121cd0f8b073bc53" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>read</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a64d9de9a29345617abe421c935738c08" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>setLastBitClockPulse</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1af08376f304a94227ea51aabd7fbf9b1e" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>setOversamplingMode</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a9c67eca9018b8a9e310bec1e1764ebfa" prot="private" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>setParity</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1aedfdd9f0c6394dd394ee7ab938bb8207" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>setReceiverEnable</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a6fd70d5443500d2dd52f51df8e470338" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>setSpiClock</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a137267ee0a16eea3087f03818026a4e5" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>setSpiDataMode</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1a535227692d4a89cc446a3ae28e206282" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>setTransmitterEnable</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1aa946086fdf30e477d0a317d657c4e44f" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>SpiClock</name></member>
      <member refid="classmodm_1_1platform_1_1_uart_base_1abb9ae2af6239db1ae39f2a789989e03c" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>SpiDataMode</name></member>
      <member refid="classmodm_1_1platform_1_1_usart_hal3_1ab44014b94de264ca939e3f6685119fe3" prot="public" virt="non-virtual"><scope>modm::platform::UsartHal3</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
