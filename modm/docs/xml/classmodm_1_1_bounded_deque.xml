<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_bounded_deque" kind="class" language="C++" prot="public">
    <compoundname>modm::BoundedDeque</compoundname>
    <includes refid="deque_8hpp" local="no">modm/container/deque.hpp</includes>
    <innerclass refid="classmodm_1_1_bounded_deque_1_1const__iterator" prot="public">modm::BoundedDeque::const_iterator</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" prot="public" static="no">
        <type>std::conditional_t&lt;(N &gt;=255), uint_fast16_t, uint_fast8_t &gt;</type>
        <definition>using modm::BoundedDeque&lt; T, N &gt;::Index =  std::conditional_t&lt; (N &gt;= 255), uint_fast16_t, uint_fast8_t &gt;</definition>
        <argsstring></argsstring>
        <name>Index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="59" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmodm_1_1_bounded_deque_1aef6c75d57dfc1ac40f10fb6bb79d951b" prot="public" static="no">
        <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
        <definition>using modm::BoundedDeque&lt; T, N &gt;::Size =  Index</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="63" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmodm_1_1_bounded_deque_1ac220ce1c155db1ac44146c12d178056f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="224" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1_bounded_deque_1a2e72f46f3bebdf5c65f940b1978179b0" prot="private" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
        <definition>Index modm::BoundedDeque&lt; T, N &gt;::head</definition>
        <argsstring></argsstring>
        <name>head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="226" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_bounded_deque_1a7a24b4278a840e9bff5db0c21f988119" prot="private" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
        <definition>Index modm::BoundedDeque&lt; T, N &gt;::tail</definition>
        <argsstring></argsstring>
        <name>tail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="227" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_bounded_deque_1a0686dfc26b6cc3c02683217de5f96d02" prot="private" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_bounded_deque_1aef6c75d57dfc1ac40f10fb6bb79d951b" kindref="member">Size</ref></type>
        <definition>Size modm::BoundedDeque&lt; T, N &gt;::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="228" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_bounded_deque_1a6fef495e543a89c2c2eb9db7555c2274" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::BoundedDeque&lt; T, N &gt;::buffer[N]</definition>
        <argsstring>[N]</argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="230" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1ac3e12ae31276790c19d4568afabc79dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::BoundedDeque&lt; T, N &gt;::BoundedDeque</definition>
        <argsstring>()</argsstring>
        <name>BoundedDeque</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a2935e9f8aa608fdc5581589c302f45e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::BoundedDeque&lt; T, N &gt;::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1aabd325f252cfa71f81db19a28423a172" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::BoundedDeque&lt; T, N &gt;::isNotEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isNotEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="72" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1acf95372cd4d6808122ef7b5958dd406c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::BoundedDeque&lt; T, N &gt;::isFull</definition>
        <argsstring>() const</argsstring>
        <name>isFull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a16a0719915d1a084d3fdf1e4946ce93f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::BoundedDeque&lt; T, N &gt;::isNotFull</definition>
        <argsstring>() const</argsstring>
        <name>isNotFull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="78" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1adb2b7a4255e5ef6b30735b6eeddbd398" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_bounded_deque_1aef6c75d57dfc1ac40f10fb6bb79d951b" kindref="member">Size</ref></type>
        <definition>Size modm::BoundedDeque&lt; T, N &gt;::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a79880017b432aa7a6b63d1f723b678af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_bounded_deque_1aef6c75d57dfc1ac40f10fb6bb79d951b" kindref="member">Size</ref></type>
        <definition>Size modm::BoundedDeque&lt; T, N &gt;::getMaxSize</definition>
        <argsstring>() const</argsstring>
        <name>getMaxSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a645eb1989c7a847c6655f0a6c8df7832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::BoundedDeque&lt; T, N &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the container. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This will discard all the items in the container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a5da219911bf80d9e61d40252596d0e79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::BoundedDeque&lt; T, N &gt;::getFront</definition>
        <argsstring>()</argsstring>
        <name>getFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a1631cd7aa52c1de4bb5eb9c86acf82b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::BoundedDeque&lt; T, N &gt;::getFront</definition>
        <argsstring>() const</argsstring>
        <name>getFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a4c7ed6b10bff5024a0eb5d98e5673ca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::BoundedDeque&lt; T, N &gt;::get</definition>
        <argsstring>(Index n)</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get item at specified index. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the item at index <computeroutput>n</computeroutput>, counting 0-indexed from Front to Back, which is the same order in that the items were appended and the iterator addresses them.</para><para><simplesect kind="warning"><para>Please make sure <computeroutput>n</computeroutput> is a valid index: 0 &lt;= <emphasis>n</emphasis> &lt; <emphasis>size</emphasis>. Other indexes will cause undefined behaviour. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1ae45173c5f0fe2360286ed6b0008aa8eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::BoundedDeque&lt; T, N &gt;::get</definition>
        <argsstring>(Index n) const</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a49e416acbbc875a8ef94679caee19589" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::BoundedDeque&lt; T, N &gt;::operator[]</definition>
        <argsstring>(Index n)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get item at specified index. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the item at index <computeroutput>n</computeroutput>, counting 0-indexed from Front to Back.</para><para><simplesect kind="warning"><para>Please make sure <computeroutput>n</computeroutput> is a valid index: 0 &lt;= <emphasis>n</emphasis> &lt; <emphasis>size</emphasis>. Other indexes will cause undefined behaviour. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a9bf149080d7900386ed2bbac90f076b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::BoundedDeque&lt; T, N &gt;::operator[]</definition>
        <argsstring>(Index n) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a8d64f1ff0f2f7ba59ef16e5f7a2d8a63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::BoundedDeque&lt; T, N &gt;::rget</definition>
        <argsstring>(Index n)</argsstring>
        <name>rget</name>
        <param>
          <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get item at specified index. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the item at index <computeroutput>n</computeroutput>. The items are indexed in reverse (Back to Front), which is their order when they have been prepended.</para><para><simplesect kind="warning"><para>Please make sure <computeroutput>n</computeroutput> is a valid index: 0 &lt;= <emphasis>n</emphasis> &lt; <emphasis>size</emphasis>. Other indexes will cause undefined behaviour. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1aaffbae27159c87e077e245a72a6b3f08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::BoundedDeque&lt; T, N &gt;::rget</definition>
        <argsstring>(Index n) const</argsstring>
        <name>rget</name>
        <param>
          <type><ref refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" kindref="member">Index</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a0986d7ea4ff7c83f953f81399160573f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::BoundedDeque&lt; T, N &gt;::getBack</definition>
        <argsstring>()</argsstring>
        <name>getBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a9152c24d926d4745c45eec56f9e45945" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::BoundedDeque&lt; T, N &gt;::getBack</definition>
        <argsstring>() const</argsstring>
        <name>getBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a6546a780a369e92f5af4df88c80e093b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::BoundedDeque&lt; T, N &gt;::append</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1afbfe60e646a8e19663849496e68a801f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::BoundedDeque&lt; T, N &gt;::appendOverwrite</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>appendOverwrite</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Append an item to the back of the deque overwriting existing items. </para>        </briefdescription>
        <detaileddescription>
<para>This method, in contrast to <computeroutput><ref refid="classmodm_1_1_bounded_deque_1a6546a780a369e92f5af4df88c80e093b" kindref="member">append()</ref></computeroutput>, overwrites existing items in the deque if it is full. When an item is appended to the already full deque, the front item is removed to use its space for the new item, which is inserted after back. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a21ee74c264d6a90cb16f96e4b2fc2eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::BoundedDeque&lt; T, N &gt;::prepend</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>prepend</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1ad40d3af1ae7042315b936ecb9ab37188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::BoundedDeque&lt; T, N &gt;::prependOverwrite</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>prependOverwrite</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Prepend an item to the front of the deque overwriting existing items. </para>        </briefdescription>
        <detaileddescription>
<para>This method, in contrast to <computeroutput><ref refid="classmodm_1_1_bounded_deque_1a21ee74c264d6a90cb16f96e4b2fc2eea" kindref="member">prepend()</ref></computeroutput>, overwrites existing items in the deque if it is full. When an item is prepended to the already full deque, the back item is removed to use its space for the new item, which is inserted at front. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a591f9a8471088efebc851bbeb87f590a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::BoundedDeque&lt; T, N &gt;::removeBack</definition>
        <argsstring>()</argsstring>
        <name>removeBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a3c6bb9dcb60b2f591d6ed3bc9cfe99c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::BoundedDeque&lt; T, N &gt;::removeFront</definition>
        <argsstring>()</argsstring>
        <name>removeFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1a21520b5bd74788ddc0b139888d203224" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_bounded_deque_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::BoundedDeque&lt; T, N &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_bounded_deque_1afde1dae27e68305a00fdbdec74ae2c5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_bounded_deque_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::BoundedDeque&lt; T, N &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="221" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Double ended queue. </para>    </briefdescription>
    <detaileddescription>
<para>Internally organized as a ring buffer.</para><para><verbatim>*           tail --\                 /-- head
*                  |                 |
*        +------+------+---- ----+------+------+
*      0 |      | data |   ...   | data |      | N-1
*        +------+------+---- ----+------+------+
*           |      |                 |      |
* prepend --/      |                 |      \-- append
*                  |                 |
*       getFront --/                 \-- getBack
* </verbatim></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the queue</para></parameterdescription>
</parameteritem>
</parameterlist>
Up to a size of 254 small index variables with 8-bits are used, after this they are switched to 16-bit.</para><para><simplesect kind="warning"><para>This class don&apos;t check if the container is empty before a pop-operation. You have to do this by yourself!</para></simplesect>
<simplesect kind="author"><para>Fabian Greif </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" line="56" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/container/deque.hpp" bodystart="55" bodyend="231"/>
    <listofallmembers>
      <member refid="classmodm_1_1_bounded_deque_1a6546a780a369e92f5af4df88c80e093b" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>append</name></member>
      <member refid="classmodm_1_1_bounded_deque_1afbfe60e646a8e19663849496e68a801f" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>appendOverwrite</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a21520b5bd74788ddc0b139888d203224" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>begin</name></member>
      <member refid="classmodm_1_1_bounded_deque_1ac3e12ae31276790c19d4568afabc79dc" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>BoundedDeque</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a6fef495e543a89c2c2eb9db7555c2274" prot="private" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>buffer</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a645eb1989c7a847c6655f0a6c8df7832" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>clear</name></member>
      <member refid="classmodm_1_1_bounded_deque_1ac220ce1c155db1ac44146c12d178056f" prot="private" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_bounded_deque_1afde1dae27e68305a00fdbdec74ae2c5c" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>end</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a4c7ed6b10bff5024a0eb5d98e5673ca7" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>get</name></member>
      <member refid="classmodm_1_1_bounded_deque_1ae45173c5f0fe2360286ed6b0008aa8eb" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>get</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a0986d7ea4ff7c83f953f81399160573f" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>getBack</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a9152c24d926d4745c45eec56f9e45945" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>getBack</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a5da219911bf80d9e61d40252596d0e79" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>getFront</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a1631cd7aa52c1de4bb5eb9c86acf82b2" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>getFront</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a79880017b432aa7a6b63d1f723b678af" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>getMaxSize</name></member>
      <member refid="classmodm_1_1_bounded_deque_1adb2b7a4255e5ef6b30735b6eeddbd398" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>getSize</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a2e72f46f3bebdf5c65f940b1978179b0" prot="private" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>head</name></member>
      <member refid="classmodm_1_1_bounded_deque_1ab9c0649c8f547e1e364c99f09dddc77c" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>Index</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a2935e9f8aa608fdc5581589c302f45e3" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>isEmpty</name></member>
      <member refid="classmodm_1_1_bounded_deque_1acf95372cd4d6808122ef7b5958dd406c" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>isFull</name></member>
      <member refid="classmodm_1_1_bounded_deque_1aabd325f252cfa71f81db19a28423a172" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>isNotEmpty</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a16a0719915d1a084d3fdf1e4946ce93f" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>isNotFull</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a49e416acbbc875a8ef94679caee19589" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>operator[]</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a9bf149080d7900386ed2bbac90f076b2" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>operator[]</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a21ee74c264d6a90cb16f96e4b2fc2eea" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>prepend</name></member>
      <member refid="classmodm_1_1_bounded_deque_1ad40d3af1ae7042315b936ecb9ab37188" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>prependOverwrite</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a591f9a8471088efebc851bbeb87f590a" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>removeBack</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a3c6bb9dcb60b2f591d6ed3bc9cfe99c8" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>removeFront</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a8d64f1ff0f2f7ba59ef16e5f7a2d8a63" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>rget</name></member>
      <member refid="classmodm_1_1_bounded_deque_1aaffbae27159c87e077e245a72a6b3f08" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>rget</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a0686dfc26b6cc3c02683217de5f96d02" prot="private" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>size</name></member>
      <member refid="classmodm_1_1_bounded_deque_1aef6c75d57dfc1ac40f10fb6bb79d951b" prot="public" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>Size</name></member>
      <member refid="classmodm_1_1_bounded_deque_1a7a24b4278a840e9bff5db0c21f988119" prot="private" virt="non-virtual"><scope>modm::BoundedDeque</scope><name>tail</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
