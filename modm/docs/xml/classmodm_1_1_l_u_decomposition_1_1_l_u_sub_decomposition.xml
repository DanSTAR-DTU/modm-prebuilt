<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition" kind="class" language="C++" prot="private">
    <compoundname>modm::LUDecomposition::LUSubDecomposition</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>OFFSET</declname>
        <defname>OFFSET</defname>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>HEIGHT</declname>
        <defname>HEIGHT</defname>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>WIDTH</declname>
        <defname>WIDTH</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1a414380d945d2c7114d1da3477d74d869" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, HEIGHT, WIDTH &gt;::decomposeRecur</definition>
        <argsstring>(T *u, T *l)</argsstring>
        <name>decomposeRecur</name>
        <param>
          <type>T *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1ac621f2d380630b1292b26b23a1a75b29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, HEIGHT, WIDTH &gt;::decompose</definition>
        <argsstring>(T *u, T *l)</argsstring>
        <name>decompose</name>
        <param>
          <type>T *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1ad97bd04ff2f6e9495f351c5d644c42fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, HEIGHT, WIDTH &gt;::decomposeRecur</definition>
        <argsstring>(T *u, T *l, int8_t *p)</argsstring>
        <name>decomposeRecur</name>
        <param>
          <type>T *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int8_t *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1a7932308017cece09085793db18319001" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, HEIGHT, WIDTH &gt;::decompose</definition>
        <argsstring>(T *u, T *l, int8_t *p)</argsstring>
        <name>decompose</name>
        <param>
          <type>T *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int8_t *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1afdf87f5e8a89f0a4a7451850ac07fe7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>BXWIDTH</declname>
            <defname>BXWIDTH</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, HEIGHT, WIDTH &gt;::solveLyEqualsB</definition>
        <argsstring>(Matrix&lt; T, HEIGHT, WIDTH &gt; *l, Matrix&lt; T, HEIGHT, BXWIDTH &gt; *bx)</argsstring>
        <name>solveLyEqualsB</name>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, HEIGHT, WIDTH &gt; *</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, HEIGHT, BXWIDTH &gt; *</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1a7d3558f1962fd0b26bcbfbb50fc8bff3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>BXWIDTH</declname>
            <defname>BXWIDTH</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, HEIGHT, WIDTH &gt;::solveUxEqualsY</definition>
        <argsstring>(Matrix&lt; T, HEIGHT, WIDTH &gt; *u, Matrix&lt; T, HEIGHT, BXWIDTH &gt; *bx)</argsstring>
        <name>solveUxEqualsY</name>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, HEIGHT, WIDTH &gt; *</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, HEIGHT, BXWIDTH &gt; *</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1ad0a6c82244268fdf0ff3aa805fa1427f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>BXWIDTH</declname>
            <defname>BXWIDTH</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, HEIGHT, WIDTH &gt;::solve</definition>
        <argsstring>(const Matrix&lt; T, HEIGHT, WIDTH &gt; &amp;l, const Matrix&lt; T, HEIGHT, WIDTH &gt; &amp;u, Matrix&lt; T, HEIGHT, BXWIDTH &gt; *bx)</argsstring>
        <name>solve</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, HEIGHT, WIDTH &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, HEIGHT, WIDTH &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, HEIGHT, BXWIDTH &gt; *</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="106" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="78" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" bodystart="77" bodyend="110"/>
    <listofallmembers>
      <member refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1ac621f2d380630b1292b26b23a1a75b29" prot="public" virt="non-virtual"><scope>modm::LUDecomposition::LUSubDecomposition</scope><name>decompose</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1a7932308017cece09085793db18319001" prot="public" virt="non-virtual"><scope>modm::LUDecomposition::LUSubDecomposition</scope><name>decompose</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1a414380d945d2c7114d1da3477d74d869" prot="public" virt="non-virtual"><scope>modm::LUDecomposition::LUSubDecomposition</scope><name>decomposeRecur</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1ad97bd04ff2f6e9495f351c5d644c42fa" prot="public" virt="non-virtual"><scope>modm::LUDecomposition::LUSubDecomposition</scope><name>decomposeRecur</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1ad0a6c82244268fdf0ff3aa805fa1427f" prot="public" virt="non-virtual"><scope>modm::LUDecomposition::LUSubDecomposition</scope><name>solve</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1afdf87f5e8a89f0a4a7451850ac07fe7e" prot="public" virt="non-virtual"><scope>modm::LUDecomposition::LUSubDecomposition</scope><name>solveLyEqualsB</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_1a7d3558f1962fd0b26bcbfbb50fc8bff3" prot="public" virt="non-virtual"><scope>modm::LUDecomposition::LUSubDecomposition</scope><name>solveUxEqualsY</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
