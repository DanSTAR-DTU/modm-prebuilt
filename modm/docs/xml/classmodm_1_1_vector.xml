<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_vector" kind="class" language="C++" prot="public">
    <compoundname>modm::Vector</compoundname>
    <includes refid="quaternion_8hpp" local="no">modm/math/geometry/quaternion.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmodm_1_1_vector_1acf23210a664bb1cd30c031d3dae9afa5" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::Vector&lt; T, N &gt;::coords[N]</definition>
        <argsstring>[N]</argsstring>
        <name>coords</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="113" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_vector_1a387e5cee68a04162a1712c0bebf724b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a4f0eef4a5ec2adf3bdcdd0a1a89e241f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>(const T *ptData)</argsstring>
        <name>Vector</name>
        <param>
          <type>const T *</type>
          <declname>ptData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ac73f200c5c390ba8babdd60e55969126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>(const Matrix&lt; T, N, 1 &gt; &amp;rhs)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, 1 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a107b14bebd560472a1377c883870d16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1acaa2b333e39a593ed741de0ac6418c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, N &gt;::operator=</definition>
        <argsstring>(const Matrix&lt; T, N, 1 &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, 1 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ac7fe467936d517fa53aaad30b9cb4f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, N &gt;::operator=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a145fff956b4e8777aec6323d52815e2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, N &gt;::operator==</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a204850c0b0be753837ee8f97009014bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, N &gt;::operator!=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1aad2a3f84627cba1c2f94dd6cc43ab3f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, N &gt;::operator&lt;</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a258632f1dfc60b65bb75a5653f35411d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, N &gt;::operator&lt;=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ac0d17f0b9855c51c846d97e0a97f9cd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, N &gt;::operator&gt;</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a77f72470b449f0bc0968b286dfa116a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, N &gt;::operator&gt;=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1aa131aefcf5271c51a611ab85d67b385f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, N &gt;::operator[]</definition>
        <argsstring>(uint8_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a42e402dea218128fad5141904f796678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::Vector&lt; T, N &gt;::operator[]</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ac29c087bdd31549096c9814a0029e3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* modm::Vector&lt; T, N &gt;::ptr</definition>
        <argsstring>()</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ab0cdc75a8ab1438b74b0d6336fdfccda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* modm::Vector&lt; T, N &gt;::ptr</definition>
        <argsstring>() const</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a248dc0cacbfab93d61d792edeed283a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, N &gt;::operator+</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1afc52d40df1d01fbefccb02fbfcb29c1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, N &gt;::operator-</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1aa69cd2c744b508a4ee5d3880ce10b247" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Vector&lt; T, N &gt;::operator*</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1aa326ddbbecc72db8d2b02a69d24d3599" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, N &gt;::operator*</definition>
        <argsstring>(const T &amp;rhs) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1afcc49d63075966aeb04d37c30b0a3e94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, N &gt;::operator/</definition>
        <argsstring>(const T &amp;rhs) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1aec33d44e6a2fcf2d7f81c27bc60e3176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, N &gt;::operator+=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a792167590d1c1a7d5a13cbc8f09114a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, N &gt;::operator-=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ae80046f752493caad1f4ea0b326d30de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, N &gt;::operator*=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a7929e504615244441a5e2bf7b4f331f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, N &gt;::operator/=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a0eff5b7f3d5d46e44356da77729cb245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, N &gt;::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a56144bf1bd8bb791765b895df5d52da9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Vector&lt; T, N &gt;::getLength</definition>
        <argsstring>() const</argsstring>
        <name>getLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ac9838894a8857f0b002c71e0106bb18d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Vector&lt; T, N &gt;::getLengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>getLengthSquared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ae605fd311a7692f76773b78c9d15c585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, 1 &gt; &amp;</type>
        <definition>Matrix&lt;T, N, 1&gt;&amp; modm::Vector&lt; T, N &gt;::asMatrix</definition>
        <argsstring>()</argsstring>
        <name>asMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a2dfe63ef380e3cc3d6f622359cc32127" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, 1 &gt; &amp;</type>
        <definition>const Matrix&lt;T, N, 1&gt;&amp; modm::Vector&lt; T, N &gt;::asMatrix</definition>
        <argsstring>() const</argsstring>
        <name>asMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a69f476db046fb029cabab3b8a7219cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, N &gt; &amp;</type>
        <definition>Matrix&lt;T, 1, N&gt;&amp; modm::Vector&lt; T, N &gt;::asTransposedMatrix</definition>
        <argsstring>()</argsstring>
        <name>asTransposedMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a2e6aa64928f27ba0b0aa025d6981a17c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, N &gt; &amp;</type>
        <definition>const Matrix&lt;T, 1, N&gt;&amp; modm::Vector&lt; T, N &gt;::asTransposedMatrix</definition>
        <argsstring>() const</argsstring>
        <name>asTransposedMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a6e803435feec569ba293ea696fd933c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t modm::Vector&lt; int16_t, 2 &gt;::getLength</definition>
        <argsstring>() const</argsstring>
        <name>getLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1adddd61142086faf4e12cd097a64a7d84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t modm::Vector&lt; int16_t, 2 &gt;::getLengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>getLengthSquared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ada6814e81668432c57a4e1673ceac764" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t modm::Vector&lt; int16_t, 2 &gt;::dot</definition>
        <argsstring>(const modm::Vector&lt; int16_t, 2 &gt; &amp;other) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">modm::Vector</ref>&lt; int16_t, 2 &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1ac4cf6d86033424786ee750d0991f4811" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; double, 2 &gt;</type>
        <definition>Vector&lt; double, 2 &gt; modm::Vector&lt; float, 2 &gt;::convert</definition>
        <argsstring>() const</argsstring>
        <name>convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1af5f5bae012726dfe1c662325d061ae6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; float, 2 &gt;</type>
        <definition>Vector&lt; float, 2 &gt; modm::Vector&lt; double, 2 &gt;::convert</definition>
        <argsstring>() const</argsstring>
        <name>convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a229d8b8852ec826fe888b4f15a214da9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; U, 2 &gt;</type>
        <definition>Vector&lt; U, 2 &gt; modm::Vector&lt; float, 2 &gt;::convert</definition>
        <argsstring>() const</argsstring>
        <name>convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="371" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_1a339214a2cf4fccf9c61283f06987b369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; U, 2 &gt;</type>
        <definition>Vector&lt; U, 2 &gt; modm::Vector&lt; double, 2 &gt;::convert</definition>
        <argsstring>() const</argsstring>
        <name>convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="378" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="378" bodyend="381"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_vector_1a2a7692a7c1b847173f45f7bae842c3d6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t modm::Vector&lt; T, N &gt;::getSize</definition>
        <argsstring>()</argsstring>
        <name>getSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector.hpp" line="111" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for handling common point operations. </para>    </briefdescription>
    <detaileddescription>
<para>Basic data type of all geometric operations. Used to represent vectors as well as particular points in the coordinate system.</para><sect1 id="classmodm_1_1_vector_1point_vector">
<title>Point vs. vector</title>
<para>In geometry, it is often convenient to use vector arithmetic to represent points.</para><para>A vector, by its definition, has no fixed starting point, but if we imagine the starting point of a vector to be the origin, then the endpoint of the vector represents a particular point.</para><para>In this manner, every vector can be said to identify a unique point, which is the endpoint of the vector when its starting point is the origin.</para><para>Therefore there isn&apos;t a Point-class, but only a <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> class.</para><para>Adapted from the implementation of Gaspard Petit (<ulink url="mailto:gaspardpetit@gmail.com">gaspardpetit@gmail.com</ulink>).</para><para><simplesect kind="see"><para>&lt;a href&quot;http://www-etud.iro.umontreal.ca/~petitg/cpp/point.html&quot;&gt;Homepage</para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para></sect1>
    </detaileddescription>
    <collaborationgraph>
      <node id="1810">
        <label>T</label>
      </node>
      <node id="1809">
        <label>modm::Vector&lt; T, N &gt;</label>
        <link refid="classmodm_1_1_vector"/>
        <childnode refid="1810" relation="usage">
          <edgelabel>coords</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/quaternion.hpp" line="24" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/quaternion.hpp" bodystart="24" bodyend="-1"/>
    <listofallmembers>
      <member refid="classmodm_1_1_vector_1ae605fd311a7692f76773b78c9d15c585" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>asMatrix</name></member>
      <member refid="classmodm_1_1_vector_1a2dfe63ef380e3cc3d6f622359cc32127" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>asMatrix</name></member>
      <member refid="classmodm_1_1_vector_1a69f476db046fb029cabab3b8a7219cd7" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>asTransposedMatrix</name></member>
      <member refid="classmodm_1_1_vector_1a2e6aa64928f27ba0b0aa025d6981a17c" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>asTransposedMatrix</name></member>
      <member refid="classmodm_1_1_vector_1ac4cf6d86033424786ee750d0991f4811" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>convert</name></member>
      <member refid="classmodm_1_1_vector_1af5f5bae012726dfe1c662325d061ae6d" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>convert</name></member>
      <member refid="classmodm_1_1_vector_1a229d8b8852ec826fe888b4f15a214da9" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>convert</name></member>
      <member refid="classmodm_1_1_vector_1a339214a2cf4fccf9c61283f06987b369" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>convert</name></member>
      <member refid="classmodm_1_1_vector_1acf23210a664bb1cd30c031d3dae9afa5" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>coords</name></member>
      <member refid="classmodm_1_1_vector_1ada6814e81668432c57a4e1673ceac764" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>dot</name></member>
      <member refid="classmodm_1_1_vector_1a56144bf1bd8bb791765b895df5d52da9" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>getLength</name></member>
      <member refid="classmodm_1_1_vector_1a6e803435feec569ba293ea696fd933c2" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>getLength</name></member>
      <member refid="classmodm_1_1_vector_1ac9838894a8857f0b002c71e0106bb18d" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>getLengthSquared</name></member>
      <member refid="classmodm_1_1_vector_1adddd61142086faf4e12cd097a64a7d84" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>getLengthSquared</name></member>
      <member refid="classmodm_1_1_vector_1a2a7692a7c1b847173f45f7bae842c3d6" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>getSize</name></member>
      <member refid="classmodm_1_1_vector_1a204850c0b0be753837ee8f97009014bc" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator!=</name></member>
      <member refid="classmodm_1_1_vector_1aa69cd2c744b508a4ee5d3880ce10b247" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator*</name></member>
      <member refid="classmodm_1_1_vector_1aa326ddbbecc72db8d2b02a69d24d3599" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator*</name></member>
      <member refid="classmodm_1_1_vector_1ae80046f752493caad1f4ea0b326d30de" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator*=</name></member>
      <member refid="classmodm_1_1_vector_1a248dc0cacbfab93d61d792edeed283a2" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator+</name></member>
      <member refid="classmodm_1_1_vector_1aec33d44e6a2fcf2d7f81c27bc60e3176" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator+=</name></member>
      <member refid="classmodm_1_1_vector_1afc52d40df1d01fbefccb02fbfcb29c1f" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator-</name></member>
      <member refid="classmodm_1_1_vector_1a0eff5b7f3d5d46e44356da77729cb245" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator-</name></member>
      <member refid="classmodm_1_1_vector_1a792167590d1c1a7d5a13cbc8f09114a3" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator-=</name></member>
      <member refid="classmodm_1_1_vector_1afcc49d63075966aeb04d37c30b0a3e94" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator/</name></member>
      <member refid="classmodm_1_1_vector_1a7929e504615244441a5e2bf7b4f331f5" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator/=</name></member>
      <member refid="classmodm_1_1_vector_1aad2a3f84627cba1c2f94dd6cc43ab3f1" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator&lt;</name></member>
      <member refid="classmodm_1_1_vector_1a258632f1dfc60b65bb75a5653f35411d" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator&lt;=</name></member>
      <member refid="classmodm_1_1_vector_1acaa2b333e39a593ed741de0ac6418c68" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_vector_1ac7fe467936d517fa53aaad30b9cb4f69" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_vector_1a145fff956b4e8777aec6323d52815e2f" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator==</name></member>
      <member refid="classmodm_1_1_vector_1ac0d17f0b9855c51c846d97e0a97f9cd2" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator&gt;</name></member>
      <member refid="classmodm_1_1_vector_1a77f72470b449f0bc0968b286dfa116a3" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator&gt;=</name></member>
      <member refid="classmodm_1_1_vector_1aa131aefcf5271c51a611ab85d67b385f" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator[]</name></member>
      <member refid="classmodm_1_1_vector_1a42e402dea218128fad5141904f796678" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>operator[]</name></member>
      <member refid="classmodm_1_1_vector_1ac29c087bdd31549096c9814a0029e3b0" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_vector_1ab0cdc75a8ab1438b74b0d6336fdfccda" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_vector_1a387e5cee68a04162a1712c0bebf724b2" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_1a4f0eef4a5ec2adf3bdcdd0a1a89e241f" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_1ac73f200c5c390ba8babdd60e55969126" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_1a107b14bebd560472a1377c883870d16f" prot="public" virt="non-virtual"><scope>modm::Vector</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
