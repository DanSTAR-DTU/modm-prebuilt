<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>modm</title>
    <detaileddescription>
<para><heading level="1">modm: a barebone embedded library generator</heading>
</para><para><ulink url="http://modm.io"></ulink> </para><para>modm (pronounced like dial-up &quot;modem&quot;) is a toolbox for building custom C++17 libraries tailored to your embedded device. modm generates startup code, HALs and their implementations, communication protocols, drivers for external devices, BSPs, etc… in a modular, customizable process that you can fine-tune to your needs.</para><para><itemizedlist>
<listitem><para><ulink url="http://modm.io">This project has a homepage</ulink>.</para></listitem><listitem><para>Check out our <ulink url="http://modm.io/guide/installation">install instructions</ulink> and our <ulink url="http://modm.io/guide/getting-started">getting started guide</ulink>.</para></listitem><listitem><para>Feast your eyes on <ulink url="https://github.com/modm-io/modm/tree/develop/examples">lots of working examples</ulink>.</para></listitem><listitem><para>Our CI checks every contribution for regressions: <ulink url="https://circleci.com/gh/modm-io/workflows/modm/tree/develop"></ulink></para></listitem><listitem><para>We care <ulink url="http://modm.io/guide/testing">about testing modm</ulink>.</para></listitem></itemizedlist>
</para><para>This project also has a <ulink url="http://blog.salkinium.com">technical blog</ulink> to document larger design concepts.</para><para><itemizedlist>
<listitem><para>You found a bug? <ulink url="https://github.com/modm-io/modm/issues">Open up an issue, we don&apos;t bite</ulink>.</para></listitem><listitem><para>You want to contribute? https://github.com/modm-io/modm/tree/develop/CONTRIBUTING.md &quot;Read the contribution guidelines&quot; and <ulink url="https://github.com/modm-io/modm/pulls">open a pull request</ulink>.</para></listitem></itemizedlist>
</para><para>modm is optimized for the harsh requirements of the <ulink url="http://www.eurobot.org/">Eurobot competition</ulink>, where our robots need to run reliably and completely autonomously for the game&apos;s 100 second duration. Our robots contain a lot of different microcontrollers, some without a lot of resources, so modm needs to fulfill a diverse set of objectives, like small code size with small memory consumption, predictable program flow, extreme portability.</para><para>The source code is freely available under the MPLv2 license, so feel free to fork this project and adapt it to your needs. The only thing we ask of you is to contribute your changes back so everyone benefits.</para><para>Please clone modm recursively, you will need all the submodules.</para><para><programlisting><codeline><highlight class="normal">git<sp/>clone<sp/>--recurse-submodules<sp/>https://github.com/modm-io/modm.git</highlight></codeline>
</programlisting></para><para><heading level="2">Features</heading>
</para><para><itemizedlist>
<listitem><para>Efficient and fast object-oriented C++17 API.</para></listitem><listitem><para>Support for hundreds of AVR and ARM Cortex-M microcontrollers from Atmel and ST.</para></listitem><listitem><para>Build system agnostic: We use SCons by default, but you don&apos;t have to.</para></listitem><listitem><para>Data-driven HAL generation using the library-builder engine.</para></listitem><listitem><para>No memory allocations in HAL with very low overall RAM consumption.</para></listitem><listitem><para>Highly-configurable modules with sensible defaults and lots of documentation.</para></listitem><listitem><para>Cross platform peripheral interfaces incl. bit banging:<itemizedlist>
<listitem><para>GPIO and GPIO expanders.</para></listitem><listitem><para>ADC and Analog.</para></listitem><listitem><para>UART, I<superscript>2</superscript>C, SPI, CAN.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Interfaces and drivers for many external I<superscript>2</superscript>C and SPI sensors and devices.</para></listitem><listitem><para>Debug/logging system with IOStream interface.</para></listitem><listitem><para>Lightweight, stackless threads and resumable functions using cooperative multitasking.</para></listitem><listitem><para>Useful filter, interpolation and geometric algorithms.</para></listitem><listitem><para>Lightweight unit testing system (suitable for AVRs).</para></listitem><listitem><para>Graphical user interface for small binary and color displays.</para></listitem><listitem><para>Hundreds of tests to ensure correct functionality.</para></listitem></itemizedlist>
</para><para><heading level="2">Targets</heading>
</para><para>modm can generate code for 76AVR and 917 STM32 devices, however, there are different levels of support and testing.</para><para><center></center></para><para><center><table rows="4" cols="6"><row>
<entry thead="yes"><para>Device Family </para></entry><entry thead="yes"><para>Support </para></entry><entry thead="yes"><para>Device Family </para></entry><entry thead="yes"><para>Support </para></entry><entry thead="yes"><para>Device Family </para></entry><entry thead="yes"><para>Support  </para></entry></row>
<row>
<entry thead="no"><para>AVR </para></entry><entry thead="no"><para>★★★ </para></entry><entry thead="no"><para>STM32F2 </para></entry><entry thead="no"><para>★★★ </para></entry><entry thead="no"><para>STM32F7 </para></entry><entry thead="no"><para>★★★★ </para></entry></row>
<row>
<entry thead="no"><para>STM32F0 </para></entry><entry thead="no"><para>★★★★ </para></entry><entry thead="no"><para>STM32F3 </para></entry><entry thead="no"><para>★★★★★ </para></entry><entry thead="no"><para>STM32L4 </para></entry><entry thead="no"><para>★★★★ </para></entry></row>
<row>
<entry thead="no"><para>STM32F1 </para></entry><entry thead="no"><para>★★★★ </para></entry><entry thead="no"><para>STM32F4 </para></entry><entry thead="no"><para>★★★★★ </para></entry><entry thead="no"><para>STM32G0 </para></entry><entry thead="no"><para>★★★★ </para></entry></row>
</table>
</center></para><para>All of these targets are compiling and booting correctly (★) and have GPIO and UART working (★★). Most targets have support for basic peripherals, like I2C, SPI and ADC (★★★) as well as complicated peripherals, like Timers, CAN and external memory (★★★★). We also use a few targets in everyday development, which are very well tested (★★★★★).</para><para>We are only a small team of developers and are limited in the amount of targets we can support and test in hardware. We have prepared, but currently not finished support for STM32F2, STM32L0 and STM32L1. <ulink url="https://github.com/modm-io/modm/issues">Open an issue</ulink> to ask if your specific target is supported out-of-the-box and what you can do if it&apos;s not.</para><para><heading level="3">Boards</heading>
</para><para>We have out-of-box support for <ulink url="https://github.com/modm-io/modm/tree/develop/src/modm/board">several development boards</ulink> including documentation.</para><para><center></center></para><para><center><table rows="7" cols="4"><row>
<entry thead="no"><para>AL-AVREB-CAN </para></entry><entry thead="no"><para>Arduino NANO </para></entry><entry thead="no"><para>Arduino UNO </para></entry><entry thead="no"><para>Black Pill </para></entry></row>
<row>
<entry thead="no"><para>Blue Pill </para></entry><entry thead="no"><para>DISCO-F051R8 </para></entry><entry thead="no"><para>DISCO-F072RB </para></entry><entry thead="no"><para>DISCO-F100RB </para></entry></row>
<row>
<entry thead="no"><para>DISCO-F303VC </para></entry><entry thead="no"><para>DISCO-F407VG </para></entry><entry thead="no"><para>DISCO-F429ZI </para></entry><entry thead="no"><para>DISCO-F469NI </para></entry></row>
<row>
<entry thead="no"><para>DISCO-F746NG </para></entry><entry thead="no"><para>DISCO-F769NI </para></entry><entry thead="no"><para>DISCO-L476VG </para></entry><entry thead="no"><para>NUCLEO-F031K6 </para></entry></row>
<row>
<entry thead="no"><para>NUCLEO-F042K6 </para></entry><entry thead="no"><para>NUCLEO-F103RB </para></entry><entry thead="no"><para>NUCLEO-F303K8 </para></entry><entry thead="no"><para>NUCLEO-F401RE </para></entry></row>
<row>
<entry thead="no"><para>NUCLEO-F411RE </para></entry><entry thead="no"><para>NUCLEO-F429ZI </para></entry><entry thead="no"><para>NUCLEO-G071RB </para></entry><entry thead="no"><para>NUCLEO-L432KC </para></entry></row>
<row>
<entry thead="no"><para>NUCLEO-L476RG </para></entry><entry thead="no"><para>OLIMEXINO-STM32 </para></entry><entry thead="no"><para>STM32F030F4P6-DEMO  </para></entry></row>
</table>
</center></para><para><center></center></para><para><heading level="3">Drivers</heading>
</para><para>We also have a number of completely target-independent <ulink url="https://github.com/modm-io/modm/tree/develop/src/modm/driver">drivers for external devices</ulink> connected via I<superscript>2</superscript>C, SPI, UART, BitBang, etc. Most of these also give you access to the entire device so you can easily configure them for you specific needs.</para><para><center></center></para><para><center><table rows="9" cols="6"><row>
<entry thead="no"><para>AD7280A </para></entry><entry thead="no"><para>AD7928 </para></entry><entry thead="no"><para>ADNS9800 </para></entry><entry thead="no"><para>ADS7843 </para></entry><entry thead="no"><para>AMS5915 </para></entry><entry thead="no"><para>SPI-FLASH </para></entry></row>
<row>
<entry thead="no"><para>BME280 </para></entry><entry thead="no"><para>BMP085 </para></entry><entry thead="no"><para>DRV832X </para></entry><entry thead="no"><para>DS1302 </para></entry><entry thead="no"><para>DS1631 </para></entry><entry thead="no"><para>DS18B20 </para></entry></row>
<row>
<entry thead="no"><para>EA-DOG </para></entry><entry thead="no"><para>FT245 </para></entry><entry thead="no"><para>FT6X06 </para></entry><entry thead="no"><para>HCLAx </para></entry><entry thead="no"><para>HD44780 </para></entry><entry thead="no"><para>HMC58x </para></entry></row>
<row>
<entry thead="no"><para>HMC6343 </para></entry><entry thead="no"><para>I2C-EEPROM </para></entry><entry thead="no"><para>ITG3200 </para></entry><entry thead="no"><para>L3GD20 </para></entry><entry thead="no"><para>LAWICEL </para></entry><entry thead="no"><para>LIS302DL </para></entry></row>
<row>
<entry thead="no"><para>LIS3DSH </para></entry><entry thead="no"><para>LM75 </para></entry><entry thead="no"><para>LSM303A </para></entry><entry thead="no"><para>LTC2984 </para></entry><entry thead="no"><para>MAX6966 </para></entry><entry thead="no"><para>MAX7219 </para></entry></row>
<row>
<entry thead="no"><para>MCP23X17 </para></entry><entry thead="no"><para>MCP2515 </para></entry><entry thead="no"><para>NOKIA5110 </para></entry><entry thead="no"><para>NRF24 </para></entry><entry thead="no"><para>TFT-DISPLAY </para></entry><entry thead="no"><para>PAT9125EL </para></entry></row>
<row>
<entry thead="no"><para>PCA8574 </para></entry><entry thead="no"><para>PCA9535 </para></entry><entry thead="no"><para>PCA9548A </para></entry><entry thead="no"><para>PCA9685 </para></entry><entry thead="no"><para>SIEMENS-S65 </para></entry><entry thead="no"><para>SIEMENS-S75 </para></entry></row>
<row>
<entry thead="no"><para>SSD1306 </para></entry><entry thead="no"><para>TCS3414 </para></entry><entry thead="no"><para>TCS3472 </para></entry><entry thead="no"><para>TMP102 </para></entry><entry thead="no"><para>TMP175 </para></entry><entry thead="no"><para>VL53L0 </para></entry></row>
<row>
<entry thead="no"><para>VL6180 </para></entry><entry thead="no"><para>WS2812  </para></entry></row>
</table>
</center></para><para><center></center></para><para>Please see <ulink url="https://github.com/modm-io/modm/tree/develop/examples">our examples for a complete list</ulink> of tested targets and drivers.</para><para><heading level="2">How can I contribute?</heading>
</para><para>The easiest way for you and the best way for us to see if something is unclear or missing, is if you use the library and give us some feedback by <ulink url="https://github.com/modm-io/modm/issues">filing a bug report</ulink> or if you have a fix already, <ulink url="https://github.com/modm-io/modm/pulls">opening a pull request</ulink>.</para><para>See https://github.com/modm-io/modm/tree/develop/CONTRIBUTING.md &quot;CONTRIBUTING.md&quot; for our contribution guidelines.</para><para>The modm project is maintained by Niklas Hauser (<ulink url="https://github.com/salkinium">@salkinium</ulink>) with significant contributions from Sascha Schade (<ulink url="https://github.com/strongly-typed">@strongly-typed</ulink>), Fabian Greif (<ulink url="https://github.com/dergraaf">@dergraaf</ulink>), Kevin Läufer (<ulink url="https://github.com/ekiwi">@ekiwi</ulink>), Martin Rosekeit (<ulink url="https://github.com/thundernail">@thundernail</ulink>), Daniel Krebs (<ulink url="https://github.com/daniel-k">@daniel-k</ulink>), Georgi Grinshpun (<ulink url="https://github.com/georgi-g">@georgi-g</ulink>) and <ulink url="https://github.com/modm-io/modm/blob/develop/AUTHORS">20more contributors</ulink>.</para><para><heading level="2">Folder structure</heading>
</para><para><variablelist>
<varlistentry><term>examples </term></varlistentry>
<listitem><para>Example projects that show the usage of parts of the modm library. These projects are always up to date and are tested to compile by our CI. </para><para></para></listitem>
<varlistentry><term>src </term></varlistentry>
<listitem><para>This folder contains the actual source code of modm grouped into several modules. </para><para></para></listitem>
<varlistentry><term>test </term></varlistentry>
<listitem><para>Contains hundreds of tests for making sure modm works the way we expect it to. </para><para></para></listitem>
<varlistentry><term>docs </term></varlistentry>
<listitem><para>General documentation about this library and how to use it. </para><para></para></listitem>
<varlistentry><term>ext </term></varlistentry>
<listitem><para>Third-party code used in this library. </para><para></para></listitem>
<varlistentry><term>tools </term></varlistentry>
<listitem><para>Support tools, scripts and files. </para></listitem>
</variablelist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
