<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_gpio_expander_pin" kind="class" language="C++" prot="public">
    <compoundname>modm::GpioExpanderPin</compoundname>
    <basecompoundref refid="classmodm_1_1_gpio_i_o" prot="public" virt="non-virtual">modm::GpioIO</basecompoundref>
    <includes refid="gpio__expander_8hpp" local="no">modm/architecture/interface/gpio_expander.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename <ref refid="classmodm_1_1_gpio_expander" kindref="compound">GpioExpander</ref></type>
      </param>
      <param>
        <type><ref refid="classmodm_1_1_gpio_expander" kindref="compound">GpioExpander</ref> &amp;</type>
        <declname>expander</declname>
        <defname>expander</defname>
      </param>
      <param>
        <type>typename GpioExpander::Pin</type>
        <declname>pin</declname>
        <defname>pin</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmodm_1_1_gpio_expander_pin_1a16de7b4f290764d9535a6f52403b01de" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structmodm_1_1_gpio_1a5c167852e8d86eded53f554eabace79b" kindref="member">Direction</ref></type>
        <definition>constexpr Direction modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::direction</definition>
        <argsstring></argsstring>
        <name>direction</name>
        <initializer>= <ref refid="structmodm_1_1_gpio_1a5c167852e8d86eded53f554eabace79ba47a54d9da8952a3980d27488b00a21c1" kindref="member">Direction::InOut</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="204" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_gpio_expander_pin_1aefbd26dc5b191002feeb56ec013d5eb1" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="classmodm_1_1_gpio_expander" kindref="compound">GpioExpander</ref> &amp;</type>
        <definition>constexpr GpioExpander&amp; modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::ioExpander</definition>
        <argsstring></argsstring>
        <name>ioExpander</name>
        <initializer>= expander</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="205" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1ababb667796dfaf7cccda9fd64d098c52" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::setOutput</definition>
        <argsstring>()</argsstring>
        <name>setOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="209" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1acf4687b751d0eb98920a7cb4ecd267c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::setOutput</definition>
        <argsstring>(bool value)</argsstring>
        <name>setOutput</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="215" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1a3458333dbe36cb9ebdad9c18f569c5bf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::set</definition>
        <argsstring>()</argsstring>
        <name>set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="221" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1a0bfa8f30d989c93831a797cbeaf1961a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::set</definition>
        <argsstring>(bool value)</argsstring>
        <name>set</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="227" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1a129b48a57d95057feaebee3ebd60de8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="233" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1a24b8f82c8a8cbcf751d2af07c89a1ae1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::toggle</definition>
        <argsstring>()</argsstring>
        <name>toggle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="239" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1aafcdcbd6faa780cdeb1f814957a35c9c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::isSet</definition>
        <argsstring>()</argsstring>
        <name>isSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="245" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1afd1b78ba364813e02c4310a6fbed81d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::setInput</definition>
        <argsstring>()</argsstring>
        <name>setInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="251" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1a85f3284777d22fe8311de55cc13d030d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::read</definition>
        <argsstring>()</argsstring>
        <name>read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="257" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="257" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_expander_pin_1a29eab689a48180649306fc8682004342" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_gpio_1a5c167852e8d86eded53f554eabace79b" kindref="member">Direction</ref></type>
        <definition>static Direction modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;::getDirection</definition>
        <argsstring>()</argsstring>
        <name>getDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="265" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="265" bodyend="268"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Create an <computeroutput><ref refid="classmodm_1_1_gpio_i_o" kindref="compound">modm::GpioIO</ref></computeroutput> compatible interface from any IO-expander conforming to the <computeroutput><ref refid="classmodm_1_1_gpio_expander" kindref="compound">modm::GpioExpander</ref></computeroutput> interface.</para><para>This allows the transparent usage of IO Expander pins in classes that require Gpios as template arguments.</para><para><simplesect kind="note"><para>For every pin access a blocking bus transfer is performed, therefore do not expect these gpios to be fast!</para></simplesect>
Usage: <programlisting><codeline><highlight class="normal">typedef<sp/>modm::Pca8574&lt;MyI2cMaster&gt;<sp/>Expander;</highlight></codeline>
<codeline><highlight class="normal">Expander<sp/>expander;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">typedef<sp/>modm::GpioExpanderPin&lt;<sp/>Expander,<sp/>expander,<sp/>Expander::Pin::P0<sp/>&gt;<sp/>Rs;</highlight></codeline>
</programlisting></para><para>However, instead of using this class like that, prefer using the alias-template types provided by the IO-expander of your choice for better readability:</para><para><programlisting><codeline><highlight class="normal">typedef<sp/>modm::Pca8574&lt;MyI2cMaster&gt;<sp/>Expander;</highlight></codeline>
<codeline><highlight class="normal">Expander<sp/>expander;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>use<sp/>predefined<sp/>pin<sp/>types<sp/>of<sp/>the<sp/>local<sp/>IO-expander</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Expander::P0&lt;<sp/>expander<sp/>&gt;<sp/>Rs;</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Expander::P1&lt;<sp/>expander<sp/>&gt;<sp/>Rw;</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Expander::P2&lt;<sp/>expander<sp/>&gt;<sp/>E;</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>Expander::P3&lt;<sp/>expander<sp/>&gt;<sp/>Backlight;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Backlight::set();</highlight></codeline>
</programlisting></para><para><simplesect kind="warning"><para>Access to the IO-expander is <bold>blocking and can silently fail</bold>! If this is undesirable for you application, you need to write your own wrapper!</para></simplesect>
<simplesect kind="pre"><para>The IO-expander needs to be initialized externally, if required.</para></simplesect>
<simplesect kind="see"><para><ref refid="classmodm_1_1_gpio_expander" kindref="compound">modm::GpioExpander</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classmodm_1_1_gpio_i_o" kindref="compound">modm::GpioIO</ref></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmodm_1_1_gpio_expander" kindref="compound">GpioExpander</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Type of class conforming to the <computeroutput><ref refid="classmodm_1_1_gpio_expander" kindref="compound">modm::GpioExpander</ref></computeroutput> interface </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expander</parametername>
</parameternamelist>
<parameterdescription>
<para>instance of the expander </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>pin identifier of desired expander pin</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Sascha Schade </para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="994">
        <label>modm::GpioIO</label>
        <link refid="classmodm_1_1_gpio_i_o"/>
        <childnode refid="995" relation="public-inheritance">
        </childnode>
        <childnode refid="997" relation="public-inheritance">
        </childnode>
      </node>
      <node id="997">
        <label>modm::GpioInput</label>
        <link refid="classmodm_1_1_gpio_input"/>
        <childnode refid="996" relation="public-inheritance">
        </childnode>
      </node>
      <node id="995">
        <label>modm::GpioOutput</label>
        <link refid="classmodm_1_1_gpio_output"/>
        <childnode refid="996" relation="public-inheritance">
        </childnode>
      </node>
      <node id="993">
        <label>modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;</label>
        <link refid="classmodm_1_1_gpio_expander_pin"/>
        <childnode refid="994" relation="public-inheritance">
        </childnode>
      </node>
      <node id="996">
        <label>modm::Gpio</label>
        <link refid="structmodm_1_1_gpio"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="999">
        <label>modm::GpioIO</label>
        <link refid="classmodm_1_1_gpio_i_o"/>
        <childnode refid="1000" relation="public-inheritance">
        </childnode>
        <childnode refid="1002" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1003">
        <label>modm::GpioExpander</label>
        <link refid="classmodm_1_1_gpio_expander"/>
      </node>
      <node id="1002">
        <label>modm::GpioInput</label>
        <link refid="classmodm_1_1_gpio_input"/>
        <childnode refid="1001" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1000">
        <label>modm::GpioOutput</label>
        <link refid="classmodm_1_1_gpio_output"/>
        <childnode refid="1001" relation="public-inheritance">
        </childnode>
      </node>
      <node id="998">
        <label>modm::GpioExpanderPin&lt; GpioExpander, expander, pin &gt;</label>
        <link refid="classmodm_1_1_gpio_expander_pin"/>
        <childnode refid="999" relation="public-inheritance">
        </childnode>
        <childnode refid="1003" relation="usage">
          <edgelabel>ioExpander</edgelabel>
        </childnode>
      </node>
      <node id="1001">
        <label>modm::Gpio</label>
        <link refid="structmodm_1_1_gpio"/>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" line="202" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio_expander.hpp" bodystart="201" bodyend="269"/>
    <listofallmembers>
      <member refid="classmodm_1_1_gpio_expander_pin_1a16de7b4f290764d9535a6f52403b01de" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>direction</name></member>
      <member refid="structmodm_1_1_gpio_1a5c167852e8d86eded53f554eabace79b" prot="public" virt="non-virtual" ambiguityscope="modm::"><scope>modm::GpioExpanderPin</scope><name>Direction</name></member>
      <member refid="structmodm_1_1_gpio_1a5c167852e8d86eded53f554eabace79b" prot="public" virt="non-virtual" ambiguityscope="modm::GpioInput::"><scope>modm::GpioExpanderPin</scope><name>Direction</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1a29eab689a48180649306fc8682004342" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>getDirection</name></member>
      <member refid="structmodm_1_1_gpio_1a17454096f07c8ae16d603ff46ad53c6a" prot="public" virt="non-virtual" ambiguityscope="modm::"><scope>modm::GpioExpanderPin</scope><name>High</name></member>
      <member refid="structmodm_1_1_gpio_1a17454096f07c8ae16d603ff46ad53c6a" prot="public" virt="non-virtual" ambiguityscope="modm::GpioInput::"><scope>modm::GpioExpanderPin</scope><name>High</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1aefbd26dc5b191002feeb56ec013d5eb1" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>ioExpander</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1aafcdcbd6faa780cdeb1f814957a35c9c" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>isSet</name></member>
      <member refid="structmodm_1_1_gpio_1a85ddb071ba8af1c2b89b4e8c079ea58f" prot="public" virt="non-virtual" ambiguityscope="modm::"><scope>modm::GpioExpanderPin</scope><name>Low</name></member>
      <member refid="structmodm_1_1_gpio_1a85ddb071ba8af1c2b89b4e8c079ea58f" prot="public" virt="non-virtual" ambiguityscope="modm::GpioInput::"><scope>modm::GpioExpanderPin</scope><name>Low</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1a85f3284777d22fe8311de55cc13d030d" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>read</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1a129b48a57d95057feaebee3ebd60de8f" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>reset</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1a3458333dbe36cb9ebdad9c18f569c5bf" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>set</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1a0bfa8f30d989c93831a797cbeaf1961a" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>set</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1afd1b78ba364813e02c4310a6fbed81d3" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>setInput</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1ababb667796dfaf7cccda9fd64d098c52" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>setOutput</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1acf4687b751d0eb98920a7cb4ecd267c7" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>setOutput</name></member>
      <member refid="classmodm_1_1_gpio_expander_pin_1a24b8f82c8a8cbcf751d2af07c89a1ae1" prot="public" virt="non-virtual"><scope>modm::GpioExpanderPin</scope><name>toggle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
