<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structmodm_1_1_i2c" kind="struct" language="C++" prot="public">
    <compoundname>modm::I2c</compoundname>
    <derivedcompoundref refid="classmodm_1_1_i2c_master" prot="public" virt="non-virtual">modm::I2cMaster</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1_i2c_multiplexer" prot="public" virt="non-virtual">modm::I2cMultiplexer&lt; I2cMaster, I2cMultiplexerDevice &gt;</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1_i2c_transaction" prot="public" virt="non-virtual">modm::I2cTransaction</derivedcompoundref>
    <includes refid="i2c_8hpp" local="no">modm/architecture/interface/i2c.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="enum" id="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ad" prot="public" static="no">
        <name>Operation</name>
        <enumvalue id="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ada11a755d598c0c417f9a36758c3da7481" prot="public">
          <name>Stop</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Generate a Stop Condition. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ada51cfbcff36da74a9fc47f3a5140f99f2" prot="public">
          <name>Restart</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Generate a Restart. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ada1129c0e4d43f2d121652a7302712cff6" prot="public">
          <name>Write</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Write data to the slave. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ada7a1a5f3e79fdc91edf2f5ead9d66abb4" prot="public">
          <name>Read</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Read data from the slave. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>All possible I2C Operations. </para>        </briefdescription>
        <detaileddescription>
<para>I2C Operations that the <computeroutput><ref refid="classmodm_1_1_i2c_transaction" kindref="compound">I2cTransaction</ref></computeroutput> can give the master on callback <simplesect kind="see"><para><ref refid="classmodm_1_1_i2c_transaction" kindref="compound">I2cTransaction</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="51" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="49" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350d" prot="public" static="no">
        <name>OperationAfterStart</name>
        <enumvalue id="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350da11a755d598c0c417f9a36758c3da7481" prot="public">
          <name>Stop</name>
          <initializer>= uint8_t(Operation::Stop)</initializer>
          <briefdescription>
<para>Generate a Stop Condition. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350da1129c0e4d43f2d121652a7302712cff6" prot="public">
          <name>Write</name>
          <initializer>= uint8_t(Operation::Write)</initializer>
          <briefdescription>
<para>Write data to the slave. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350da7a1a5f3e79fdc91edf2f5ead9d66abb4" prot="public">
          <name>Read</name>
          <initializer>= uint8_t(Operation::Read)</initializer>
          <briefdescription>
<para>Read data from the slave. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Further operations after start operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="61" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbb" prot="public" static="no">
        <name>OperationAfterWrite</name>
        <enumvalue id="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbba11a755d598c0c417f9a36758c3da7481" prot="public">
          <name>Stop</name>
          <initializer>= uint8_t(Operation::Stop)</initializer>
          <briefdescription>
<para>Generate a Stop Condition. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbba51cfbcff36da74a9fc47f3a5140f99f2" prot="public">
          <name>Restart</name>
          <initializer>= uint8_t(Operation::Restart)</initializer>
          <briefdescription>
<para>Generate a Restart. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbba1129c0e4d43f2d121652a7302712cff6" prot="public">
          <name>Write</name>
          <initializer>= uint8_t(Operation::Write)</initializer>
          <briefdescription>
<para>Write data to the slave. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Further operations after write operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="70" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="enum" id="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31" prot="public" static="no">
        <name>OperationAfterRead</name>
        <enumvalue id="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31a11a755d598c0c417f9a36758c3da7481" prot="public">
          <name>Stop</name>
          <initializer>= uint8_t(Operation::Stop)</initializer>
          <briefdescription>
<para>Generate a Stop Condition. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31a51cfbcff36da74a9fc47f3a5140f99f2" prot="public">
          <name>Restart</name>
          <initializer>= uint8_t(Operation::Restart)</initializer>
          <briefdescription>
<para>Generate a Restart. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Further operations after read operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="79" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="77" bodyend="82"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcd" prot="public" static="no">
        <name>DetachCause</name>
        <enumvalue id="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcda391c51df2024fa2c540672812faaf879" prot="public">
          <name>NormalStop</name>
          <briefdescription>
<para>All operations finished normally. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcda170dca6f1128c602c1ad7423e4e0f672" prot="public">
          <name>ErrorCondition</name>
          <briefdescription>
<para>A bus error occurred and the bus was reset. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcda57871f61ec9b5f775a524aada612d196" prot="public">
          <name>FailedToAttach</name>
          <briefdescription>
<para>The <ref refid="classmodm_1_1_i2c_transaction" kindref="compound">I2cTransaction</ref> failed to attach to the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This tells the <computeroutput><ref refid="classmodm_1_1_i2c_transaction" kindref="compound">I2cTransaction</ref></computeroutput> why it was detached <simplesect kind="see"><para><ref refid="classmodm_1_1_i2c_transaction" kindref="compound">I2cTransaction</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="38" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713" prot="public" static="no">
        <name>TransactionState</name>
        <enumvalue id="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713ae599161956d626eda4cb0a5ffb85271c" prot="public">
          <name>Idle</name>
          <briefdescription>
<para>No error occurred, detached normally. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713ad8a942ef2b04672adfafef0ad817a407" prot="public">
          <name>Busy</name>
          <briefdescription>
<para>The transaction object is busy with data transfer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713a902b0d55fddef6f8d651fe1035b7d4bd" prot="public">
          <name>Error</name>
          <briefdescription>
<para>An error occurred, check the masters <computeroutput>getErrorCode()</computeroutput> </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>State of a <ref refid="structmodm_1_1_i2c" kindref="compound">I2c</ref> Transaction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="88" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="typedef" id="structmodm_1_1_i2c_1acc3232e086891a4564399117a4e0e450" prot="public" static="no">
        <type>void(*)()</type>
        <definition>using modm::I2c::ConfigurationHandler =  void(*)()</definition>
        <argsstring></argsstring>
        <name>ConfigurationHandler</name>
        <briefdescription>
<para>The signature of the configuration function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="32" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structmodm_1_1_i2c_1a1f77408aecf63279f7c085d8c3692681" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::I2c::Write</definition>
        <argsstring></argsstring>
        <name>Write</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>Add the Write bit to the slave address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="28" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmodm_1_1_i2c_1af314fb0ec2e32a25c17cf9f0a54447ee" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::I2c::Read</definition>
        <argsstring></argsstring>
        <name>Read</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
<para>Add the Read bit to the slave address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="29" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structmodm_1_1_i2c_1a1855002ad6a0992e32db4f3ebf0432da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Scl</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>baudrate</declname>
            <defname>baudrate</defname>
            <defval>100000</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::I2c::resetDevices</definition>
        <argsstring>()</argsstring>
        <name>resetDevices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset all slave devices connected to an I2C bus.</para><para>During normal operation, I2C slave device may pull the SDA line low. However, if the master is reset during a transaction, the I2C clock may stop while the slave is outputting a low data bit and the slave will continue to hold this bit (forever, and ever and ever). The I2C master is then unable to generate a I2C start condition, since SDA is still held low by the slave device, resulting in a deadlock.</para><para>"You can always get it back to standby mode by allowing the SDA line to float high and give it 9 clocks. This assures that the device will not receive the acknowledge bit at the end the current byte and will abort the command and go to standby."</para><para><simplesect kind="see"><para>Application Note AN572 by Microchip</para></simplesect>
<simplesect kind="warning"><para>Must be called <bold>before</bold> connecting SDA and SCL to I2cMaster!</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Scl</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock pin of the bus to be reset. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="117" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="117" bodyend="128"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1245">
        <label>modm::I2cWriteReadTransaction</label>
        <link refid="classmodm_1_1_i2c_write_read_transaction"/>
        <childnode refid="1243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1244">
        <label>modm::I2cReadTransaction</label>
        <link refid="classmodm_1_1_i2c_read_transaction"/>
        <childnode refid="1243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1239">
        <label>modm::platform::I2cMaster1</label>
        <link refid="classmodm_1_1platform_1_1_i2c_master1"/>
        <childnode refid="1237" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1240">
        <label>modm::platform::I2cMaster2</label>
        <link refid="classmodm_1_1platform_1_1_i2c_master2"/>
        <childnode refid="1237" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1241">
        <label>modm::platform::I2cMaster3</label>
        <link refid="classmodm_1_1platform_1_1_i2c_master3"/>
        <childnode refid="1237" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1236">
        <label>modm::I2c</label>
        <link refid="structmodm_1_1_i2c"/>
      </node>
      <node id="1243">
        <label>modm::I2cTransaction</label>
        <link refid="classmodm_1_1_i2c_transaction"/>
        <childnode refid="1236" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1242">
        <label>modm::I2cMultiplexer&lt; I2cMaster, I2cMultiplexerDevice &gt;</label>
        <link refid="classmodm_1_1_i2c_multiplexer"/>
        <childnode refid="1236" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1237">
        <label>modm::I2cMaster</label>
        <link refid="classmodm_1_1_i2c_master"/>
        <childnode refid="1236" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1246">
        <label>modm::I2cWriteTransaction</label>
        <link refid="classmodm_1_1_i2c_write_transaction"/>
        <childnode refid="1243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1238">
        <label>modm::I2cMultiplexerChannel&lt; multiplexer, channel &gt;</label>
        <link refid="classmodm_1_1_i2c_multiplexer_channel"/>
        <childnode refid="1237" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" line="27" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c.hpp" bodystart="26" bodyend="130"/>
    <listofallmembers>
      <member refid="structmodm_1_1_i2c_1acc3232e086891a4564399117a4e0e450" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>ConfigurationHandler</name></member>
      <member refid="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcd" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>DetachCause</name></member>
      <member refid="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ad" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>Operation</name></member>
      <member refid="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>OperationAfterRead</name></member>
      <member refid="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350d" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>OperationAfterStart</name></member>
      <member refid="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbb" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>OperationAfterWrite</name></member>
      <member refid="structmodm_1_1_i2c_1af314fb0ec2e32a25c17cf9f0a54447ee" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>Read</name></member>
      <member refid="structmodm_1_1_i2c_1a1855002ad6a0992e32db4f3ebf0432da" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>resetDevices</name></member>
      <member refid="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>TransactionState</name></member>
      <member refid="structmodm_1_1_i2c_1a1f77408aecf63279f7c085d8c3692681" prot="public" virt="non-virtual"><scope>modm::I2c</scope><name>Write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
