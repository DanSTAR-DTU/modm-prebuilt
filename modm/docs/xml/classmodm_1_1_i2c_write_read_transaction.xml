<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_i2c_write_read_transaction" kind="class" language="C++" prot="public">
    <compoundname>modm::I2cWriteReadTransaction</compoundname>
    <basecompoundref refid="classmodm_1_1_i2c_transaction" prot="public" virt="non-virtual">modm::I2cTransaction</basecompoundref>
    <includes refid="i2c__transaction_8hpp" local="no">modm/architecture/interface/i2c_transaction.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmodm_1_1_i2c_write_read_transaction_1ae1feec08dbb7ec9a1efa9a435717f86a" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t modm::I2cWriteReadTransaction::readSize</definition>
        <argsstring></argsstring>
        <name>readSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="389" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_i2c_write_read_transaction_1a8d9ba261ef718d44ded469205986a538" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t modm::I2cWriteReadTransaction::writeSize</definition>
        <argsstring></argsstring>
        <name>writeSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="390" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_i2c_write_read_transaction_1aa5e946666c671e606532efb546021bf9" prot="protected" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* modm::I2cWriteReadTransaction::readBuffer</definition>
        <argsstring></argsstring>
        <name>readBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="391" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_i2c_write_read_transaction_1a029a5075698d9bf62fe790f1f08d10d0" prot="protected" static="no" mutable="no">
        <type>const uint8_t *</type>
        <definition>const uint8_t* modm::I2cWriteReadTransaction::writeBuffer</definition>
        <argsstring></argsstring>
        <name>writeBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="392" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_i2c_write_read_transaction_1a0c6e23901bf9ccdb904af5509da7ce6d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool modm::I2cWriteReadTransaction::isReading</definition>
        <argsstring></argsstring>
        <name>isReading</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="393" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="393" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1a565546a9dba7a9e401813a5b58223d1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::I2cWriteReadTransaction::I2cWriteReadTransaction</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>I2cWriteReadTransaction</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="244" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1a86449f7a8ea9fc2e50f0d2a2bec3583a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteReadTransaction::configurePing</definition>
        <argsstring>()</argsstring>
        <name>configurePing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="251" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1a89f6028c2697e890e910bc51b63ccb2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteReadTransaction::configureWriteRead</definition>
        <argsstring>(const uint8_t *writeBuffer, std::size_t writeSize, uint8_t *readBuffer, std::size_t readSize)</argsstring>
        <name>configureWriteRead</name>
        <param>
          <type>const uint8_t *</type>
          <declname>writeBuffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>writeSize</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>readBuffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>readSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="257" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="257" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1aefb3ab8edf17202f3a146ef6ee29eb00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteReadTransaction::configureWrite</definition>
        <argsstring>(const uint8_t *buffer, std::size_t size)</argsstring>
        <name>configureWrite</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the adapter with the required information for a write operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be written to the slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be written, set to <computeroutput>0</computeroutput> to write nothing</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if adapter was not in use, <computeroutput>false</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="308" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1ac539614a3d64edf17c1a6161cf1bfe83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cWriteReadTransaction::configureRead</definition>
        <argsstring>(uint8_t *buffer, std::size_t size)</argsstring>
        <name>configureRead</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the adapter with the required information for a read operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be read from the slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be read, set to <computeroutput>0</computeroutput> to read nothing</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if adapter was not in use, <computeroutput>false</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="323" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="323" bodyend="326"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1ac5b7104a58ff1dcf9a720fdbf6ee5c82" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_starting" kindref="compound">Starting</ref></type>
        <definition>Starting modm::I2cWriteReadTransaction::starting</definition>
        <argsstring>() override</argsstring>
        <name>starting</name>
        <reimplements refid="classmodm_1_1_i2c_transaction_1a974f8a0785065703157b9c93984ebd6a">starting</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called when the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> is ready to (re-)start an operation.</para><para><simplesect kind="return"><para>the <computeroutput>Starting</computeroutput> struct containing slave address and the next operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="330" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="330" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1acd1b406ce20380757291928e53fd6940" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_writing" kindref="compound">Writing</ref></type>
        <definition>Writing modm::I2cWriteReadTransaction::writing</definition>
        <argsstring>() override</argsstring>
        <name>writing</name>
        <reimplements refid="classmodm_1_1_i2c_transaction_1a228135661dcee84d62f22715122551cf">writing</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called before the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> begins a write operation.</para><para><simplesect kind="return"><para>the <computeroutput>Writing</computeroutput> struct containing the write buffer and size and next operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="347" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="347" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_write_read_transaction_1ae5f5f13fd97cfca95217789bcf2ab6a6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_reading" kindref="compound">Reading</ref></type>
        <definition>Reading modm::I2cWriteReadTransaction::reading</definition>
        <argsstring>() override</argsstring>
        <name>reading</name>
        <reimplements refid="classmodm_1_1_i2c_transaction_1ac013d2f70ccc9fd8bbfdc87b842aabb0">reading</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called before the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> begins a read operation.</para><para><simplesect kind="return"><para>the <computeroutput>Reading</computeroutput> struct containing the read buffer and size and next operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="383" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="383" bodyend="386"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is an implementation of <ref refid="classmodm_1_1_i2c_transaction" kindref="compound">modm::I2cTransaction</ref> which, when passed to an i2c driver, performs the sequence: start - address - write - restart - address - read - stop.</para><para>After initialization and performing operation this class keeps the references to passed buffers and may be reused again without reinitialization as long the passed buffers remain valid.</para><para><simplesect kind="author"><para>Georgi Grinshpun </para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1321">
        <label>modm::I2cWriteReadTransaction</label>
        <link refid="classmodm_1_1_i2c_write_read_transaction"/>
        <childnode refid="1322" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1323">
        <label>modm::I2c</label>
        <link refid="structmodm_1_1_i2c"/>
      </node>
      <node id="1322">
        <label>modm::I2cTransaction</label>
        <link refid="classmodm_1_1_i2c_transaction"/>
        <childnode refid="1323" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1324">
        <label>modm::I2cWriteReadTransaction</label>
        <link refid="classmodm_1_1_i2c_write_read_transaction"/>
        <childnode refid="1325" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1326">
        <label>modm::I2c</label>
        <link refid="structmodm_1_1_i2c"/>
      </node>
      <node id="1325">
        <label>modm::I2cTransaction</label>
        <link refid="classmodm_1_1_i2c_transaction"/>
        <childnode refid="1326" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="242" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="241" bodyend="394"/>
    <listofallmembers>
      <member refid="classmodm_1_1_i2c_transaction_1aceabf617d6e44fde8d017def19546126" prot="protected" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>address</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a7fc4cc4f94f1c9f7093d1944815f6ed7" prot="public" virt="virtual"><scope>modm::I2cWriteReadTransaction</scope><name>attaching</name></member>
      <member refid="structmodm_1_1_i2c_1acc3232e086891a4564399117a4e0e450" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>ConfigurationHandler</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1a86449f7a8ea9fc2e50f0d2a2bec3583a" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>configurePing</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1ac539614a3d64edf17c1a6161cf1bfe83" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>configureRead</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1aefb3ab8edf17202f3a146ef6ee29eb00" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>configureWrite</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a2cfa7b1089b48079716d99c5d1ee328d" prot="public" virt="non-virtual" ambiguityscope="modm::I2cTransaction::"><scope>modm::I2cWriteReadTransaction</scope><name>configureWrite</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1a89f6028c2697e890e910bc51b63ccb2c" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>configureWriteRead</name></member>
      <member refid="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcd" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>DetachCause</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a2729b9db6395b87b2404084a5a929d39" prot="public" virt="virtual"><scope>modm::I2cWriteReadTransaction</scope><name>detaching</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a3d8a51e219912d01250e2bb732d4b227" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>getState</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a36767dc9db6bd682fd8348f402745263" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>I2cTransaction</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1a565546a9dba7a9e401813a5b58223d1b" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>I2cWriteReadTransaction</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a5ebc6259434dc6e279a633eff1020089" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>isBusy</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1a0c6e23901bf9ccdb904af5509da7ce6d" prot="protected" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>isReading</name></member>
      <member refid="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ad" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>Operation</name></member>
      <member refid="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>OperationAfterRead</name></member>
      <member refid="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350d" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>OperationAfterStart</name></member>
      <member refid="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbb" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>OperationAfterWrite</name></member>
      <member refid="structmodm_1_1_i2c_1af314fb0ec2e32a25c17cf9f0a54447ee" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>Read</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1aa5e946666c671e606532efb546021bf9" prot="protected" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>readBuffer</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1ae5f5f13fd97cfca95217789bcf2ab6a6" prot="protected" virt="virtual"><scope>modm::I2cWriteReadTransaction</scope><name>reading</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1ae1feec08dbb7ec9a1efa9a435717f86a" prot="protected" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>readSize</name></member>
      <member refid="structmodm_1_1_i2c_1a1855002ad6a0992e32db4f3ebf0432da" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>resetDevices</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a04c0fbb865231d5263f4499ff6a7daeb" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>setAddress</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1ac5b7104a58ff1dcf9a720fdbf6ee5c82" prot="protected" virt="virtual"><scope>modm::I2cWriteReadTransaction</scope><name>starting</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1ae0568bb0ae518843c5642da840867805" prot="protected" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>state</name></member>
      <member refid="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>TransactionState</name></member>
      <member refid="structmodm_1_1_i2c_1a1f77408aecf63279f7c085d8c3692681" prot="public" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>Write</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1a029a5075698d9bf62fe790f1f08d10d0" prot="protected" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>writeBuffer</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1a8d9ba261ef718d44ded469205986a538" prot="protected" virt="non-virtual"><scope>modm::I2cWriteReadTransaction</scope><name>writeSize</name></member>
      <member refid="classmodm_1_1_i2c_write_read_transaction_1acd1b406ce20380757291928e53fd6940" prot="protected" virt="virtual"><scope>modm::I2cWriteReadTransaction</scope><name>writing</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
