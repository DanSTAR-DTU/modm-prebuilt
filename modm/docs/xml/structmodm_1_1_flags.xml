<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structmodm_1_1_flags" kind="struct" language="C++" prot="public">
    <compoundname>modm::Flags</compoundname>
    <basecompoundref refid="structmodm_1_1_flags_operators" prot="public" virt="non-virtual">modm::FlagsOperators&lt; Enum, T &gt;</basecompoundref>
    <includes refid="register_8hpp" local="no">modm/architecture/interface/register.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Enum</type>
      </param>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_1a55665951baa22b91b244c77fdf76ff68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Flags&lt; Enum, T &gt;::Flags</definition>
        <argsstring>()</argsstring>
        <name>Flags</name>
        <briefdescription>
<para>default constructor initializes <computeroutput>value</computeroutput> to zero </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="300" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1adf1048d496cc54f247bc2bcab12647d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Flags&lt; Enum, T &gt;::Flags</definition>
        <argsstring>(Enum flag)</argsstring>
        <name>Flags</name>
        <param>
          <type>Enum</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>constructs itself out of a strongly-typed enum </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="303" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="303" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a076464f6920ed6ea6d8842a1ec25317f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Flags&lt; Enum, T &gt;::Flags</definition>
        <argsstring>(FlagsOperators&lt; Enum, T &gt; const &amp;flag)</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref>&lt; Enum, T &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="306" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="306" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a8ad3275d92c73da7e59928c80619dfca" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Flags&lt; Enum, T &gt;::Flags</definition>
        <argsstring>(UnderlyingType flag)</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="structmodm_1_1_register_1a01eabc4e19471d308132e16098f245cd" kindref="member">UnderlyingType</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>When explicitly called, this class constructs itself out of the underlying type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="310" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="310" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a63c43abd307bc5c2b41c7827b18f5077" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Flags&lt; Enum, T &gt;::Flags</definition>
        <argsstring>(Register&lt; T &gt; const &amp;o)</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="structmodm_1_1_register" kindref="compound">Register</ref>&lt; T &gt; const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>When explicitly called, this class constructs itself out of the superclass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="314" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="314" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1aff877c855c486349f00ad084c8f64ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Flags&lt; Enum, T &gt;::Flags</definition>
        <argsstring>(Flags const &amp;o)=default</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a3e34cb727c204a19d0de418fc42c0ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr modm::Flags&lt; Enum, T &gt;::Flags</definition>
        <argsstring>(Flags &amp;&amp;o)=default</argsstring>
        <name>Flags</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="318" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_1abf3523be9d83c2ca40344111d19f7aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> &amp;</type>
        <definition>Flags&amp; modm::Flags&lt; Enum, T &gt;::operator=</definition>
        <argsstring>(Flags const &amp;o)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a4ccdb64f205c8534cc6c38aa11b8cb38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> &amp;</type>
        <definition>Flags&amp; modm::Flags&lt; Enum, T &gt;::operator=</definition>
        <argsstring>(Flags &amp;&amp;o)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> &amp;&amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="323" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_1afe997e268170e4e791a85bbfd9ca8e9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::set</definition>
        <argsstring>(Enum const &amp;flag)</argsstring>
        <name>set</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Sets a single bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="329" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="329" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a911eae45284b91358a66a2727543ebe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::set</definition>
        <argsstring>(Flags const &amp;o)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Sets multiple bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="332" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="332" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a776c0666be4b3d48d9aeed03044ee3e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::reset</definition>
        <argsstring>(Enum const &amp;flag)</argsstring>
        <name>reset</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Clears a single bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="336" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="336" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1adb2e1692c3a0217b9728b9a11a29a1f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::reset</definition>
        <argsstring>(Flags const &amp;o)</argsstring>
        <name>reset</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Clears multiple bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="339" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="339" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a24ca9c7e0766cb3c065811e2d99104ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::toggle</definition>
        <argsstring>(Enum const &amp;flag)</argsstring>
        <name>toggle</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Toggles a single bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="343" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="343" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1ab4990802f5681340bdb58b40a5912441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::toggle</definition>
        <argsstring>(Flags const &amp;o)</argsstring>
        <name>toggle</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Toggles multiple bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="346" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="346" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a076ffb256fd217653c1e56ba3306c606" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::update</definition>
        <argsstring>(Enum const &amp;flag, bool value)</argsstring>
        <name>update</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a single bit, when <computeroutput>value</computeroutput> is true, clears it otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="350" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a68852ea4169b6ffae19a78bc2d6dd2e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Flags&lt; Enum, T &gt;::update</definition>
        <argsstring>(Flags const &amp;o, bool value)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets multiple bits, when <computeroutput>value</computeroutput> is true, clears them otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="356" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="356" bodyend="360"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_1a2167d6ea6c2239779aa192cf40b63e96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::Flags&lt; Enum, T &gt;::all</definition>
        <argsstring>(Enum const &amp;flag) const</argsstring>
        <name>all</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if bit is set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="366" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="366" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a8afe92c413d55f0a87f7982586c45c52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::Flags&lt; Enum, T &gt;::any</definition>
        <argsstring>(Enum const &amp;flag) const</argsstring>
        <name>any</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if bit is set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="369" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="369" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a56c0110b171d673f71350f02bccecb1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::Flags&lt; Enum, T &gt;::none</definition>
        <argsstring>(Enum const &amp;flag) const</argsstring>
        <name>none</name>
        <param>
          <type>Enum const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if bit is <bold>not</bold> set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="372" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="372" bodyend="373"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="structmodm_1_1_flags_1a67d98d337f11352d3b56355c72f59314" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::Flags&lt; Enum, T &gt;::all</definition>
        <argsstring>(Flags const &amp;o) const</argsstring>
        <name>all</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if <bold>all</bold> of the passed bits are set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="379" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="379" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1a831e65bd3ea8f683efb4b4f9434eb92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::Flags&lt; Enum, T &gt;::any</definition>
        <argsstring>(Flags const &amp;o) const</argsstring>
        <name>any</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if <bold>any</bold> of the passed bits are set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="382" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="382" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="structmodm_1_1_flags_1ae9963c70710652358b093cc7fce27630" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::Flags&lt; Enum, T &gt;::none</definition>
        <argsstring>(Flags const &amp;o) const</argsstring>
        <name>none</name>
        <param>
          <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if <bold>none</bold> of the passed bits are set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="385" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="385" bodyend="386"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structmodm_1_1_flags_1a294dad1fc92ce4271eac214d1c0a1734" prot="public" static="no">
        <type>Enum</type>
        <definition>typedef Enum modm::Flags&lt; Enum, T &gt;::EnumType</definition>
        <argsstring></argsstring>
        <name>EnumType</name>
        <briefdescription>
<para>The enum type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="293" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class for operating on a register.</para>
<para>This class extends the <ref refid="structmodm_1_1_flags_operators" kindref="compound">FlagsOperators</ref> base class by adding constructor overloading and convenience functions between a strongly-typed enum and itself.</para>
<para>This class makes heavy use of <computeroutput>constexpr</computeroutput>, so that as many values and operation can take place at compile time for efficiency.</para>
<para>Unfortunately, you cannot typedef this class directly, you must use the <computeroutput>MODM_FLAGS</computeroutput> macro, which add the required external operator overloads for <computeroutput>Enum OP Enum</computeroutput>. The macro <computeroutput><ref refid="group__modm__architecture__register_1ga7e44b28c63d4d9235b48f814a9becc10" kindref="member">MODM_FLAGS8(Enum)</ref></computeroutput> expands as follows: <programlisting><codeline><highlight class="normal">typedef<sp/>modm::Flags8&lt;Enum&gt;<sp/>Enum_t;</highlight></codeline>
<codeline><highlight class="normal">MODM_INT_TYPE_FLAGS(Enum_t);</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>MODM_FLAGS</computeroutput> macro by default only works in a class or struct, as this is the primary use-case in modm. To use it outside of a struct, use this: <programlisting><codeline><highlight class="normal">typedef<sp/>modm::Flags8&lt;Enum&gt;<sp/>Enum_t;</highlight></codeline>
<codeline><highlight class="normal">MODM_TYPE_FLAGS(Enum_t);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Enum</parametername>
</parameternamelist>
<parameterdescription>
<para>a strongly-typed enum containing the bit masks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying integer type to be for internal representation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__modm__architecture__register_1gacdf81ef59f08411232bb3e7c8be57762" kindref="member">Flags8</ref>, <ref refid="group__modm__architecture__register_1ga5cddf799f2474c0da233eeb750474b18" kindref="member">Flags16</ref>, <ref refid="group__modm__architecture__register_1ga4bbc612ddbc2cf239e7c5baeabfa8a0d" kindref="member">Flags32</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__modm__architecture__register_1ga7e44b28c63d4d9235b48f814a9becc10" kindref="member">MODM_FLAGS8</ref>, <ref refid="group__modm__architecture__register_1ga504f6a42eaea7ddf9c21c18d79694f80" kindref="member">MODM_FLAGS16</ref>, <ref refid="group__modm__architecture__register_1ga37de536c84e4014ca93a0c771ae8b07f" kindref="member">MODM_FLAGS32</ref></para>
</simplesect>
<simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="242">
        <label>modm::FlagsOperators&lt; Enum, T &gt;</label>
        <link refid="structmodm_1_1_flags_operators"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="243">
        <label>modm::Register&lt; T &gt;</label>
        <link refid="structmodm_1_1_register"/>
      </node>
      <node id="241">
        <label>modm::Flags&lt; Enum, T &gt;</label>
        <link refid="structmodm_1_1_flags"/>
        <childnode refid="242" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="247">
        <label>T</label>
      </node>
      <node id="245">
        <label>modm::FlagsOperators&lt; Enum, T &gt;</label>
        <link refid="structmodm_1_1_flags_operators"/>
        <childnode refid="246" relation="public-inheritance">
        </childnode>
      </node>
      <node id="246">
        <label>modm::Register&lt; T &gt;</label>
        <link refid="structmodm_1_1_register"/>
        <childnode refid="247" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="244">
        <label>modm::Flags&lt; Enum, T &gt;</label>
        <link refid="structmodm_1_1_flags"/>
        <childnode refid="245" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" line="287" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/register.hpp" bodystart="286" bodyend="388"/>
    <listofallmembers>
      <member refid="structmodm_1_1_flags_1a2167d6ea6c2239779aa192cf40b63e96" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>all</name></member>
      <member refid="structmodm_1_1_flags_1a67d98d337f11352d3b56355c72f59314" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>all</name></member>
      <member refid="structmodm_1_1_flags_1a8afe92c413d55f0a87f7982586c45c52" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>any</name></member>
      <member refid="structmodm_1_1_flags_1a831e65bd3ea8f683efb4b4f9434eb92c" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>any</name></member>
      <member refid="structmodm_1_1_flags_1a294dad1fc92ce4271eac214d1c0a1734" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>EnumType</name></member>
      <member refid="structmodm_1_1_flags_1a55665951baa22b91b244c77fdf76ff68" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Flags</name></member>
      <member refid="structmodm_1_1_flags_1adf1048d496cc54f247bc2bcab12647d2" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Flags</name></member>
      <member refid="structmodm_1_1_flags_1a076464f6920ed6ea6d8842a1ec25317f" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Flags</name></member>
      <member refid="structmodm_1_1_flags_1a8ad3275d92c73da7e59928c80619dfca" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Flags</name></member>
      <member refid="structmodm_1_1_flags_1a63c43abd307bc5c2b41c7827b18f5077" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Flags</name></member>
      <member refid="structmodm_1_1_flags_1aff877c855c486349f00ad084c8f64ed8" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Flags</name></member>
      <member refid="structmodm_1_1_flags_1a3e34cb727c204a19d0de418fc42c0ee5" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Flags</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1979ef9b9355bdc69e938c43dd89dcb6" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1adcf3c618c16f217e8ec1ac5ce825b726" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a69210167d06c667cc1363652ebb4720f" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1aeac8d1600b0567c340a62eae299a434e" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1ae60e3d89b041aea0a242c8c332843849" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a5a15da92c03131959f00fe3122d3f2b0" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>FlagsOperators</name></member>
      <member refid="structmodm_1_1_flags_operators_1a5c3fbed98d9c8aa6bdbae7aa2d40fc7a" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>mask</name></member>
      <member refid="structmodm_1_1_flags_1a56c0110b171d673f71350f02bccecb1d" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>none</name></member>
      <member refid="structmodm_1_1_flags_1ae9963c70710652358b093cc7fce27630" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>none</name></member>
      <member refid="structmodm_1_1_flags_operators_1a6031bdd8b83beec16778740188ea6ab2" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator &amp;</name></member>
      <member refid="structmodm_1_1_register_1aca49e332e09a999a9c10182c44a0ddff" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator bool</name></member>
      <member refid="structmodm_1_1_register_1a959d3b687497e1485faec27887cd8925" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator!</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1d38805ab12378f42f0e942cd5b0ba9a" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator&amp;=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a2e55f60e8053f75e96ff00da5b967dde" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator&amp;=</name></member>
      <member refid="structmodm_1_1_flags_1abf3523be9d83c2ca40344111d19f7aca" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_1a4ccdb64f205c8534cc6c38aa11b8cb38" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a92001e0adca0280cd7bc248543635c6a" prot="public" virt="non-virtual" ambiguityscope="modm::FlagsOperators::"><scope>modm::Flags</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a0baf85508f4708a386420aad5749c460" prot="public" virt="non-virtual" ambiguityscope="modm::FlagsOperators::"><scope>modm::Flags</scope><name>operator=</name></member>
      <member refid="structmodm_1_1_flags_operators_1acd0240578bf6dde719f39464c82002be" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator^</name></member>
      <member refid="structmodm_1_1_flags_operators_1a1b9f2672e756b82403df85f3abd953e5" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator^=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a40e2f53dd48f6889db0290fe6b594814" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator^=</name></member>
      <member refid="structmodm_1_1_flags_operators_1a600cfb6f6939c33ff1dd555ff7c4757e" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator|</name></member>
      <member refid="structmodm_1_1_flags_operators_1a9e09e13d81dd36cb32a53274185b9286" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator|=</name></member>
      <member refid="structmodm_1_1_flags_operators_1afecc755620b863362cd6be1b7b01174d" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator|=</name></member>
      <member refid="structmodm_1_1_flags_operators_1aa92025455589054692cce6ad6329ca38" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>operator~</name></member>
      <member refid="structmodm_1_1_register_1a6011e04b6402adbf7a4497e11dfb9b04" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>Register</name></member>
      <member refid="structmodm_1_1_register_1a9b9f9dfa762f2912886ee6618e807087" prot="protected" virt="non-virtual"><scope>modm::Flags</scope><name>Register</name></member>
      <member refid="structmodm_1_1_flags_1a776c0666be4b3d48d9aeed03044ee3e1" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>reset</name></member>
      <member refid="structmodm_1_1_flags_1adb2e1692c3a0217b9728b9a11a29a1f6" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>reset</name></member>
      <member refid="structmodm_1_1_flags_1afe997e268170e4e791a85bbfd9ca8e9a" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>set</name></member>
      <member refid="structmodm_1_1_flags_1a911eae45284b91358a66a2727543ebe3" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>set</name></member>
      <member refid="structmodm_1_1_flags_1a24ca9c7e0766cb3c065811e2d99104ba" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>toggle</name></member>
      <member refid="structmodm_1_1_flags_1ab4990802f5681340bdb58b40a5912441" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>toggle</name></member>
      <member refid="structmodm_1_1_register_1a01eabc4e19471d308132e16098f245cd" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>UnderlyingType</name></member>
      <member refid="structmodm_1_1_flags_1a076ffb256fd217653c1e56ba3306c606" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>update</name></member>
      <member refid="structmodm_1_1_flags_1a68852ea4169b6ffae19a78bc2d6dd2e4" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>update</name></member>
      <member refid="structmodm_1_1_register_1a4d86255f7cd8fc09c9f88d1776535f68" prot="public" virt="non-virtual"><scope>modm::Flags</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
