<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__modm__io" kind="group">
    <compoundname>modm_io</compoundname>
    <title>Input/Output Streams</title>
    <innerclass refid="classmodm_1_1_i_o_device" prot="public">modm::IODevice</innerclass>
    <innerclass refid="classmodm_1_1_i_o_device_wrapper" prot="public">modm::IODeviceWrapper</innerclass>
    <innerclass refid="classmodm_1_1_i_o_stream" prot="public">modm::IOStream</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__modm__io_1gabe969be1dd7e086eae347fff42a13903" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::flush</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>flush</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flushes the output stream. This manipulator simply calls the stream&apos;s <ref refid="group__modm__io_1gabe969be1dd7e086eae347fff42a13903" kindref="member">flush()</ref> member function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="249" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" bodystart="249" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga25d1ec416bcd6a8b8d1d280c99fd2d55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::endl</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>endl</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="254" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" bodystart="254" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gaa3870b0cd1e55a28adf436bdd45d7eaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::bin</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>bin</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>set the output mode to binary style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="259" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" bodystart="259" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gaf61485290089e35ac0a897af1c37d4f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::hex</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>hex</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>set the output mode to hexadecimal style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="264" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" bodystart="264" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga684e638463534cfdac4cb3f31faa35a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::ascii</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>ascii</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>set the output mode to ASCII style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="269" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" bodystart="269" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga95e54d2dc105f141b3319157b70e3648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::black</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>black</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour on ANSI terminals. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gace81ca5d67327501c5d10daff12bccf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::red</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>red</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gaf1149fc714213a39df7fe1d7e82184dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::green</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>green</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga0ba66e273e02afe2b580a77315924c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::yellow</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>yellow</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gae6f479911a2706520d6355834b2fa7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::blue</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>blue</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga3438c4139324e0ce05430b371995f885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::magenta</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>magenta</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga42c49cf650c6bba34cfd712dcea739c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::cyan</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>cyan</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga1c7fa6a962b858dd5760b3c9e0a9edeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IOStream &amp;</type>
        <definition>IOStream&amp; modm::white</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>white</name>
        <param>
          <type>IOStream &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iostream.hpp" line="295" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__modm__io_1ga1dba65d23c24229cfe3c9af7912a566f" prot="public" static="no">
        <name>IOBuffer</name>
        <enumvalue id="group__modm__io_1gga1dba65d23c24229cfe3c9af7912a566fa8460a7bd968d7951d287d235476ecf5c" prot="public">
          <name>DiscardIfFull</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__io_1gga1dba65d23c24229cfe3c9af7912a566fa392e50b6c46c40be433f3a68a9b414a2" prot="public">
          <name>BlockIfFull</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The preferred behavior when the <ref refid="classmodm_1_1_i_o_device" kindref="compound">IODevice</ref> buffer is full </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iodevice_wrapper.hpp" line="29" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/io/iodevice_wrapper.hpp" bodystart="27" bodyend="32"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref></computeroutput> class contains efficient formatting that supports both C++ <computeroutput>std::basic_ostream</computeroutput>-like formatting via <computeroutput>operator &lt;&lt;</computeroutput> as well as implementing a reasonably large subset of <computeroutput>printf</computeroutput>.</para><para><programlisting><codeline><highlight class="normal"><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref><sp/>stream(device);</highlight></codeline>
<codeline><highlight class="normal">stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;format<sp/>number<sp/>8:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>uint8_t(8)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>as<sp/>signed<sp/>-100:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>int8_t(-100);</highlight></codeline>
<codeline><highlight class="normal">stream<sp/>&lt;&lt;<sp/><ref refid="group__modm__io_1ga25d1ec416bcd6a8b8d1d280c99fd2d55" kindref="member">modm::endl</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">stream.<ref refid="classmodm_1_1_i_o_stream_1a0a25e55734176869c30b779bd6b92eb7" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;format<sp/>number<sp/>8:<sp/>%u<sp/>or<sp/>as<sp/>signed<sp/>-100:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>8,<sp/>-100);</highlight></codeline>
</programlisting></para><para><simplesect kind="warning"><para>&quot;AVR supported features&quot; All expensive features incl. printf are disabled by default! Check the options.</para></simplesect>
<simplesect kind="note"><para>&quot;`modm::endl` does implicitly flush!&quot; Flushing is <emphasis>extremely expensive</emphasis> on embedded systems, therefore <computeroutput><ref refid="group__modm__io_1ga25d1ec416bcd6a8b8d1d280c99fd2d55" kindref="member">modm::endl</ref></computeroutput> does not implicitly flush the stream. Please call <computeroutput><ref refid="group__modm__io_1gabe969be1dd7e086eae347fff42a13903" kindref="member">modm::flush</ref></computeroutput> explicitly.</para></simplesect>
<heading level="2">Using printf</heading>
</para><para>This module uses the printf implementation from <ulink url="https://github.com/mpaland/printf"><computeroutput>mpaland/printf</computeroutput></ulink>.</para><para><heading level="3">Format Specifiers</heading>
</para><para>A format specifier follows this prototype: <computeroutput>%[flags][width][.precision][length]type</computeroutput> The following format specifiers are supported:</para><para><heading level="4">Supported Types</heading>
</para><para><table rows="14" cols="2"><row>
<entry thead="yes"><para>Type </para></entry><entry thead="yes"><para>Output  </para></entry></row>
<row>
<entry thead="no"><para>d or i </para></entry><entry thead="no"><para>Signed decimal integer </para></entry></row>
<row>
<entry thead="no"><para>u </para></entry><entry thead="no"><para>Unsigned decimal integer </para></entry></row>
<row>
<entry thead="no"><para>b </para></entry><entry thead="no"><para>Unsigned binary </para></entry></row>
<row>
<entry thead="no"><para>o </para></entry><entry thead="no"><para>Unsigned octal </para></entry></row>
<row>
<entry thead="no"><para>x </para></entry><entry thead="no"><para>Unsigned hexadecimal integer (lowercase) </para></entry></row>
<row>
<entry thead="no"><para>X </para></entry><entry thead="no"><para>Unsigned hexadecimal integer (uppercase) </para></entry></row>
<row>
<entry thead="no"><para>f or F </para></entry><entry thead="no"><para>Decimal floating point (<computeroutput>with_float</computeroutput> option) </para></entry></row>
<row>
<entry thead="no"><para>e or E </para></entry><entry thead="no"><para>Scientific-notation (exponential) floating point (<computeroutput>with_float</computeroutput> option) </para></entry></row>
<row>
<entry thead="no"><para>g or G </para></entry><entry thead="no"><para>Scientific or decimal floating point (<computeroutput>with_float</computeroutput> option) </para></entry></row>
<row>
<entry thead="no"><para>c </para></entry><entry thead="no"><para>Single character </para></entry></row>
<row>
<entry thead="no"><para>s </para></entry><entry thead="no"><para>String of characters </para></entry></row>
<row>
<entry thead="no"><para>p </para></entry><entry thead="no"><para>Pointer address </para></entry></row>
<row>
<entry thead="no"><para>% </para></entry><entry thead="no"><para>A % followed by another % character will write a single % </para></entry></row>
</table>
</para><para><heading level="4">Supported Flags</heading>
</para><para><table rows="6" cols="2"><row>
<entry thead="yes"><para>Flags </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para>- </para></entry><entry thead="no"><para>Left-justify within the given field width; Right justification is the default. </para></entry></row>
<row>
<entry thead="no"><para>+ </para></entry><entry thead="no"><para>Forces to precede the result with a plus or minus sign (+ or -) even for positive numbers.<linebreak/>
By default, only negative numbers are preceded with a - sign. </para></entry></row>
<row>
<entry thead="no"><para>(space) </para></entry><entry thead="no"><para>If no sign is going to be written, a blank space is inserted before the value. </para></entry></row>
<row>
<entry thead="no"><para># </para></entry><entry thead="no"><para>Used with o, b, x or X specifiers the value is preceded with 0, 0b, 0x or 0X respectively for values different than zero.<linebreak/>
Used with f, F it forces the written output to contain a decimal point even if no more digits follow. By default, if no digits follow, no decimal point is written. </para></entry></row>
<row>
<entry thead="no"><para>0 </para></entry><entry thead="no"><para>Left-pads the number with zeros (0) instead of spaces when padding is specified (see width sub-specifier). </para></entry></row>
</table>
</para><para><heading level="4">Supported Width</heading>
</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Width </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para>(number) </para></entry><entry thead="no"><para>Minimum number of characters to be printed. If the value to be printed is shorter than this number, the result is padded with blank spaces. The value is not truncated even if the result is larger. </para></entry></row>
<row>
<entry thead="no"><para>* </para></entry><entry thead="no"><para>The width is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted. </para></entry></row>
</table>
</para><para><heading level="4">Supported Precision</heading>
</para><para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Precision </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para>.number </para></entry><entry thead="no"><para>For integer specifiers (d, i, o, u, x, X): precision specifies the minimum number of digits to be written. If the value to be written is shorter than this number, the result is padded with leading zeros. The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0.<linebreak/>
For f and F specifiers: this is the number of digits to be printed after the decimal point. <bold>By default, this is 6, maximum is 9</bold>.<linebreak/>
For s: this is the maximum number of characters to be printed. By default all characters are printed until the ending null character is encountered.<linebreak/>
If the period is specified without an explicit value for precision, 0 is assumed. </para></entry></row>
<row>
<entry thead="no"><para>.* </para></entry><entry thead="no"><para>The precision is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted. </para></entry></row>
</table>
</para><para><heading level="4">Supported Length</heading>
</para><para>The length sub-specifier modifies the length of the data type.</para><para><table rows="9" cols="3"><row>
<entry thead="yes"><para>Length </para></entry><entry thead="yes"><para>d i </para></entry><entry thead="yes"><para>u o x X  </para></entry></row>
<row>
<entry thead="no"><para>(none) </para></entry><entry thead="no"><para>int </para></entry><entry thead="no"><para>unsigned int </para></entry></row>
<row>
<entry thead="no"><para>hh </para></entry><entry thead="no"><para>char </para></entry><entry thead="no"><para>unsigned char </para></entry></row>
<row>
<entry thead="no"><para>h </para></entry><entry thead="no"><para>short int </para></entry><entry thead="no"><para>unsigned short int </para></entry></row>
<row>
<entry thead="no"><para>l </para></entry><entry thead="no"><para>long int </para></entry><entry thead="no"><para>unsigned long int </para></entry></row>
<row>
<entry thead="no"><para>ll </para></entry><entry thead="no"><para>long long int </para></entry><entry thead="no"><para>unsigned long long int (<computeroutput>with_long_long</computeroutput> option) </para></entry></row>
<row>
<entry thead="no"><para>j </para></entry><entry thead="no"><para>intmax_t </para></entry><entry thead="no"><para>uintmax_t </para></entry></row>
<row>
<entry thead="no"><para>z </para></entry><entry thead="no"><para>size_t </para></entry><entry thead="no"><para>size_t </para></entry></row>
<row>
<entry thead="no"><para>t </para></entry><entry thead="no"><para>ptrdiff_t </para></entry><entry thead="no"><para>ptrdiff_t (<computeroutput>with_ptrdiff</computeroutput> option) </para></entry></row>
</table>
</para><para><heading level="2">Redirecting IOStreams</heading>
</para><para>The <computeroutput><ref refid="classmodm_1_1_i_o_device_wrapper" kindref="compound">modm::IODeviceWrapper</ref></computeroutput> transforms any peripheral device that provides static <computeroutput>write()</computeroutput> and <computeroutput>read()</computeroutput> functions into an <computeroutput>IODevice</computeroutput>.</para><para>You have to decide what happens when the device buffer is full and you cannot write to it at the moment. There are two options:</para><para><orderedlist>
<listitem><para>busy wait until the buffer is free, or</para></listitem><listitem><para>discard the bytes that cannot be written.</para></listitem></orderedlist>
</para><para>Option 1 has the advantage, that none of your data will be lost, however, busy-waiting can take a long time and can mess up your program timings. There is also a <bold>high risk of deadlock</bold>, when writing to a IODevice inside of an interrupt and then busy-waiting forever because the IODevice requires interrupts itself to send out the data.</para><para>It is therefore highly recommended to use option 2, where surplus data will be discarded. You should increase the IODevice buffer size, if you experience missing data from your connection. This behavior is also deadlock safe when called from inside another interrupt, and your program timing is minimally affected (essentially only coping data into the buffer).</para><para>There is no default template argument, so that you hopefully make a conscious decision and be aware of this behavior.</para><para>Example:</para><para><programlisting><codeline><highlight class="comment">//<sp/>configure<sp/>a<sp/>UART</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Uart<sp/>=<sp/>Uart0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrap<sp/>it<sp/>into<sp/>an<sp/>IODevice</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classmodm_1_1_i_o_device_wrapper" kindref="compound">modm::IODeviceWrapper&lt;Uart, modm::IOBuffer::DiscardIfFull&gt;</ref><sp/>device;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>this<sp/>device<sp/>to<sp/>print<sp/>a<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">device.<ref refid="classmodm_1_1_i_o_device_wrapper_1a44e65b6cc692831454a23505a3a25bd3" kindref="member">write</ref>(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>create<sp/>a<sp/>IOStream<sp/>and<sp/>use<sp/>the<sp/>stream<sp/>to<sp/>print<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref><sp/>stream(device);</highlight></codeline>
<codeline><highlight class="normal">stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>World!&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
