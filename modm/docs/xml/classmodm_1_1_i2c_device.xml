<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_i2c_device" kind="class" language="C++" prot="public">
    <compoundname>modm::I2cDevice</compoundname>
    <basecompoundref refid="classmodm_1_1_nested_resumable" prot="protected" virt="non-virtual">modm::NestedResumable&lt; NestingLevels+1 &gt;</basecompoundref>
    <includes refid="i2c__device_8hpp" local="no">modm/architecture/interface/i2c_device.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>I2cMaster</declname>
        <defname>I2cMaster</defname>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>NestingLevels</declname>
        <defname>NestingLevels</defname>
        <defval>10</defval>
      </param>
      <param>
        <type>class</type>
        <declname>Transaction</declname>
        <defname>Transaction</defname>
        <defval><ref refid="classmodm_1_1_i2c_write_read_transaction" kindref="compound">I2cWriteReadTransaction</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmodm_1_1_i2c_device_1a2143acb5e132fa9a9b89dac9adb29336" prot="protected" static="no" mutable="no">
        <type>Transaction</type>
        <definition>Transaction modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::transaction</definition>
        <argsstring></argsstring>
        <name>transaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="152" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1_i2c_device_1adae41fc5546d97d37d6848fac481b637" prot="private" static="no" mutable="no">
        <type><ref refid="structmodm_1_1_i2c_1acc3232e086891a4564399117a4e0e450" kindref="member">I2c::ConfigurationHandler</ref></type>
        <definition>I2c::ConfigurationHandler modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::configuration</definition>
        <argsstring></argsstring>
        <name>configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="154" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a8b2bad58a80104ddaaccf6e2c9d6b067" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::I2cDevice</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>I2cDevice</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the slave address not yet shifted left (address &lt; 128). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="48" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a835cbd938f2c13713c4b46669dc5cd84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::setAddress</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>setAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a new address of the slave device. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the slave address not yet shifted left (address &lt; 128). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="56" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1af69c9510f28ffa17808595ef0ba594cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::attachConfigurationHandler</definition>
        <argsstring>(I2c::ConfigurationHandler handler)</argsstring>
        <name>attachConfigurationHandler</name>
        <param>
          <type><ref refid="structmodm_1_1_i2c_1acc3232e086891a4564399117a4e0e450" kindref="member">I2c::ConfigurationHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attaches a configuration handler, which is called before a transaction, whenever the configuration has to be changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="64" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a8246f7cd360a090574b8803309e5fb56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::ping</definition>
        <argsstring>()</argsstring>
        <name>ping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>device responds to address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no device with address found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="72" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="72" bodyend="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a38c8739bcfdaa6ab89632d3e54ff76a7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::startWriteRead</definition>
        <argsstring>(const uint8_t *writeBuffer, std::size_t writeSize, uint8_t *readBuffer, std::size_t readSize)</argsstring>
        <name>startWriteRead</name>
        <param>
          <type>const uint8_t *</type>
          <declname>writeBuffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>writeSize</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>readBuffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>readSize</declname>
        </param>
        <briefdescription>
<para>Configures the transaction with a write/read operation and starts it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="86" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a2db4e7efe1f03a9624e24180efb5b0c2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::startWrite</definition>
        <argsstring>(const uint8_t *buffer, std::size_t size)</argsstring>
        <name>startWrite</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Configures the transaction with a write operation and starts it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="95" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a614eae1b4b0c83cbff05a7546655e74d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::startRead</definition>
        <argsstring>(uint8_t *buffer, std::size_t size)</argsstring>
        <name>startRead</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Configures the transaction with a read operation and starts it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="103" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a10d5b5d4aab42daa7d00172eb0d7bafd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::startTransaction</definition>
        <argsstring>()</argsstring>
        <name>startTransaction</name>
        <briefdescription>
<para>Starts the transaction with our own transaction object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="112" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a13fe5ceae5f77e7a86d54f237c78b23e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::startTransaction</definition>
        <argsstring>(modm::I2cTransaction *transaction)</argsstring>
        <name>startTransaction</name>
        <param>
          <type><ref refid="classmodm_1_1_i2c_transaction" kindref="compound">modm::I2cTransaction</ref> *</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
<para>Starts the transaction with a seperate transaction object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="119" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1ab2f2626acd027c2ab7329b47c3bcd32d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::isTransactionRunning</definition>
        <argsstring>()</argsstring>
        <name>isTransactionRunning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> when transaction is busy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="126" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1a982a2935e54ada5a0eefb1b4f6ac6fef" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::wasTransactionSuccessful</definition>
        <argsstring>()</argsstring>
        <name>wasTransactionSuccessful</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> when transaction did not return an error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="133" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_device_1af72a1ecfe399671f236f6e1fae64ffec" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; bool &gt;</type>
        <definition>modm::ResumableResult&lt;bool&gt; modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;::runTransaction</definition>
        <argsstring>()</argsstring>
        <name>runTransaction</name>
        <briefdescription>
<para>Starts our own transaction and waits until finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="140" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="140" bodyend="149"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class of an I2C Device.</para>
<para>This class provides functions for configuring the adapter and peripheral and starting transactions. It also provides a basic <computeroutput><ref refid="classmodm_1_1_i2c_device_1a8246f7cd360a090574b8803309e5fb56" kindref="member">ping()</ref></computeroutput> resumable function, which checks if the device responds to its address.</para>
<para>You need to provide the number of required nesting levels for your driver here. By default, 10 levels are chosen, which should be more than enough in any case.</para>
<para>You can choose to use your own custom <ref refid="structmodm_1_1_i2c" kindref="compound">I2c</ref> Transaction Adapter, by providing a class subclassed from an existing I2cAdapter or which implements the <ref refid="classmodm_1_1_i2c_transaction" kindref="compound">I2cTransaction</ref> interface manually.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> conforming to the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NestingLevels</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nesting levels required for your driver </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>a class conforming to the <ref refid="classmodm_1_1_i2c_transaction" kindref="compound">I2cTransaction</ref> interface.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Georgi Grinshpun </para>
</simplesect>
<simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1249">
        <label>modm::NestedResumable&lt; NestingLevels+1 &gt;</label>
        <link refid="classmodm_1_1_nested_resumable"/>
      </node>
      <node id="1248">
        <label>modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;</label>
        <link refid="classmodm_1_1_i2c_device"/>
        <childnode refid="1249" relation="protected-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1251">
        <label>modm::NestedResumable&lt; NestingLevels+1 &gt;</label>
        <link refid="classmodm_1_1_nested_resumable"/>
      </node>
      <node id="1252">
        <label>Transaction</label>
      </node>
      <node id="1250">
        <label>modm::I2cDevice&lt; I2cMaster, NestingLevels, Transaction &gt;</label>
        <link refid="classmodm_1_1_i2c_device"/>
        <childnode refid="1251" relation="protected-inheritance">
        </childnode>
        <childnode refid="1252" relation="usage">
          <edgelabel>transaction</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" line="45" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/architecture/interface/i2c_device.hpp" bodystart="44" bodyend="155"/>
    <listofallmembers>
      <member refid="classmodm_1_1_i2c_device_1af69c9510f28ffa17808595ef0ba594cd" prot="public" virt="non-virtual"><scope>modm::I2cDevice</scope><name>attachConfigurationHandler</name></member>
      <member refid="classmodm_1_1_i2c_device_1adae41fc5546d97d37d6848fac481b637" prot="private" virt="non-virtual"><scope>modm::I2cDevice</scope><name>configuration</name></member>
      <member refid="classmodm_1_1_nested_resumable_1a4a262915b4bf9b2f45b63432c80bbbba" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>function</name></member>
      <member refid="classmodm_1_1_nested_resumable_1a9d2533f899a91e764498123bc26705c0" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>getResumableDepth</name></member>
      <member refid="classmodm_1_1_i2c_device_1a8b2bad58a80104ddaaccf6e2c9d6b067" prot="public" virt="non-virtual"><scope>modm::I2cDevice</scope><name>I2cDevice</name></member>
      <member refid="classmodm_1_1_nested_resumable_1a264e13e3deb4b8cfc026b3e0878634d0" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>isResumableRunning</name></member>
      <member refid="classmodm_1_1_i2c_device_1ab2f2626acd027c2ab7329b47c3bcd32d" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>isTransactionRunning</name></member>
      <member refid="classmodm_1_1_nested_resumable_1abbbbb9e321a5638643a32ad6567725d5" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>NestedResumable</name></member>
      <member refid="classmodm_1_1_i2c_device_1a8246f7cd360a090574b8803309e5fb56" prot="public" virt="non-virtual"><scope>modm::I2cDevice</scope><name>ping</name></member>
      <member refid="classmodm_1_1_i2c_device_1af72a1ecfe399671f236f6e1fae64ffec" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>runTransaction</name></member>
      <member refid="classmodm_1_1_i2c_device_1a835cbd938f2c13713c4b46669dc5cd84" prot="public" virt="non-virtual"><scope>modm::I2cDevice</scope><name>setAddress</name></member>
      <member refid="classmodm_1_1_i2c_device_1a614eae1b4b0c83cbff05a7546655e74d" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>startRead</name></member>
      <member refid="classmodm_1_1_i2c_device_1a10d5b5d4aab42daa7d00172eb0d7bafd" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>startTransaction</name></member>
      <member refid="classmodm_1_1_i2c_device_1a13fe5ceae5f77e7a86d54f237c78b23e" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>startTransaction</name></member>
      <member refid="classmodm_1_1_i2c_device_1a2db4e7efe1f03a9624e24180efb5b0c2" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>startWrite</name></member>
      <member refid="classmodm_1_1_i2c_device_1a38c8739bcfdaa6ab89632d3e54ff76a7" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>startWriteRead</name></member>
      <member refid="classmodm_1_1_nested_resumable_1a76d5ca76aec447ab4fe45b56fa2d462d" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>stopResumable</name></member>
      <member refid="classmodm_1_1_i2c_device_1a2143acb5e132fa9a9b89dac9adb29336" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>transaction</name></member>
      <member refid="classmodm_1_1_i2c_device_1a982a2935e54ada5a0eefb1b4f6ac6fef" prot="protected" virt="non-virtual"><scope>modm::I2cDevice</scope><name>wasTransactionSuccessful</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
