<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_i2c_transaction" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>modm::I2cTransaction</compoundname>
    <basecompoundref refid="structmodm_1_1_i2c" prot="public" virt="non-virtual">modm::I2c</basecompoundref>
    <derivedcompoundref refid="classmodm_1_1_i2c_read_transaction" prot="public" virt="non-virtual">modm::I2cReadTransaction</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1_i2c_write_read_transaction" prot="public" virt="non-virtual">modm::I2cWriteReadTransaction</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1_i2c_write_transaction" prot="public" virt="non-virtual">modm::I2cWriteTransaction</derivedcompoundref>
    <includes refid="i2c__transaction_8hpp" local="no">modm/architecture/interface/i2c_transaction.hpp</includes>
    <innerclass refid="structmodm_1_1_i2c_transaction_1_1_reading" prot="public">modm::I2cTransaction::Reading</innerclass>
    <innerclass refid="structmodm_1_1_i2c_transaction_1_1_starting" prot="public">modm::I2cTransaction::Starting</innerclass>
    <innerclass refid="structmodm_1_1_i2c_transaction_1_1_writing" prot="public">modm::I2cTransaction::Writing</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmodm_1_1_i2c_transaction_1aceabf617d6e44fde8d017def19546126" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t modm::I2cTransaction::address</definition>
        <argsstring></argsstring>
        <name>address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="224" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_i2c_transaction_1ae0568bb0ae518843c5642da840867805" prot="protected" static="no" mutable="no">
        <type><ref refid="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713" kindref="member">TransactionState</ref></type>
        <definition>volatile TransactionState modm::I2cTransaction::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="225" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a36767dc9db6bd682fd8348f402745263" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::I2cTransaction::I2cTransaction</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>I2cTransaction</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the slave address not yet shifted left (address &lt; 128). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="94" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a04c0fbb865231d5263f4499ff6a7daeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::I2cTransaction::setAddress</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>setAddress</name>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the slave address not yet shifted left (address &lt; 128). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="100" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a3d8a51e219912d01250e2bb732d4b227" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713" kindref="member">TransactionState</ref></type>
        <definition>TransactionState modm::I2cTransaction::getState</definition>
        <argsstring>() const</argsstring>
        <name>getState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>Busy</computeroutput> while an I2C operation is ongoing. Reinitialization is not permitted during this phase. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="108" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a5ebc6259434dc6e279a633eff1020089" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cTransaction::isBusy</definition>
        <argsstring>() const</argsstring>
        <name>isBusy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> while adapter is busy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="115" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1ae65bb90084e80349ca3b045b5dee386d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cTransaction::configurePing</definition>
        <argsstring>()</argsstring>
        <name>configurePing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the adapter to only send the address without payload.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;true&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter configured successfully, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;false&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter busy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1aa8cc37212d9b105bce2686c19cc501ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cTransaction::configureWriteRead</definition>
        <argsstring>(const uint8_t *writeBuffer, std::size_t writeSize, uint8_t *readBuffer, std::size_t readSize)</argsstring>
        <name>configureWriteRead</name>
        <param>
          <type>const uint8_t *</type>
          <declname>writeBuffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>writeSize</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>readBuffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>readSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the adapter with the required information for a write/read operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">writeBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be written to the slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writeSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be written, set to <computeroutput>0</computeroutput> to write nothing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">readBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write the read bytes from the slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be read, set to <computeroutput>0</computeroutput> to read nothing</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;true&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter configured successfully, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;false&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter busy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a2cfa7b1089b48079716d99c5d1ee328d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cTransaction::configureWrite</definition>
        <argsstring>(uint8_t *buffer, std::size_t size)</argsstring>
        <name>configureWrite</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the adapter with the required information for a write operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be written to the slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be written, set to <computeroutput>0</computeroutput> to write nothing</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;true&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter configured successfully, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;false&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter busy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a5d84d47e257b81ddb3f7856bb2828c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::I2cTransaction::configureRead</definition>
        <argsstring>(uint8_t *buffer, std::size_t size)</argsstring>
        <name>configureRead</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the adapter with the required information for a read operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to be read from the slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be read, set to <computeroutput>0</computeroutput> to read nothing</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;true&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter configured successfully, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;false&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>adapter busy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a7fc4cc4f94f1c9f7093d1944815f6ed7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool modm::I2cTransaction::attaching</definition>
        <argsstring>()</argsstring>
        <name>attaching</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called when the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> is not currently in use by another transaction and can be attached.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> should attach this transaction, <computeroutput>false</computeroutput> if it should not attach it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="177" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="177" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a974f8a0785065703157b9c93984ebd6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_starting" kindref="compound">Starting</ref></type>
        <definition>virtual Starting modm::I2cTransaction::starting</definition>
        <argsstring>()=0</argsstring>
        <name>starting</name>
        <reimplementedby refid="classmodm_1_1_i2c_write_read_transaction_1ac5b7104a58ff1dcf9a720fdbf6ee5c82">starting</reimplementedby>
        <reimplementedby refid="classmodm_1_1_i2c_write_transaction_1af55820fbc7fded2e40b19fffe41970fb">starting</reimplementedby>
        <reimplementedby refid="classmodm_1_1_i2c_read_transaction_1a1ebc60c3edc73da77cce9c5ad5a0885e">starting</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called when the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> is ready to (re-)start an operation.</para><para><simplesect kind="return"><para>the <computeroutput><ref refid="structmodm_1_1_i2c_transaction_1_1_starting" kindref="compound">Starting</ref></computeroutput> struct containing slave address and the next operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a228135661dcee84d62f22715122551cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_writing" kindref="compound">Writing</ref></type>
        <definition>virtual Writing modm::I2cTransaction::writing</definition>
        <argsstring>()=0</argsstring>
        <name>writing</name>
        <reimplementedby refid="classmodm_1_1_i2c_write_read_transaction_1acd1b406ce20380757291928e53fd6940">writing</reimplementedby>
        <reimplementedby refid="classmodm_1_1_i2c_write_transaction_1a1f9662798c9325ab9609b61c38f02168">writing</reimplementedby>
        <reimplementedby refid="classmodm_1_1_i2c_read_transaction_1a020f494d1d9973bc2c635b8c8b9d3252">writing</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called before the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> begins a write operation.</para><para><simplesect kind="return"><para>the <computeroutput><ref refid="structmodm_1_1_i2c_transaction_1_1_writing" kindref="compound">Writing</ref></computeroutput> struct containing the write buffer and size and next operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1ac013d2f70ccc9fd8bbfdc87b842aabb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structmodm_1_1_i2c_transaction_1_1_reading" kindref="compound">Reading</ref></type>
        <definition>virtual Reading modm::I2cTransaction::reading</definition>
        <argsstring>()=0</argsstring>
        <name>reading</name>
        <reimplementedby refid="classmodm_1_1_i2c_write_read_transaction_1ae5f5f13fd97cfca95217789bcf2ab6a6">reading</reimplementedby>
        <reimplementedby refid="classmodm_1_1_i2c_write_transaction_1a71480d18c4ae2ea238d89113a5348a56">reading</reimplementedby>
        <reimplementedby refid="classmodm_1_1_i2c_read_transaction_1a3202f5cd99ab21e729e20ab387599f7a">reading</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called before the <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> begins a read operation.</para><para><simplesect kind="return"><para>the <computeroutput><ref refid="structmodm_1_1_i2c_transaction_1_1_reading" kindref="compound">Reading</ref></computeroutput> struct containing the read buffer and size and next operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_i2c_transaction_1a2729b9db6395b87b2404084a5a929d39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void modm::I2cTransaction::detaching</definition>
        <argsstring>(DetachCause cause)</argsstring>
        <name>detaching</name>
        <param>
          <type><ref refid="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcd" kindref="member">DetachCause</ref></type>
          <declname>cause</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called when all transmissions finished and transaction object is about to be detached. The <ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref> will not be free until this method returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cause</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies whether the detachment was expected (<computeroutput>NormalStop</computeroutput>), or a error occurred (<computeroutput>ErrorCondition</computeroutput>), which can, but does not need to be reacted upon. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="218" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Abstract class for transactions.</para><para>For true asynchronous operation, the communication driver should inherit from this class, allowing multi-stage driver design and performance gain by premature data evaluation. This transaction object will stay attached to the <computeroutput><ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref></computeroutput> during whole operation.</para><para><simplesect kind="see"><para><ref refid="classmodm_1_1_i2c_master" kindref="compound">I2cMaster</ref></para></simplesect>
<simplesect kind="author"><para>Georgi Grinshpun </para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1313">
        <label>modm::I2cWriteReadTransaction</label>
        <link refid="classmodm_1_1_i2c_write_read_transaction"/>
        <childnode refid="1310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1312">
        <label>modm::I2cReadTransaction</label>
        <link refid="classmodm_1_1_i2c_read_transaction"/>
        <childnode refid="1310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1311">
        <label>modm::I2c</label>
        <link refid="structmodm_1_1_i2c"/>
      </node>
      <node id="1310">
        <label>modm::I2cTransaction</label>
        <link refid="classmodm_1_1_i2c_transaction"/>
        <childnode refid="1311" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1314">
        <label>modm::I2cWriteTransaction</label>
        <link refid="classmodm_1_1_i2c_write_transaction"/>
        <childnode refid="1310" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1316">
        <label>modm::I2c</label>
        <link refid="structmodm_1_1_i2c"/>
      </node>
      <node id="1315">
        <label>modm::I2cTransaction</label>
        <link refid="classmodm_1_1_i2c_transaction"/>
        <childnode refid="1316" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" line="35" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/i2c_transaction.hpp" bodystart="34" bodyend="226"/>
    <listofallmembers>
      <member refid="classmodm_1_1_i2c_transaction_1aceabf617d6e44fde8d017def19546126" prot="protected" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>address</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a7fc4cc4f94f1c9f7093d1944815f6ed7" prot="public" virt="virtual"><scope>modm::I2cTransaction</scope><name>attaching</name></member>
      <member refid="structmodm_1_1_i2c_1acc3232e086891a4564399117a4e0e450" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>ConfigurationHandler</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1ae65bb90084e80349ca3b045b5dee386d" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>configurePing</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a5d84d47e257b81ddb3f7856bb2828c32" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>configureRead</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a2cfa7b1089b48079716d99c5d1ee328d" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>configureWrite</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1aa8cc37212d9b105bce2686c19cc501ab" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>configureWriteRead</name></member>
      <member refid="structmodm_1_1_i2c_1a0406997126d064926cdb512911a17dcd" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>DetachCause</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a2729b9db6395b87b2404084a5a929d39" prot="public" virt="virtual"><scope>modm::I2cTransaction</scope><name>detaching</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a3d8a51e219912d01250e2bb732d4b227" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>getState</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a36767dc9db6bd682fd8348f402745263" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>I2cTransaction</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a5ebc6259434dc6e279a633eff1020089" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>isBusy</name></member>
      <member refid="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ad" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>Operation</name></member>
      <member refid="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>OperationAfterRead</name></member>
      <member refid="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350d" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>OperationAfterStart</name></member>
      <member refid="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbb" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>OperationAfterWrite</name></member>
      <member refid="structmodm_1_1_i2c_1af314fb0ec2e32a25c17cf9f0a54447ee" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>Read</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1ac013d2f70ccc9fd8bbfdc87b842aabb0" prot="public" virt="pure-virtual"><scope>modm::I2cTransaction</scope><name>reading</name></member>
      <member refid="structmodm_1_1_i2c_1a1855002ad6a0992e32db4f3ebf0432da" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>resetDevices</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a04c0fbb865231d5263f4499ff6a7daeb" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>setAddress</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a974f8a0785065703157b9c93984ebd6a" prot="public" virt="pure-virtual"><scope>modm::I2cTransaction</scope><name>starting</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1ae0568bb0ae518843c5642da840867805" prot="protected" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>state</name></member>
      <member refid="structmodm_1_1_i2c_1a0ba607aa36d2c6c1e5f3ddd9a969c713" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>TransactionState</name></member>
      <member refid="structmodm_1_1_i2c_1a1f77408aecf63279f7c085d8c3692681" prot="public" virt="non-virtual"><scope>modm::I2cTransaction</scope><name>Write</name></member>
      <member refid="classmodm_1_1_i2c_transaction_1a228135661dcee84d62f22715122551cf" prot="public" virt="pure-virtual"><scope>modm::I2cTransaction</scope><name>writing</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
