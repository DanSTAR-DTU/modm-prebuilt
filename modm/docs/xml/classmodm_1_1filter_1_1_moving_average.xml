<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1filter_1_1_moving_average" kind="class" language="C++" prot="public">
    <compoundname>modm::filter::MovingAverage</compoundname>
    <includes refid="moving__average_8hpp" local="no">modm/math/filter/moving_average.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmodm_1_1filter_1_1_moving_average_1aac152428fb21ccd2e81091cef5e0aaf6" prot="private" static="no">
        <type>std::conditional_t&lt;(N &gt;=256), uint_fast16_t, uint_fast8_t &gt;</type>
        <definition>using modm::filter::MovingAverage&lt; T, N &gt;::Index =  std::conditional_t&lt; (N &gt;= 256), uint_fast16_t, uint_fast8_t &gt;</definition>
        <argsstring></argsstring>
        <name>Index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="61" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1filter_1_1_moving_average_1aae944b9a26b8af60c2fea9c1332a1f75" prot="private" static="no" mutable="no">
        <type>Index</type>
        <definition>Index modm::filter::MovingAverage&lt; T, N &gt;::index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="79" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1filter_1_1_moving_average_1a603581fb4b098159f67ab61740fd8658" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::filter::MovingAverage&lt; T, N &gt;::buffer[N]</definition>
        <argsstring>[N]</argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="80" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1filter_1_1_moving_average_1a4b85788d1d085e95a6edb90af1c367ee" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::filter::MovingAverage&lt; T, N &gt;::sum</definition>
        <argsstring></argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="81" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1filter_1_1_moving_average_1a7b5a208123e2c22f1c020406513805bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::filter::MovingAverage&lt; T, N &gt;::MovingAverage</definition>
        <argsstring>(const T &amp;initialValue=0)</argsstring>
        <name>MovingAverage</name>
        <param>
          <type>const T &amp;</type>
          <declname>initialValue</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="68" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1filter_1_1_moving_average_1af3fd8560a5fb6f1dd89ecd39d1b77ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::filter::MovingAverage&lt; T, N &gt;::update</definition>
        <argsstring>(const T &amp;input)</argsstring>
        <name>update</name>
        <param>
          <type>const T &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Append new value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="72" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="100" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1filter_1_1_moving_average_1a4dbaa1fb9e750bcb4157502d044ae4d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T</type>
        <definition>const T modm::filter::MovingAverage&lt; T, N &gt;::getValue</definition>
        <argsstring>() const</argsstring>
        <name>getValue</name>
        <briefdescription>
<para>Get filtered value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="76" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Moving average filter. </para>    </briefdescription>
    <detaileddescription>
<para>Calculates the average of N newest values, i.a. the sum of the last N values have been passed to update(...), divided by N. If less than N values have been passed to the filter, the division factor is still N, so missing values are assumed to be zero.</para><para>For integer types this implementation stores the current sum of all values in the buffer and updates this value with every call of <ref refid="classmodm_1_1filter_1_1_moving_average_1af3fd8560a5fb6f1dd89ecd39d1b77ae2" kindref="member">update()</ref> by subtracting the overwritten buffer index and adding the new one.</para><para>Due to numerical instabillity for floating value types, inside the update function the sum has to be recalculated making it less efficient.</para><para>The internal sum is always up to date and the <ref refid="classmodm_1_1filter_1_1_moving_average_1a4dbaa1fb9e750bcb4157502d044ae4d8" kindref="member">getValue()</ref> method consists of only one division.</para><para><simplesect kind="warning"><para>Input range is limited by the following equation <programlisting><codeline><highlight class="normal">N<sp/>*<sp/>input::maxValue<sp/>&lt;<sp/>T::maxValue<sp/></highlight></codeline>
</programlisting> The sum off the last N input values must not be greater than the maximum value of T, otherwise an overflow will occur.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Input type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples (maximum is 65356 or 2**16) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" line="59" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/math/filter/moving_average.hpp" bodystart="58" bodyend="82"/>
    <listofallmembers>
      <member refid="classmodm_1_1filter_1_1_moving_average_1a603581fb4b098159f67ab61740fd8658" prot="private" virt="non-virtual"><scope>modm::filter::MovingAverage</scope><name>buffer</name></member>
      <member refid="classmodm_1_1filter_1_1_moving_average_1a4dbaa1fb9e750bcb4157502d044ae4d8" prot="public" virt="non-virtual"><scope>modm::filter::MovingAverage</scope><name>getValue</name></member>
      <member refid="classmodm_1_1filter_1_1_moving_average_1aae944b9a26b8af60c2fea9c1332a1f75" prot="private" virt="non-virtual"><scope>modm::filter::MovingAverage</scope><name>index</name></member>
      <member refid="classmodm_1_1filter_1_1_moving_average_1aac152428fb21ccd2e81091cef5e0aaf6" prot="private" virt="non-virtual"><scope>modm::filter::MovingAverage</scope><name>Index</name></member>
      <member refid="classmodm_1_1filter_1_1_moving_average_1a7b5a208123e2c22f1c020406513805bd" prot="public" virt="non-virtual"><scope>modm::filter::MovingAverage</scope><name>MovingAverage</name></member>
      <member refid="classmodm_1_1filter_1_1_moving_average_1a4b85788d1d085e95a6edb90af1c367ee" prot="private" virt="non-virtual"><scope>modm::filter::MovingAverage</scope><name>sum</name></member>
      <member refid="classmodm_1_1filter_1_1_moving_average_1af3fd8560a5fb6f1dd89ecd39d1b77ae2" prot="public" virt="non-virtual"><scope>modm::filter::MovingAverage</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
