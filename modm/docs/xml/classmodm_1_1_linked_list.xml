<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_linked_list" kind="class" language="C++" prot="public">
    <compoundname>modm::LinkedList</compoundname>
    <includes refid="linked__list_8hpp" local="no">modm/container/linked_list.hpp</includes>
    <innerclass refid="classmodm_1_1_linked_list_1_1const__iterator" prot="public">modm::LinkedList::const_iterator</innerclass>
    <innerclass refid="classmodm_1_1_linked_list_1_1iterator" prot="public">modm::LinkedList::iterator</innerclass>
    <innerclass refid="structmodm_1_1_linked_list_1_1_node" prot="protected">modm::LinkedList::Node</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename Allocator</type>
        <defval><ref refid="classmodm_1_1allocator_1_1_dynamic" kindref="compound">allocator::Dynamic</ref>&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmodm_1_1_linked_list_1a14b86edd473ad65c2007b4ea355880e3" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t modm::LinkedList&lt; T, Allocator &gt;::Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="41" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classmodm_1_1_linked_list_1a63f9309b37146c64990b27df81cdd2b7" prot="protected" static="no">
        <type>Allocator::template rebind&lt; <ref refid="structmodm_1_1_linked_list_1_1_node" kindref="compound">Node</ref> &gt;::other</type>
        <definition>typedef Allocator::template rebind&lt; Node &gt;::other modm::LinkedList&lt; T, Allocator &gt;::NodeAllocator</definition>
        <argsstring></argsstring>
        <name>NodeAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="108" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmodm_1_1_linked_list_1a335fdf9c9dd43eb44b6a4c97c908f654" prot="protected" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_linked_list_1a63f9309b37146c64990b27df81cdd2b7" kindref="member">NodeAllocator</ref></type>
        <definition>NodeAllocator modm::LinkedList&lt; T, Allocator &gt;::nodeAllocator</definition>
        <argsstring></argsstring>
        <name>nodeAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="110" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_linked_list_1ae55e85c10056bfba5f1d67c50ca7e68c" prot="protected" static="no" mutable="no">
        <type><ref refid="structmodm_1_1_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* modm::LinkedList&lt; T, Allocator &gt;::front</definition>
        <argsstring></argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="112" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_linked_list_1a0c4c153009c49d2cd98fdae2df801edf" prot="protected" static="no" mutable="no">
        <type><ref refid="structmodm_1_1_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* modm::LinkedList&lt; T, Allocator &gt;::back</definition>
        <argsstring></argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="113" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmodm_1_1_linked_list_1ac220ce1c155db1ac44146c12d178056f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="226" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classmodm_1_1_linked_list_1a67171474c4da6cc8efe0c7fafefd2b2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="227" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a51446c9291b70ce9e9cee2e782aa1e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::LinkedList&lt; T, Allocator &gt;::LinkedList</definition>
        <argsstring>(const Allocator &amp;allocator=Allocator())</argsstring>
        <name>LinkedList</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a529667096170adcff06f2478f2a226c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::LinkedList&lt; T, Allocator &gt;::~LinkedList</definition>
        <argsstring>()</argsstring>
        <name>~LinkedList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a6fe30dfdcc3ece1a95d5c26870d59bfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::LinkedList&lt; T, Allocator &gt;::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>check if there are any nodes in the list </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a126931e67679ea98effaf43926de2340" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::LinkedList&lt; T, Allocator &gt;::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
<para>Get number of elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is slow because it has to iterate through all elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a53979fadcfeb24e34a69c3c1e1c6ca91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::LinkedList&lt; T, Allocator &gt;::prepend</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>prepend</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert in front. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a5f17e901f6e16b96471bbc1b3b76b4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::LinkedList&lt; T, Allocator &gt;::append</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert at the end of the list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a83abb2836d6f29b07cb447143bced2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::LinkedList&lt; T, Allocator &gt;::removeFront</definition>
        <argsstring>()</argsstring>
        <name>removeFront</name>
        <briefdescription>
<para>Remove the first entry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1ab35d7d71fd18e537e8e4cf5c77f60dcd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::LinkedList&lt; T, Allocator &gt;::getFront</definition>
        <argsstring>() const</argsstring>
        <name>getFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the first node in the list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1ae78f420af7b430f5094dccb65b6b6327" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::LinkedList&lt; T, Allocator &gt;::getFront</definition>
        <argsstring>()</argsstring>
        <name>getFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a77c20d41c2b7f2b3665af54384f238e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::LinkedList&lt; T, Allocator &gt;::getBack</definition>
        <argsstring>() const</argsstring>
        <name>getBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last node in the list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a4a59253f7d6fda544748a37b7119258d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::LinkedList&lt; T, Allocator &gt;::getBack</definition>
        <argsstring>()</argsstring>
        <name>getBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1ab8bb67dfa85176d581f835504e9ba71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::LinkedList&lt; T, Allocator &gt;::removeAll</definition>
        <argsstring>()</argsstring>
        <name>removeAll</name>
        <briefdescription>
<para>Remove all elements form the list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a6cdccd688c4187f0cc9669dea3c00c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::LinkedList&lt; T, Allocator &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read/write iterator that points to the first element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a57097af329135867ad1ed7945309383e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::LinkedList&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read-only (constant) iterator that points to the first element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a44702c9dbefe6ad3bdfdc17cf60e421c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::LinkedList&lt; T, Allocator &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read/write iterator that points one past the last element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a3c1756e3332b9ba4f2af8e5e2a2ca26b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::LinkedList&lt; T, Allocator &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read-only (constant) iterator that points one past the last element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a72103f171a2c9023a1d7cc64283cba20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::LinkedList&lt; T, Allocator &gt;::remove</definition>
        <argsstring>(const iterator &amp;position)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Erase element. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a single element from the list container. This effectively reduces the list size by one, calling the element&apos;s destructor before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1aa27222f0bd44b4d806ed4b4b590ed1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::LinkedList&lt; T, Allocator &gt;::insert</definition>
        <argsstring>(const_iterator pos, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="223" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1_linked_list_1af6fad9a7998a815cd4c82c9c36ba6455" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::LinkedList&lt; T, Allocator &gt;::LinkedList</definition>
        <argsstring>(const LinkedList &amp;other)</argsstring>
        <name>LinkedList</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list" kindref="compound">LinkedList</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1a8fec415662da15aa0416342d648f004c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list" kindref="compound">LinkedList</ref> &amp;</type>
        <definition>LinkedList&amp; modm::LinkedList&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(const LinkedList &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list" kindref="compound">LinkedList</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="232" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Singly-linked list. </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>implementation</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of list entries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used for memory allocation. See classes from <ref refid="namespacemodm_1_1allocator" kindref="compound">modm::allocator</ref> namespace.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Fabian Greif </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1369">
        <label>T</label>
      </node>
      <node id="1367">
        <label>modm::LinkedList&lt; T, Allocator &gt;</label>
        <link refid="classmodm_1_1_linked_list"/>
        <childnode refid="1368" relation="usage">
          <edgelabel>front</edgelabel>
          <edgelabel>back</edgelabel>
        </childnode>
      </node>
      <node id="1368">
        <label>modm::LinkedList&lt; T, Allocator &gt;::Node</label>
        <link refid="structmodm_1_1_linked_list_1_1_node"/>
        <childnode refid="1368" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="1369" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="39" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="38" bodyend="233"/>
    <listofallmembers>
      <member refid="classmodm_1_1_linked_list_1a5f17e901f6e16b96471bbc1b3b76b4a2" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>append</name></member>
      <member refid="classmodm_1_1_linked_list_1a0c4c153009c49d2cd98fdae2df801edf" prot="protected" virt="non-virtual"><scope>modm::LinkedList</scope><name>back</name></member>
      <member refid="classmodm_1_1_linked_list_1a6cdccd688c4187f0cc9669dea3c00c66" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>begin</name></member>
      <member refid="classmodm_1_1_linked_list_1a57097af329135867ad1ed7945309383e" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>begin</name></member>
      <member refid="classmodm_1_1_linked_list_1ac220ce1c155db1ac44146c12d178056f" prot="private" virt="non-virtual"><scope>modm::LinkedList</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_linked_list_1a44702c9dbefe6ad3bdfdc17cf60e421c" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>end</name></member>
      <member refid="classmodm_1_1_linked_list_1a3c1756e3332b9ba4f2af8e5e2a2ca26b" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>end</name></member>
      <member refid="classmodm_1_1_linked_list_1ae55e85c10056bfba5f1d67c50ca7e68c" prot="protected" virt="non-virtual"><scope>modm::LinkedList</scope><name>front</name></member>
      <member refid="classmodm_1_1_linked_list_1a77c20d41c2b7f2b3665af54384f238e7" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>getBack</name></member>
      <member refid="classmodm_1_1_linked_list_1a4a59253f7d6fda544748a37b7119258d" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>getBack</name></member>
      <member refid="classmodm_1_1_linked_list_1ab35d7d71fd18e537e8e4cf5c77f60dcd" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>getFront</name></member>
      <member refid="classmodm_1_1_linked_list_1ae78f420af7b430f5094dccb65b6b6327" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>getFront</name></member>
      <member refid="classmodm_1_1_linked_list_1a126931e67679ea98effaf43926de2340" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>getSize</name></member>
      <member refid="classmodm_1_1_linked_list_1aa27222f0bd44b4d806ed4b4b590ed1ef" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>insert</name></member>
      <member refid="classmodm_1_1_linked_list_1a6fe30dfdcc3ece1a95d5c26870d59bfe" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>isEmpty</name></member>
      <member refid="classmodm_1_1_linked_list_1a67171474c4da6cc8efe0c7fafefd2b2d" prot="private" virt="non-virtual"><scope>modm::LinkedList</scope><name>iterator</name></member>
      <member refid="classmodm_1_1_linked_list_1a51446c9291b70ce9e9cee2e782aa1e3b" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>LinkedList</name></member>
      <member refid="classmodm_1_1_linked_list_1af6fad9a7998a815cd4c82c9c36ba6455" prot="private" virt="non-virtual"><scope>modm::LinkedList</scope><name>LinkedList</name></member>
      <member refid="classmodm_1_1_linked_list_1a63f9309b37146c64990b27df81cdd2b7" prot="protected" virt="non-virtual"><scope>modm::LinkedList</scope><name>NodeAllocator</name></member>
      <member refid="classmodm_1_1_linked_list_1a335fdf9c9dd43eb44b6a4c97c908f654" prot="protected" virt="non-virtual"><scope>modm::LinkedList</scope><name>nodeAllocator</name></member>
      <member refid="classmodm_1_1_linked_list_1a8fec415662da15aa0416342d648f004c" prot="private" virt="non-virtual"><scope>modm::LinkedList</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_linked_list_1a53979fadcfeb24e34a69c3c1e1c6ca91" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>prepend</name></member>
      <member refid="classmodm_1_1_linked_list_1a72103f171a2c9023a1d7cc64283cba20" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>remove</name></member>
      <member refid="classmodm_1_1_linked_list_1ab8bb67dfa85176d581f835504e9ba71f" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>removeAll</name></member>
      <member refid="classmodm_1_1_linked_list_1a83abb2836d6f29b07cb447143bced2a7" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>removeFront</name></member>
      <member refid="classmodm_1_1_linked_list_1a14b86edd473ad65c2007b4ea355880e3" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>Size</name></member>
      <member refid="classmodm_1_1_linked_list_1a529667096170adcff06f2478f2a226c5" prot="public" virt="non-virtual"><scope>modm::LinkedList</scope><name>~LinkedList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
