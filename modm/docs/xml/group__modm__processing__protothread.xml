<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__modm__processing__protothread" kind="group">
    <compoundname>modm_processing_protothread</compoundname>
    <title>Protothreads</title>
    <innerclass refid="classmodm_1_1pt_1_1_protothread" prot="public">modm::pt::Protothread</innerclass>
    <innerclass refid="classmodm_1_1pt_1_1_semaphore" prot="public">modm::pt::Semaphore</innerclass>
    <innernamespace refid="namespacemodm_1_1pt">modm::pt</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="define" id="group__modm__processing__protothread_1ga6da3471eb116970eb1dce79bfcc7cd3e" prot="public" static="no">
        <name>PT_BEGIN</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declare start of protothread</para><para><simplesect kind="warning"><para>Use at start of the run() implementation! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="28" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1ga146c4bb0e1f9f2020cd12b8dd7ff076e" prot="public" static="no">
        <name>PT_END</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop protothread and end it</para><para><simplesect kind="warning"><para>Use at end of the run() implementation! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="38" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1ga7593fae8873b594580319c407dd81ad6" prot="public" static="no">
        <name>PT_YIELD</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yield protothread till next call to its run(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="46" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1ga3b5d03ed0a607155806a4f5f7a6570b2" prot="public" static="no">
        <name>PT_WAIT_WHILE</name>
        <param><defname>condition</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cause protothread to wait <bold>while</bold> given condition is true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="55" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1ga742a4c6aa99440473f54651233ebd28b" prot="public" static="no">
        <name>PT_WAIT_UNTIL</name>
        <param><defname>condition</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cause protothread to wait <bold>until</bold> given condition is true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="66" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1ga62b66f563af59f459841f9cfe42b5496" prot="public" static="no">
        <name>PT_WAIT_THREAD</name>
        <param><defname>child</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cause protothread to wait until given child protothread completes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="71" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1ga74af1993d763f937b2282d27dc23349a" prot="public" static="no">
        <name>PT_SPAWN</name>
        <param><defname>child</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restart and spawn given child protothread and wait until it completes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="75" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1gaeb2e9a2948001a68950eb6d8b26f0dbd" prot="public" static="no">
        <name>PT_CALL</name>
        <param><defname>resumable</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls a given resumable function and returns whether it completed successfully or not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="87" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1ga0c880659ee8887e4fa796017599bc022" prot="public" static="no">
        <name>PT_RESTART</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset protothread to start from the beginning</para><para>In the next executing cycle the protothread will restart its execution at its PT_BEGIN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="106" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modm__processing__protothread_1gaff926c0a76940ee9862be03f69605257" prot="public" static="no">
        <name>PT_EXIT</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop and exit from protothread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" line="114" column="9" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/macros.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Protothreads are extremely lightweight stackless threads designed for severely memory constrained systems, such as small embedded systems or wireless sensor network nodes. Protothreads provide linear code execution for event-driven systems implemented in C. Protothreads can be used with or without an underlying operating system to provide blocking event-handlers.</para><para>Protothreads provide sequential flow of control without complex state machines or full multi-threading.</para><para>Since they implement some kind of cooperative multi-threading, Protothreads are non-preemptable. Therefore, a context switch can only take place on blocking operations, which means you don&apos;t need complex synchronization.</para><para>Protothreads are also stackless, so local variables are not preserved across context switches, and must instead become member variables of the <computeroutput>modm::Protothread</computeroutput> subclass</para><para>A protothread runs within a single function (<computeroutput>modm::Protothread::run()</computeroutput>) and cannot span over other functions. A protothread may call normal functions, but cannot block inside a called function. Blocking inside nested function calls is instead made by spawning a separate protothread for each potentially blocking function.</para><para>The protothread concept was developed by Adam Dunkels and Oliver Schmidt: <ulink url="http://dunkels.com/adam/pt">http://dunkels.com/adam/pt</ulink></para><para>Originally ported to C++ for use by Hamilton Jet (www.hamiltonjet.co.nz) by Ben Hoyt, but stripped down for public release.</para><para><heading level="2">Example</heading>
</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="protothread_8hpp" kindref="compound">modm/processing/protothread.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Led<sp/>=<sp/>GpioB0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BlinkingLight<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmodm_1_1pt_1_1_protothread" kindref="compound">modm::pt::Protothread</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>run()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modm__processing__protothread_1ga6da3471eb116970eb1dce79bfcc7cd3e" kindref="member">PT_BEGIN</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>everything<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Led::setOutput();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Led::set();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.restart(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Led::set();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modm__processing__protothread_1ga742a4c6aa99440473f54651233ebd28b" kindref="member">PT_WAIT_UNTIL</ref>(timeout.isExpired());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.restart(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Led::reset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modm__processing__protothread_1ga742a4c6aa99440473f54651233ebd28b" kindref="member">PT_WAIT_UNTIL</ref>(timeout.isExpired());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__modm__processing__protothread_1ga146c4bb0e1f9f2020cd12b8dd7ff076e" kindref="member">PT_END</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmodm_1_1_generic_timeout" kindref="compound">modm::ShortTimeout</ref><sp/>timeout;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">BlinkingLight<sp/>light;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>light.run();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
