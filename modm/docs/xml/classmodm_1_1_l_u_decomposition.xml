<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_l_u_decomposition" kind="class" language="C++" prot="public">
    <compoundname>modm::LUDecomposition</compoundname>
    <includes refid="lu__decomposition_8hpp" local="no">modm/math/lu_decomposition.hpp</includes>
    <innerclass refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition" prot="private">modm::LUDecomposition::LUSubDecomposition</innerclass>
    <innerclass refid="classmodm_1_1_l_u_decomposition_1_1_l_u_sub_decomposition_3_01_t_00_01_o_f_f_s_e_t_00_01_w_i_d_t_h_00_01_o_f_f_s_e_t_01_4" prot="private">modm::LUDecomposition::LUSubDecomposition&lt; T, OFFSET, WIDTH, OFFSET &gt;</innerclass>
    <innerclass refid="classmodm_1_1_l_u_decomposition_1_1_row_operation" prot="private">modm::LUDecomposition::RowOperation</innerclass>
    <innerclass refid="classmodm_1_1_l_u_decomposition_1_1_row_operation_3_01_t_00_010_01_4" prot="private">modm::LUDecomposition::RowOperation&lt; T, 0 &gt;</innerclass>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1a4e8b8943109016c73821766e8d4873c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::decompose</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;matrix, Matrix&lt; T, N, N &gt; *l, Matrix&lt; T, N, N &gt; *u)</argsstring>
        <name>decompose</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; *</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; *</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1ae9efab8e90f2600e7b0a475a0d4da9aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::decompose</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;matrix, Matrix&lt; T, N, N &gt; *l, Matrix&lt; T, N, N &gt; *u, Matrix&lt; T, N, N &gt; *p)</argsstring>
        <name>decompose</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; *</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; *</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1a34949b9e7bb0b81b10d543d4bdb48686" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::decompose</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;matrix, Matrix&lt; T, N, N &gt; *l, Matrix&lt; T, N, N &gt; *u, Vector&lt; int8_t, N &gt; *p)</argsstring>
        <name>decompose</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; *</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; *</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; int8_t, N &gt; *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1a217ba063787305709c703c32a8988633" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>BXWIDTH</declname>
            <defname>BXWIDTH</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::solve</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;l, const Matrix&lt; T, N, N &gt; &amp;u, Matrix&lt; T, N, BXWIDTH &gt; *xb)</argsstring>
        <name>solve</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, BXWIDTH &gt; *</type>
          <declname>xb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_l_u_decomposition_1a021f58d58533a3bad044cc7834e6b668" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>BXWIDTH</declname>
            <defname>BXWIDTH</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool modm::LUDecomposition::solve</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;A, Matrix&lt; T, N, BXWIDTH &gt; *xb)</argsstring>
        <name>solve</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, N, BXWIDTH &gt; *</type>
          <declname>xb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="71" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for decomposing matrices. </para>    </briefdescription>
    <detaileddescription>
<para>Factorise a matrix A into an L(ower) and U(pper) matrix such that A = L*U or P*A = L*U where P is a pivot matrix (changes the row order).</para><para>Adapted from the implementation of Gaspard Petit (<ulink url="mailto:gaspardpetit@gmail.com">gaspardpetit@gmail.com</ulink>).</para><para><simplesect kind="see"><para>&lt;a href&quot;http://www-etud.iro.umontreal.ca/~petitg/cpp/ludecomposition.html&quot;&gt;Homepage</para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" line="40" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/lu_decomposition.hpp" bodystart="39" bodyend="170"/>
    <listofallmembers>
      <member refid="classmodm_1_1_l_u_decomposition_1a4e8b8943109016c73821766e8d4873c1" prot="public" virt="non-virtual"><scope>modm::LUDecomposition</scope><name>decompose</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1ae9efab8e90f2600e7b0a475a0d4da9aa" prot="public" virt="non-virtual"><scope>modm::LUDecomposition</scope><name>decompose</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1a34949b9e7bb0b81b10d543d4bdb48686" prot="public" virt="non-virtual"><scope>modm::LUDecomposition</scope><name>decompose</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1a217ba063787305709c703c32a8988633" prot="public" virt="non-virtual"><scope>modm::LUDecomposition</scope><name>solve</name></member>
      <member refid="classmodm_1_1_l_u_decomposition_1a021f58d58533a3bad044cc7834e6b668" prot="public" virt="non-virtual"><scope>modm::LUDecomposition</scope><name>solve</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
