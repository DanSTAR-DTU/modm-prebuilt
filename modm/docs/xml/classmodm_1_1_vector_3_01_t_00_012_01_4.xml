<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_vector_3_01_t_00_012_01_4" kind="class" language="C++" prot="public">
    <compoundname>modm::Vector&lt; T, 2 &gt;</compoundname>
    <includes refid="vector2_8hpp" local="no">modm/math/geometry/vector2.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab29b0c8baba82b9aa1baaa56b95fcc46" prot="public" static="no">
        <type><ref refid="structmodm_1_1_geometric_traits" kindref="compound">GeometricTraits</ref>&lt; T &gt;::<ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab29b0c8baba82b9aa1baaa56b95fcc46" kindref="member">WideType</ref></type>
        <definition>typedef GeometricTraits&lt;T&gt;::WideType modm::Vector&lt; T, 2 &gt;::WideType</definition>
        <argsstring></argsstring>
        <name>WideType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="61" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a508d9ffd289fb85722ddcfd0aeefee8d" prot="public" static="no">
        <type><ref refid="structmodm_1_1_geometric_traits" kindref="compound">GeometricTraits</ref>&lt; T &gt;::<ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a508d9ffd289fb85722ddcfd0aeefee8d" kindref="member">FloatType</ref></type>
        <definition>typedef GeometricTraits&lt;T&gt;::FloatType modm::Vector&lt; T, 2 &gt;::FloatType</definition>
        <argsstring></argsstring>
        <name>FloatType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="62" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a7e18724c3ea45e98c437d474c3fe725e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Location2D&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name>Location2D&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="378" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1aed86d4e7055e5e2247952cba3f905f6e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; operator&lt;&lt;</definition>
        <argsstring>(IOStream &amp;os, const Vector&lt; U, 2 &gt; &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Stream operator for <bold>modm::Vector&lt;U, 2&gt;</bold> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="305" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1aefd21149e400d47cc32c97a1b85ef59d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; U, 2 &gt;</type>
        <definition>Vector&lt;U, 2&gt; operator*</definition>
        <argsstring>(float scale, const Vector&lt; U, 2 &gt; &amp;vector)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="310" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a36665ed75dd0834ca612fd04c778f287" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 2 &gt;::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="300" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a4363ae5effcf56c4e78f330601f09fbc" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 2 &gt;::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="301" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a188d4315c297f982e4da4f37eb91792d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
<para>Default-Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> with coordinates (0, 0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae4955e4dd55725bb101358efa515244e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>(const T &amp;inX, const T &amp;inY)</argsstring>
        <name>Vector</name>
        <param>
          <type>const T &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a695305af84674dfcc656c6a1e2386a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 1 &gt; &amp;inX, const Vector&lt; T, 1 &gt; &amp;inY)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ad0dd38fba34c32283b81cbe4576e6f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>(const T &amp;inX, const Vector&lt; T, 1 &gt; &amp;inY)</argsstring>
        <name>Vector</name>
        <param>
          <type>const T &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a165eab6e8d8dab71b6ce4c9204a4728b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T, 1 &gt; &amp;inX, const T &amp;inY)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>inX</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>inY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1af429b5d120589dbd6fdce21d38597301" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>(T inVal)</argsstring>
        <name>Vector</name>
        <param>
          <type>T</type>
          <declname>inVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ad007874bf5e609d184a5a7488bbe8bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>(const Matrix&lt; T, 2, 1 &gt; &amp;rhs)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 2, 1 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9083b8221a214594aec037a1fbb0e056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Vector&lt; T, 2 &gt;::Vector</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1aa94eb9e901c090bba95562db320f009e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 2 &gt;::setX</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>setX</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9151b97a2ea8de0a0a1fe1f42b4c5854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 2 &gt;::setY</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>setY</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9f533d53039f0f70cc604b13d85d3aab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Vector&lt; T, 2 &gt;::set</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>set</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a81498144fc42c80ccedc33c79c405a69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, 2 &gt;::getX</definition>
        <argsstring>() const</argsstring>
        <name>getX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0eee714f0f3efd786f7ae97b3ec6d55f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, 2 &gt;::getY</definition>
        <argsstring>() const</argsstring>
        <name>getY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a6ef277ea25b928f223c1c2de115946c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 2 &gt;::getLength</definition>
        <argsstring>() const</argsstring>
        <name>getLength</name>
        <briefdescription>
<para>Calculate length of the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a534f9317237ca236d6cef7d8c3e2b036" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab29b0c8baba82b9aa1baaa56b95fcc46" kindref="member">WideType</ref></type>
        <definition>WideType modm::Vector&lt; T, 2 &gt;::getLengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>getLengthSquared</name>
        <briefdescription>
<para>Calculate squared length of the vector. </para>        </briefdescription>
        <detaileddescription>
<para>This method is considerably faster than <ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a6ef277ea25b928f223c1c2de115946c0" kindref="member">getLength()</ref> because it doesn&apos;t need to calculate the square root.</para><para><simplesect kind="return"><para>squared length (x*x + y*y) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1aa052d26cbc46253ead8b4b566f30d8e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float modm::Vector&lt; T, 2 &gt;::getAngle</definition>
        <argsstring>() const</argsstring>
        <name>getAngle</name>
        <briefdescription>
<para>Calculate the absolute angle. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">atan2(y,<sp/>x)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a7f713c73214b86f10231b2c429100d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
<para>Normalize length to 1. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is only useful if T is a floating point type. For integer types the result might be wrong! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a38a971aa49885f774e835ef69aeee40b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::normalized</definition>
        <argsstring>() const</argsstring>
        <name>normalized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae2c1827c867fb86a7be22bd1cea50c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::scale</definition>
        <argsstring>(float length)</argsstring>
        <name>scale</name>
        <param>
          <type>float</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Scale the vector to <computeroutput>length</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a865167d0e8725f62ba05bd9c39876413" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::scaled</definition>
        <argsstring>(float length) const</argsstring>
        <name>scaled</name>
        <param>
          <type>float</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a8a914c976ecb720b087c1cde4e672b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::rotate</definition>
        <argsstring>(float phi)</argsstring>
        <name>rotate</name>
        <param>
          <type>float</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a3322a80be1eff7d0593e4421969492a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::translate</definition>
        <argsstring>(const Vector &amp;vector)</argsstring>
        <name>translate</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Move the point in x and y direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab8758196fdbf2edca28af2b7a6874c63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab29b0c8baba82b9aa1baaa56b95fcc46" kindref="member">WideType</ref></type>
        <definition>WideType modm::Vector&lt; T, 2 &gt;::getDistanceTo</definition>
        <argsstring>(const Vector &amp;other) const</argsstring>
        <name>getDistanceTo</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0fefa9a014952a132af066c50036d5e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float modm::Vector&lt; T, 2 &gt;::getAngleTo</definition>
        <argsstring>(const Vector &amp;other) const</argsstring>
        <name>getAngleTo</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a789f9cd802e5169272a9604a54048592" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab29b0c8baba82b9aa1baaa56b95fcc46" kindref="member">WideType</ref></type>
        <definition>WideType modm::Vector&lt; T, 2 &gt;::dot</definition>
        <argsstring>(const Vector &amp;other) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculate the dot-product. </para>        </briefdescription>
        <detaileddescription>
<para>Also known as the scalar product.</para><para><programlisting><codeline><highlight class="normal">this.x<sp/>*<sp/>other.x<sp/>+<sp/>this.y<sp/>*<sp/>other.y</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a2a3a1242db32e6c3ef73ae7f92b402db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab29b0c8baba82b9aa1baaa56b95fcc46" kindref="member">WideType</ref></type>
        <definition>WideType modm::Vector&lt; T, 2 &gt;::cross</definition>
        <argsstring>(const Vector &amp;other) const</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculate the cross-product. </para>        </briefdescription>
        <detaileddescription>
<para>In 2D there is no clear definition of this operation.</para><para>This implementation is the most common one and will return the magnitude of the vector that would result from a regular 3D cross product of the input vectors, taking their Z values implicitly as 0 (i.e. treating the 2D space as a plane in the 3D space). The 3D cross product will be perpendicular to that plane, and thus have 0 X &amp; Y components (thus the scalar returned is the Z value of the 3D cross product vector).</para><para><programlisting><codeline><highlight class="normal">this.x<sp/>*<sp/>other.y<sp/>-<sp/>this.y<sp/>*<sp/>other.x</highlight></codeline>
</programlisting></para><para>Other implementations take no arguments and returns a vector perpendicular to the input vector. This can be reached with the <ref refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a66038b7d836b5a1c726e54879c73881c" kindref="member">toOrthogonalVector()</ref> method, which returns a perpendicular copy of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a64f182722705e332b118d6513405bcc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref>&lt; U, 2 &gt;</type>
        <definition>Vector&lt;U, 2&gt; modm::Vector&lt; T, 2 &gt;::convert</definition>
        <argsstring>() const</argsstring>
        <name>convert</name>
        <briefdescription>
<para>Convert between Point-objects with different base-types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a66038b7d836b5a1c726e54879c73881c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::toOrthogonalVector</definition>
        <argsstring>() const</argsstring>
        <name>toOrthogonalVector</name>
        <briefdescription>
<para>Returns a perpendicular copy of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(y, -x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0e15fcc37f1146b780aa70914d8c4e40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::perpendicular</definition>
        <argsstring>() const</argsstring>
        <name>perpendicular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a477bdc1ade5e4561262b9ddb5d01412d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::operator=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ac38e4bd4455282b1a536c3627e20ad78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::operator=</definition>
        <argsstring>(const Matrix&lt; T, 2, 1 &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 2, 1 &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1afc0c388befc5910e5ca76a14ddf1689d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::operator==</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1acd5148422d1fa82c82a7ed6338a5ee91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::operator!=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a86e9698be1f465d392e7a9ce527d8712" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::operator&lt;</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1aa8f3a4a4a7fbd9c1d8ad532866f0dfdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::operator&lt;=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a5cf20aaf5d7c898df1d58bc06e8c1e5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::operator&gt;</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0f2321f528f7b2ba24c9dbf7bbc7e960" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::operator&gt;=</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9f32c2ecc53c6729bab1dc7cf6cb80bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::Vector&lt; T, 2 &gt;::operator[]</definition>
        <argsstring>(uint8_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a579643692a90659b3341846c288b004e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::Vector&lt; T, 2 &gt;::operator[]</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a2ac29d82ea6172dcbf38b2c8de046825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* modm::Vector&lt; T, 2 &gt;::ptr</definition>
        <argsstring>()</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a37d3c9ba306624926b1f475d8f81fc11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* modm::Vector&lt; T, 2 &gt;::ptr</definition>
        <argsstring>() const</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ac7f3343650860dc88bf7e51d29ef34f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab90c9dfac680e2fe177eeed859242c9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::operator-</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1adcddf391981107c6c1b8575311ae3439" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::operator+</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a707e37ff9207b1af1b9db0e25853c2e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 2 &gt;::operator*</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1abb81c13a53872b51f7e38142c3a8fa27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Vector&lt; T, 2 &gt;::operator^</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a64a0b05540a435c4d58ee21b82311d46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::operator*</definition>
        <argsstring>(float rhs) const</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1abb099a1414246482704e63a60f5428a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref></type>
        <definition>Vector modm::Vector&lt; T, 2 &gt;::operator/</definition>
        <argsstring>(float rhs) const</argsstring>
        <name>operator/</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a61f4f99577e11b462b6577d53d72c718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::operator+=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae2b5402f05660aa22d732c8790edd1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::operator-=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a1c52fd88cced9a1eeff97c0f7f713a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::operator*=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a5c1f20cc1edb964ce589107f3c66f189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::operator/=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a1b00a0aeee1fff6613b1a52b9361f754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&amp; modm::Vector&lt; T, 2 &gt;::operator~</definition>
        <argsstring>()</argsstring>
        <name>operator~</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a01e7994db57b33a7d6acc50204b44d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 2, 1 &gt; &amp;</type>
        <definition>Matrix&lt;T, 2, 1&gt;&amp; modm::Vector&lt; T, 2 &gt;::asMatrix</definition>
        <argsstring>()</argsstring>
        <name>asMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a8a182126c1d108170c36da64c6987776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 2, 1 &gt; &amp;</type>
        <definition>const Matrix&lt;T, 2, 1&gt;&amp; modm::Vector&lt; T, 2 &gt;::asMatrix</definition>
        <argsstring>() const</argsstring>
        <name>asMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1af145b0f9c0ca4f5fd08b55ca4c893d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, 2 &gt; &amp;</type>
        <definition>Matrix&lt;T, 1, 2&gt;&amp; modm::Vector&lt; T, 2 &gt;::asTransposedMatrix</definition>
        <argsstring>()</argsstring>
        <name>asTransposedMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a70783fbf5376efee30f2cda1191b4603" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, 2 &gt; &amp;</type>
        <definition>const Matrix&lt;T, 1, 2&gt;&amp; modm::Vector&lt; T, 2 &gt;::asTransposedMatrix</definition>
        <argsstring>() const</argsstring>
        <name>asTransposedMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae881e8a6957a281e05c0b6a8b84e868d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::hasNan</definition>
        <argsstring>() const</argsstring>
        <name>hasNan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a4ba556f599c69878eb6c09b6b799db9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Vector&lt; T, 2 &gt;::hasInf</definition>
        <argsstring>() const</argsstring>
        <name>hasInf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="277" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_vector_3_01_t_00_012_01_4_1a4aaac8fa63b8a3c66376a1640a113391" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast8_t</type>
        <definition>static int_fast8_t modm::Vector&lt; T, 2 &gt;::ccw</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b, const Vector &amp;c)</argsstring>
        <name>ccw</name>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Check if three points are in a counter-clock wise direction. </para>        </briefdescription>
        <detaileddescription>
<para>Check if we move counter-clock wise if we move from the first point to the second and the third.</para><para>If all three points are in a line there are three possibilities: 1) strait line: third point behind the second (returns 1) 2) last point between the other two (returns 0) 3) third point before the first one (returns -1)</para><para>This definition is useful for inclusion or intersection testing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="232" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for handling common vector operations (2D) </para>    </briefdescription>
    <detaileddescription>
<para>Operations: <programlisting><codeline><highlight class="normal">+<sp/>:<sp/>addition<sp/>of<sp/>points</highlight></codeline>
<codeline><highlight class="normal">-<sp/>:<sp/>different<sp/>of<sp/>points</highlight></codeline>
<codeline><highlight class="normal">*<sp/>:<sp/>dot<sp/>product<sp/>or<sp/>scalar<sp/>multiplication</highlight></codeline>
<codeline><highlight class="normal">/<sp/>:<sp/>scalar<sp/>division</highlight></codeline>
<codeline><highlight class="normal">^<sp/>:<sp/>cross<sp/>product<sp/>(determinant)</highlight></codeline>
<codeline><highlight class="normal">~<sp/>:<sp/>perpendicular</highlight></codeline>
</programlisting></para><para>Adapted from the implementation of Gaspard Petit (<ulink url="mailto:gaspardpetit@gmail.com">gaspardpetit@gmail.com</ulink>) and heavily modified.</para><para><simplesect kind="see"><para>&lt;a href&quot;http://www-etud.iro.umontreal.ca/~petitg/cpp/point.html&quot;&gt;Homepage</para></simplesect>
<simplesect kind="author"><para>Fabian Greif </para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="1820">
        <label>T</label>
      </node>
      <node id="1819">
        <label>modm::Vector&lt; T, 2 &gt;</label>
        <link refid="classmodm_1_1_vector_3_01_t_00_012_01_4"/>
        <childnode refid="1820" relation="usage">
          <edgelabel>x</edgelabel>
          <edgelabel>y</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" line="57" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/math/geometry/vector2.hpp" bodystart="56" bodyend="311"/>
    <listofallmembers>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a01e7994db57b33a7d6acc50204b44d57" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>asMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a8a182126c1d108170c36da64c6987776" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>asMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1af145b0f9c0ca4f5fd08b55ca4c893d44" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>asTransposedMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a70783fbf5376efee30f2cda1191b4603" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>asTransposedMatrix</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a4aaac8fa63b8a3c66376a1640a113391" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>ccw</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a64f182722705e332b118d6513405bcc5" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>convert</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a2a3a1242db32e6c3ef73ae7f92b402db" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>cross</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a789f9cd802e5169272a9604a54048592" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>dot</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a508d9ffd289fb85722ddcfd0aeefee8d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>FloatType</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1aa052d26cbc46253ead8b4b566f30d8e4" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>getAngle</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0fefa9a014952a132af066c50036d5e6" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>getAngleTo</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab8758196fdbf2edca28af2b7a6874c63" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>getDistanceTo</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a6ef277ea25b928f223c1c2de115946c0" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>getLength</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a534f9317237ca236d6cef7d8c3e2b036" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>getLengthSquared</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a81498144fc42c80ccedc33c79c405a69" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>getX</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0eee714f0f3efd786f7ae97b3ec6d55f" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>getY</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a4ba556f599c69878eb6c09b6b799db9b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>hasInf</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae881e8a6957a281e05c0b6a8b84e868d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>hasNan</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a7e18724c3ea45e98c437d474c3fe725e" prot="private" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Location2D&lt; T &gt;</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a7f713c73214b86f10231b2c429100d3d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>normalize</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a38a971aa49885f774e835ef69aeee40b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>normalized</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1acd5148422d1fa82c82a7ed6338a5ee91" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator!=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a707e37ff9207b1af1b9db0e25853c2e7" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator*</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a64a0b05540a435c4d58ee21b82311d46" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator*</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1aefd21149e400d47cc32c97a1b85ef59d" prot="protected" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator*</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a1c52fd88cced9a1eeff97c0f7f713a82" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator*=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1adcddf391981107c6c1b8575311ae3439" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator+</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a61f4f99577e11b462b6577d53d72c718" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator+=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ac7f3343650860dc88bf7e51d29ef34f3" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator-</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab90c9dfac680e2fe177eeed859242c9b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator-</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae2b5402f05660aa22d732c8790edd1ab" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator-=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1abb099a1414246482704e63a60f5428a8" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator/</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a5c1f20cc1edb964ce589107f3c66f189" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator/=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a86e9698be1f465d392e7a9ce527d8712" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator&lt;</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1aed86d4e7055e5e2247952cba3f905f6e" prot="protected" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1aa8f3a4a4a7fbd9c1d8ad532866f0dfdc" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator&lt;=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a477bdc1ade5e4561262b9ddb5d01412d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ac38e4bd4455282b1a536c3627e20ad78" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1afc0c388befc5910e5ca76a14ddf1689d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator==</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a5cf20aaf5d7c898df1d58bc06e8c1e5b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator&gt;</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0f2321f528f7b2ba24c9dbf7bbc7e960" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator&gt;=</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9f32c2ecc53c6729bab1dc7cf6cb80bd" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator[]</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a579643692a90659b3341846c288b004e" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator[]</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1abb81c13a53872b51f7e38142c3a8fa27" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator^</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a1b00a0aeee1fff6613b1a52b9361f754" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>operator~</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a0e15fcc37f1146b780aa70914d8c4e40" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>perpendicular</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a2ac29d82ea6172dcbf38b2c8de046825" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a37d3c9ba306624926b1f475d8f81fc11" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a8a914c976ecb720b087c1cde4e672b78" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>rotate</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae2c1827c867fb86a7be22bd1cea50c86" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>scale</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a865167d0e8725f62ba05bd9c39876413" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>scaled</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9f533d53039f0f70cc604b13d85d3aab" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>set</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1aa94eb9e901c090bba95562db320f009e" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>setX</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9151b97a2ea8de0a0a1fe1f42b4c5854" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>setY</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a66038b7d836b5a1c726e54879c73881c" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>toOrthogonalVector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a3322a80be1eff7d0593e4421969492a6" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>translate</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a188d4315c297f982e4da4f37eb91792d" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ae4955e4dd55725bb101358efa515244e" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a695305af84674dfcc656c6a1e2386a00" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ad0dd38fba34c32283b81cbe4576e6f85" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a165eab6e8d8dab71b6ce4c9204a4728b" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1af429b5d120589dbd6fdce21d38597301" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ad007874bf5e609d184a5a7488bbe8bee" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a9083b8221a214594aec037a1fbb0e056" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>Vector</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1ab29b0c8baba82b9aa1baaa56b95fcc46" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>WideType</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a36665ed75dd0834ca612fd04c778f287" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>x</name></member>
      <member refid="classmodm_1_1_vector_3_01_t_00_012_01_4_1a4363ae5effcf56c4e78f330601f09fbc" prot="public" virt="non-virtual"><scope>modm::Vector&lt; T, 2 &gt;</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
