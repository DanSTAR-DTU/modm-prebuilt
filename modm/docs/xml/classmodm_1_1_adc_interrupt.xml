<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_adc_interrupt" kind="class" language="C++" prot="public">
    <compoundname>modm::AdcInterrupt</compoundname>
    <basecompoundref refid="classmodm_1_1_adc" prot="public" virt="non-virtual">modm::Adc</basecompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_adc_interrupt1" prot="public" virt="non-virtual">modm::platform::AdcInterrupt1</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_adc_interrupt2" prot="public" virt="non-virtual">modm::platform::AdcInterrupt2</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_adc_interrupt3" prot="public" virt="non-virtual">modm::platform::AdcInterrupt3</derivedcompoundref>
    <includes refid="adc__interrupt_8hpp" local="no">modm/architecture/interface/adc_interrupt.hpp</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classmodm_1_1_adc_interrupt_1af82ca0cd5901c58c2ec7e9a63cef8803" prot="protected" static="no">
        <type>void(*</type>
        <definition>typedef void(* modm::AdcInterrupt::Handler) ()</definition>
        <argsstring>)()</argsstring>
        <name>Handler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/adc_interrupt.hpp" line="52" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/adc_interrupt.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_adc_interrupt_1ac6499e1da71c84be0d10c9c107939a97" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::AdcInterrupt::attachInterruptHandler</definition>
        <argsstring>(Handler handler=modm::dummy)</argsstring>
        <name>attachInterruptHandler</name>
        <param>
          <type><ref refid="classmodm_1_1_adc_interrupt_1af82ca0cd5901c58c2ec7e9a63cef8803" kindref="member">Handler</ref></type>
          <declname>handler</declname>
          <defval><ref refid="group__modm__utils_1gac9a2e3b1c445ec26b3a24543db1731dc" kindref="member">modm::dummy</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/adc_interrupt.hpp" line="56" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Basic interrupt-based interface of an ADC.</para><para>This class allows you to attach functions to the ADC Conversion Complete Interrupt via function pointers. Be aware however, that this implementation is slower and requires more resources than writing the function code directly into the interrupt service routines.</para><para>This interface allows for asynchronous operation: <programlisting><codeline><highlight class="normal">void<sp/>interruptComplete()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>value<sp/>=<sp/>Adc::getValue();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AdcInterrupt::attachConversionCompleteInterrupt(interruptComplete);</highlight></codeline>
<codeline><highlight class="normal">AdcInterrupt::enableInterrupt();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>start<sp/>a<sp/>new<sp/>conversion<sp/>on<sp/>channel<sp/>3</highlight></codeline>
<codeline><highlight class="normal">AdcInterrupt::setChannel(3);</highlight></codeline>
<codeline><highlight class="normal">AdcInterrupt::startConversion();</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classmodm_1_1_adc" kindref="compound">Adc</ref> for the synchronous method.</para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="33">
        <label>modm::Adc</label>
        <link refid="classmodm_1_1_adc"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>modm::AdcInterrupt</label>
        <link refid="classmodm_1_1_adc_interrupt"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
      <node id="35">
        <label>modm::platform::AdcInterrupt1</label>
        <link refid="classmodm_1_1platform_1_1_adc_interrupt1"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>modm::platform::AdcInterrupt2</label>
        <link refid="classmodm_1_1platform_1_1_adc_interrupt2"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>modm::platform::AdcInterrupt3</label>
        <link refid="classmodm_1_1platform_1_1_adc_interrupt3"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="39">
        <label>modm::Adc</label>
        <link refid="classmodm_1_1_adc"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>modm::AdcInterrupt</label>
        <link refid="classmodm_1_1_adc_interrupt"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/adc_interrupt.hpp" line="50" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/adc_interrupt.hpp" bodystart="49" bodyend="58"/>
    <listofallmembers>
      <member refid="classmodm_1_1_peripheral_driver_1a5c336ff9889c347e7eadb810bf984ebd" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>assertBaudrateInTolerance</name></member>
      <member refid="classmodm_1_1_adc_interrupt_1ac6499e1da71c84be0d10c9c107939a97" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>attachInterruptHandler</name></member>
      <member refid="classmodm_1_1_adc_1a80cfcf935b9394cac0c5fd0ddeffb06a" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>Channel</name></member>
      <member refid="classmodm_1_1_adc_1a61ce9408d2a7bfb4403c0cfba4b4a78f" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>connect</name></member>
      <member refid="classmodm_1_1_adc_1a6ba3015dc93d654adc29ae274c851fd2" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>disable</name></member>
      <member refid="classmodm_1_1_adc_1a90e4e9b0d02be1d9bdfb02ebe445a037" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>disableFreeRunningMode</name></member>
      <member refid="classmodm_1_1_adc_1a1656c2726ea0f707ddf6e6956859ecfa" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>enableFreeRunningMode</name></member>
      <member refid="classmodm_1_1_adc_1a4617f7d6e7b8885bf13ac8721cb2751f" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>getChannel</name></member>
      <member refid="classmodm_1_1_adc_1a5b3c7ad317985e35aa2b4b26a0083f43" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>getValue</name></member>
      <member refid="classmodm_1_1_adc_interrupt_1af82ca0cd5901c58c2ec7e9a63cef8803" prot="protected" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>Handler</name></member>
      <member refid="classmodm_1_1_adc_1a155f2716aee6988415cd32bcc2e2cb2e" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>initialize</name></member>
      <member refid="classmodm_1_1_adc_1aa8d528f16fdf07a7d730b8eb2fa757ce" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>isConversionFinished</name></member>
      <member refid="classmodm_1_1_adc_1a73bac09f02e8c10479f4d023c95f9570" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>readChannel</name></member>
      <member refid="classmodm_1_1_adc_1accb65726d97868bd953b204e6807a3f9" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>Resolution</name></member>
      <member refid="classmodm_1_1_adc_1a11367b26a7f631b73ef9fb3047b66240" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>setChannel</name></member>
      <member refid="classmodm_1_1_adc_1ae59dbc75533721dc1730cd4d9ba03aca" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>setLeftAdjustResult</name></member>
      <member refid="classmodm_1_1_adc_1aab08e943387f7b0d3583a950a1795a36" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>setRightAdjustResult</name></member>
      <member refid="classmodm_1_1_adc_1ad20105da541badf633266f3da4891024" prot="public" virt="non-virtual"><scope>modm::AdcInterrupt</scope><name>startConversion</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
