<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_block_allocator" kind="class" language="C++" prot="public">
    <compoundname>modm::BlockAllocator</compoundname>
    <includes refid="block__allocator_8hpp" local="no">modm/architecture/driver/heap/block_allocator.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>BLOCK_SIZE</declname>
        <defname>BLOCK_SIZE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmodm_1_1_block_allocator_1abaed9c95cb19545fbfd732b9bb2e74a2" prot="private" static="no">
        <type><ref refid="group__arithmetic__traits_1ga1eea33fb09849213b4d3d36cac81594c" kindref="member">modm::SignedType</ref>&lt; T &gt;</type>
        <definition>typedef modm::SignedType&lt;T&gt; modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::SignedType</definition>
        <argsstring></argsstring>
        <name>SignedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="43" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1_block_allocator_1adad6c7f7720287bf4395fabd914485c8" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="89" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_block_allocator_1a6e358db387d4762ea16bb3328b8bbd6e" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="90" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_block_allocator_1a0486c292e0fbd987b79815e807d3f823" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::freeHint</definition>
        <argsstring></argsstring>
        <name>freeHint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="92" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_block_allocator_1ac9c616d52135cf14e8eb97356c518480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::initialize</definition>
        <argsstring>(void *heapStart, void *heapEnd)</argsstring>
        <name>initialize</name>
        <param>
          <type>void *</type>
          <declname>heapStart</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>heapEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the raw memory.</para><para>Needs to called before any calls to <ref refid="classmodm_1_1_block_allocator_1ad799bc0f29e607125794f10a101060a1" kindref="member">allocate()</ref> or <ref refid="classmodm_1_1_block_allocator_1a27f3f78857863586ad373cd8b56a5873" kindref="member">free()</ref>. Must be called only once!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>heapStart</parametername>
</parameternamelist>
<parameterdescription>
<para>Needs to point to the first available byte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heapEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Needs to point directly above the last available memory position. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_block_allocator_1ad799bc0f29e607125794f10a101060a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::allocate</definition>
        <argsstring>(std::size_t requestedSize)</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>requestedSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate memory </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_block_allocator_1a27f3f78857863586ad373cd8b56a5873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free memory in O(1)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be the same pointer previously acquired by <ref refid="classmodm_1_1_block_allocator_1ad799bc0f29e607125794f10a101060a1" kindref="member">allocate()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_block_allocator_1a9345958c5bc1661b0dea5a295aa2e3f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::getAvailableSize</definition>
        <argsstring>() const</argsstring>
        <name>getAvailableSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="80" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1_block_allocator_1a1e5ce5e45056b47427f67a3a9e5353e9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* modm::BlockAllocator&lt; T, BLOCK_SIZE &gt;::alignPointer</definition>
        <argsstring>(void *ptr) const</argsstring>
        <name>alignPointer</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="85" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Memory allocator.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>TODO</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BLOCK_SIZE</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of one allocatable block in words (sizeof(T) bytes) (BLOCKSIZE * sizeof(T) * n) - 4 has to be dividable by 4 for every n</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Fabian Greif </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" line="42" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/driver/heap/block_allocator.hpp" bodystart="41" bodyend="93"/>
    <listofallmembers>
      <member refid="classmodm_1_1_block_allocator_1a1e5ce5e45056b47427f67a3a9e5353e9" prot="private" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>alignPointer</name></member>
      <member refid="classmodm_1_1_block_allocator_1ad799bc0f29e607125794f10a101060a1" prot="public" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>allocate</name></member>
      <member refid="classmodm_1_1_block_allocator_1a6e358db387d4762ea16bb3328b8bbd6e" prot="private" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>end</name></member>
      <member refid="classmodm_1_1_block_allocator_1a27f3f78857863586ad373cd8b56a5873" prot="public" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>free</name></member>
      <member refid="classmodm_1_1_block_allocator_1a0486c292e0fbd987b79815e807d3f823" prot="private" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>freeHint</name></member>
      <member refid="classmodm_1_1_block_allocator_1a9345958c5bc1661b0dea5a295aa2e3f1" prot="public" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>getAvailableSize</name></member>
      <member refid="classmodm_1_1_block_allocator_1ac9c616d52135cf14e8eb97356c518480" prot="public" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>initialize</name></member>
      <member refid="classmodm_1_1_block_allocator_1abaed9c95cb19545fbfd732b9bb2e74a2" prot="private" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>SignedType</name></member>
      <member refid="classmodm_1_1_block_allocator_1adad6c7f7720287bf4395fabd914485c8" prot="private" virt="non-virtual"><scope>modm::BlockAllocator</scope><name>start</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
