<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1pt_1_1_protothread" kind="class" language="C++" prot="public">
    <compoundname>modm::pt::Protothread</compoundname>
    <includes refid="protothread_2protothread_8hpp" local="no">modm/processing/protothread/protothread.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1pt_1_1_protothread_1a3afd7216c6ef2282086a8d8c76a1dce6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::pt::Protothread::Protothread</definition>
        <argsstring>()</argsstring>
        <name>Protothread</name>
        <briefdescription>
<para>Construct a new protothread that will start from the beginning of its run() function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" line="52" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1pt_1_1_protothread_1a8f975cb523dd09a8199491b3f1081e74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::pt::Protothread::restart</definition>
        <argsstring>()</argsstring>
        <name>restart</name>
        <briefdescription>
<para>Restart protothread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" line="59" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1pt_1_1_protothread_1a47e55e55e4d81ac5546cf93b4d0b0d20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::pt::Protothread::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stop the protothread from running. </para>        </briefdescription>
        <detaileddescription>
<para>Happens automatically at PT_END.</para><para><simplesect kind="note"><para>This differs from the Dunkels&apos; original protothread behavior (his restart automatically, which is usually not what you want). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" line="74" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1pt_1_1_protothread_1acfb639a2daf212719cf66e25b8b1e2e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::pt::Protothread::isRunning</definition>
        <argsstring>() const</argsstring>
        <name>isRunning</name>
        <briefdescription>
<para>Check if the protothread is still running. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the protothread is running or waiting, <computeroutput>false</computeroutput> if it has ended or exited. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" line="86" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A very lightweight, stackless thread. </para>    </briefdescription>
    <detaileddescription>
<para>Because protothreads do not save the stack context across a blocking call, local variables are not preserved when the protothread blocks. This means that local variables should be used with utmost care - if in doubt, do not use local variables inside a protothread! Use private/protected member variables to save state between a context switch.</para><para>A protothread is driven by repeated calls to the run()-function in which the protothread is running. Each time the function is called, the protothread will run until it blocks or exits. Thus the scheduling of protothreads is done by the application that uses protothreads.</para><para>For other examples take a look in the <computeroutput>examples</computeroutput> folder in the MODM root folder.</para><para><simplesect kind="warning"><para>The names <computeroutput>ptState</computeroutput> and <computeroutput>ptYield</computeroutput> are reserved and may not be used as variables or function names! </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" line="46" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/protothread/protothread.hpp" bodystart="45" bodyend="127"/>
    <listofallmembers>
      <member refid="classmodm_1_1pt_1_1_protothread_1acfb639a2daf212719cf66e25b8b1e2e6" prot="public" virt="non-virtual"><scope>modm::pt::Protothread</scope><name>isRunning</name></member>
      <member refid="classmodm_1_1pt_1_1_protothread_1a3afd7216c6ef2282086a8d8c76a1dce6" prot="public" virt="non-virtual"><scope>modm::pt::Protothread</scope><name>Protothread</name></member>
      <member refid="classmodm_1_1pt_1_1_protothread_1a8f975cb523dd09a8199491b3f1081e74" prot="public" virt="non-virtual"><scope>modm::pt::Protothread</scope><name>restart</name></member>
      <member refid="classmodm_1_1pt_1_1_protothread_1a47e55e55e4d81ac5546cf93b4d0b0d20" prot="public" virt="non-virtual"><scope>modm::pt::Protothread</scope><name>stop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
