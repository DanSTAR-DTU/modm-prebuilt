<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_dynamic_array" kind="class" language="C++" prot="public">
    <compoundname>modm::DynamicArray</compoundname>
    <includes refid="dynamic__array_8hpp" local="no">modm/container/dynamic_array.hpp</includes>
    <innerclass refid="classmodm_1_1_dynamic_array_1_1const__iterator" prot="public">modm::DynamicArray::const_iterator</innerclass>
    <innerclass refid="classmodm_1_1_dynamic_array_1_1iterator" prot="public">modm::DynamicArray::iterator</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
        <defval><ref refid="classmodm_1_1allocator_1_1_dynamic" kindref="compound">allocator::Dynamic</ref>&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t modm::DynamicArray&lt; T, Allocator &gt;::SizeType</definition>
        <argsstring></argsstring>
        <name>SizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="50" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmodm_1_1_dynamic_array_1ac220ce1c155db1ac44146c12d178056f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="375" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classmodm_1_1_dynamic_array_1a67171474c4da6cc8efe0c7fafefd2b2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="376" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="376" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1_dynamic_array_1aa4390d127ee70af20a42ed9fa0daf14b" prot="private" static="no" mutable="no">
        <type>Allocator</type>
        <definition>Allocator modm::DynamicArray&lt; T, Allocator &gt;::allocator</definition>
        <argsstring></argsstring>
        <name>allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="386" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_dynamic_array_1a12c03ba1f3208344e43687a3e78165dc" prot="private" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
        <definition>SizeType modm::DynamicArray&lt; T, Allocator &gt;::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="388" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_dynamic_array_1afa48a38c39ccf4ce2419294ecf3970ee" prot="private" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
        <definition>SizeType modm::DynamicArray&lt; T, Allocator &gt;::capacity</definition>
        <argsstring></argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="389" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_dynamic_array_1a508e9a4bad1f79b6d13a10e3cce61e7f" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* modm::DynamicArray&lt; T, Allocator &gt;::values</definition>
        <argsstring></argsstring>
        <name>values</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="390" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="390" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a47770f3c91eda5e58e5b83f6dbd97731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DynamicArray&lt; T, Allocator &gt;::DynamicArray</definition>
        <argsstring>(const Allocator &amp;allocator=Allocator())</argsstring>
        <name>DynamicArray</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs an empty dynamic array, with no content and a size of zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1ac4297df431ac23c40cbd84f34903f7db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DynamicArray&lt; T, Allocator &gt;::DynamicArray</definition>
        <argsstring>(SizeType n, const Allocator &amp;allocator=Allocator())</argsstring>
        <name>DynamicArray</name>
        <param>
          <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const Allocator &amp;</type>
          <declname>allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
<para>Allocation constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct a dynamic array of given capacity. The array will still be empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a70d5e7bd28810fa5bdb997c5a8e81a08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DynamicArray&lt; T, Allocator &gt;::DynamicArray</definition>
        <argsstring>(SizeType n, const T &amp;value, const Allocator &amp;allocator=Allocator())</argsstring>
        <name>DynamicArray</name>
        <param>
          <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const Allocator &amp;</type>
          <declname>allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
<para>Repetitive sequence constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct a dynamic array of given size.</para>
<para>Initializes the dynamic array with its content set to a repetition, n times, of copies of value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1abc7a4801dd8f3c404f50cad6b4617ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DynamicArray&lt; T, Allocator &gt;::DynamicArray</definition>
        <argsstring>(std::initializer_list&lt; T &gt; init, const Allocator &amp;allocator=Allocator())</argsstring>
        <name>DynamicArray</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>const Allocator &amp;</type>
          <declname>allocator</declname>
          <defval>Allocator()</defval>
        </param>
        <briefdescription>
<para>Initializer List constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Construct a dynamic array that holds the values specified in the initialize list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1ab8ba3ec1a81527ec080605cc32ed4f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DynamicArray&lt; T, Allocator &gt;::DynamicArray</definition>
        <argsstring>(const DynamicArray &amp;other)</argsstring>
        <name>DynamicArray</name>
        <param>
          <type>const <ref refid="classmodm_1_1_dynamic_array" kindref="compound">DynamicArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1aacd42c441ddb6c147869c15a87e83d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::DynamicArray&lt; T, Allocator &gt;::~DynamicArray</definition>
        <argsstring>()</argsstring>
        <name>~DynamicArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1aaaa69117ff748b8d49c3733ab3f8f670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array" kindref="compound">DynamicArray</ref> &amp;</type>
        <definition>DynamicArray&amp; modm::DynamicArray&lt; T, Allocator &gt;::operator=</definition>
        <argsstring>(const DynamicArray &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_dynamic_array" kindref="compound">DynamicArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1ab8ed0c0c65c0f7cf74e776705c4ba308" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::DynamicArray&lt; T, Allocator &gt;::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Test whether dynamic array is empty. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the dynamic array container is empty, i.e. whether its size is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="101" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a4cc10338ce2e8d2b5f40f6594184586f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
        <definition>SizeType modm::DynamicArray&lt; T, Allocator &gt;::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
<para>Return size. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="112" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a0ca3e06c00e187997cd48e6f02ef41a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
        <definition>SizeType modm::DynamicArray&lt; T, Allocator &gt;::getCapacity</definition>
        <argsstring>() const</argsstring>
        <name>getCapacity</name>
        <briefdescription>
<para>Return size of allocated storage. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the size of the allocated storage space in the dynamic array object.</para>
<para>Notice that, in dynamic arrays, the capacity is not necessarily equal to the number of elements that conform the underlying dynamic array content (this can be obtained with member <ref refid="classmodm_1_1_dynamic_array_1a4cc10338ce2e8d2b5f40f6594184586f" kindref="member">DynamicArray::getSize()</ref>), but the capacity of the actual allocated space, which is either equal or greater than the content size.</para>
<para><simplesect kind="see"><para><ref refid="classmodm_1_1_dynamic_array_1a4cc10338ce2e8d2b5f40f6594184586f" kindref="member">getSize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="132" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a475613c437b7a6a9f40173f56d4047b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DynamicArray&lt; T, Allocator &gt;::reserve</definition>
        <argsstring>(SizeType n)</argsstring>
        <name>reserve</name>
        <param>
          <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Request a change in capacity. </para>
        </briefdescription>
        <detaileddescription>
<para>Requests that the capacity of the allocated storage space for the elements of the dynamic array container be at least enough to hold n more elements.</para>
<para>This informs the dynamic array of a planned increase in size, although notice that the parameter n informs of a minimum, so the resulting capacity may be any capacity equal or larger than this.</para>
<para><simplesect kind="see"><para><ref refid="classmodm_1_1_dynamic_array_1a0ca3e06c00e187997cd48e6f02ef41a9" kindref="member">getCapacity()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a8b856bfe713c7cb4a6aec85695b3b0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DynamicArray&lt; T, Allocator &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Remove all elements and set capacity to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Frees all allocated memory and sets the capacity of the container to zero.</para>
<para><simplesect kind="warning"><para>This will discard all the items in the container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a36306fdd222c10aae1dcf4cb56de3148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DynamicArray&lt; T, Allocator &gt;::removeAll</definition>
        <argsstring>()</argsstring>
        <name>removeAll</name>
        <briefdescription>
<para>Remove all elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Keeps the capacity at its current level. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1aaf35b83439603d1d2d600b913f8be094" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::DynamicArray&lt; T, Allocator &gt;::operator []</definition>
        <argsstring>(SizeType index)</argsstring>
        <name>operator []</name>
        <param>
          <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Access element. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at position n in the dynamic array container.</para>
<para><simplesect kind="warning"><para>Do not use this operator to access an element the first time. Use the append methode to create it.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classmodm_1_1_dynamic_array_1a218210952fe3b08760dc0c81a61581a2" kindref="member">append()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="184" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a3bd3eb7198a36cda2a53b1806251c7b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::DynamicArray&lt; T, Allocator &gt;::operator []</definition>
        <argsstring>(SizeType index) const</argsstring>
        <name>operator []</name>
        <param>
          <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Access element. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at position n in the dynamic array container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="196" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a218210952fe3b08760dc0c81a61581a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DynamicArray&lt; T, Allocator &gt;::append</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add element at the end. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a new element at the end of the dynamic array, after its current last element. The content of this new element is initialized to a copy of <computeroutput>value</computeroutput>.</para>
<para>This effectively increases the dynamic array size by one, which causes a reallocation of the internal allocated storage if the dynamic array size was equal to the dynamic array capacity before the call. Reallocations invalidate all previously obtained iterators, references and pointers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1afffc4aafbed104801cf6ab0fc95126d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DynamicArray&lt; T, Allocator &gt;::removeBack</definition>
        <argsstring>()</argsstring>
        <name>removeBack</name>
        <briefdescription>
<para>Delete last element. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes the last element in the dynamic array, effectively reducing the dynamic array size by one and invalidating all iterators and references to it.</para>
<para>This calls the removed element&apos;s destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a2839990fcc428d96128c40d4a7516013" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::DynamicArray&lt; T, Allocator &gt;::getFront</definition>
        <argsstring>() const</argsstring>
        <name>getFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="234" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a89bd42651ee36633374908a4e29c2a20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::DynamicArray&lt; T, Allocator &gt;::getFront</definition>
        <argsstring>()</argsstring>
        <name>getFront</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="240" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a36c9c3cb02ca6d2b727d3247aaac2b66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::DynamicArray&lt; T, Allocator &gt;::getBack</definition>
        <argsstring>() const</argsstring>
        <name>getBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="246" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a894d12be472ef4c763ddd0fa1dacbc53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; modm::DynamicArray&lt; T, Allocator &gt;::getBack</definition>
        <argsstring>()</argsstring>
        <name>getBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="252" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a111ff620b341659de88f7745601756fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::DynamicArray&lt; T, Allocator &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read/write iterator that points to the first element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a7b63992f0579906507c88d005ace3407" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::DynamicArray&lt; T, Allocator &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read-only (constant) iterator that points to the first element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1acd867da9901d0ead15babcb771cb1755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::DynamicArray&lt; T, Allocator &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read/write iterator that points one past the last element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a73d8432c862ac0d939bbd550eccbe3c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::DynamicArray&lt; T, Allocator &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read-only (constant) iterator that points one past the last element in the list. Iteration is done in ordinary element order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a672b2a4b740b6f8428b7e69175994efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator modm::DynamicArray&lt; T, Allocator &gt;::find</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>find</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read/write iterator that points to the first element that contains value. If value is not found, it points to the last element. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a97972b8e120ae9ffde7eb13e894734ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_dynamic_array_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator modm::DynamicArray&lt; T, Allocator &gt;::find</definition>
        <argsstring>(const T &amp;value) const</argsstring>
        <name>find</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a read-only (constant) iterator that points to the first element that contains value. If value is not found, it points to the last element. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="372" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1_dynamic_array_1a15ceec57b4334e8213c624852e87b7c5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::DynamicArray&lt; T, Allocator &gt;::relocate</definition>
        <argsstring>(SizeType n)</argsstring>
        <name>relocate</name>
        <param>
          <type><ref refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" kindref="member">SizeType</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="384" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Dynamic Arrays. </para>
    </briefdescription>
    <detaileddescription>
<para>Dynamic Arrays are a kind of sequence containers. As such, their elements are ordered following a strict linear sequence.</para>
<para>Just as regular arrays, dynamic arrays containers have their elements stored in contiguous storage locations, which means that their elements can be accessed not only using iterators but also using offsets on regular pointers to elements.</para>
<para>Reallocations may be a costly operation in terms of performance, since they generally involve the entire storage space used by the dynamic array to be copied to a new location. Therefore, whenever large increases in size are planned for a dynamic array, it is recommended to explicitly indicate a capacity for the dynamic array using member function <ref refid="classmodm_1_1_dynamic_array_1a475613c437b7a6a9f40173f56d4047b1" kindref="member">DynamicArray::reserve()</ref>.</para>
<para><simplesect kind="author"><para>Fabian Greif <ulink url="mailto:fabian.greif@rwth-aachen.de">fabian.greif@rwth-aachen.de</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" line="48" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/dynamic_array.hpp" bodystart="47" bodyend="391"/>
    <listofallmembers>
      <member refid="classmodm_1_1_dynamic_array_1aa4390d127ee70af20a42ed9fa0daf14b" prot="private" virt="non-virtual"><scope>modm::DynamicArray</scope><name>allocator</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a218210952fe3b08760dc0c81a61581a2" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>append</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a111ff620b341659de88f7745601756fa" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>begin</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a7b63992f0579906507c88d005ace3407" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>begin</name></member>
      <member refid="classmodm_1_1_dynamic_array_1afa48a38c39ccf4ce2419294ecf3970ee" prot="private" virt="non-virtual"><scope>modm::DynamicArray</scope><name>capacity</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a8b856bfe713c7cb4a6aec85695b3b0b9" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>clear</name></member>
      <member refid="classmodm_1_1_dynamic_array_1ac220ce1c155db1ac44146c12d178056f" prot="private" virt="non-virtual"><scope>modm::DynamicArray</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a47770f3c91eda5e58e5b83f6dbd97731" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>DynamicArray</name></member>
      <member refid="classmodm_1_1_dynamic_array_1ac4297df431ac23c40cbd84f34903f7db" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>DynamicArray</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a70d5e7bd28810fa5bdb997c5a8e81a08" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>DynamicArray</name></member>
      <member refid="classmodm_1_1_dynamic_array_1abc7a4801dd8f3c404f50cad6b4617ec1" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>DynamicArray</name></member>
      <member refid="classmodm_1_1_dynamic_array_1ab8ba3ec1a81527ec080605cc32ed4f3f" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>DynamicArray</name></member>
      <member refid="classmodm_1_1_dynamic_array_1acd867da9901d0ead15babcb771cb1755" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>end</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a73d8432c862ac0d939bbd550eccbe3c6" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>end</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a672b2a4b740b6f8428b7e69175994efe" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>find</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a97972b8e120ae9ffde7eb13e894734ca" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>find</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a36c9c3cb02ca6d2b727d3247aaac2b66" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>getBack</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a894d12be472ef4c763ddd0fa1dacbc53" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>getBack</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a0ca3e06c00e187997cd48e6f02ef41a9" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>getCapacity</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a2839990fcc428d96128c40d4a7516013" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>getFront</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a89bd42651ee36633374908a4e29c2a20" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>getFront</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a4cc10338ce2e8d2b5f40f6594184586f" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>getSize</name></member>
      <member refid="classmodm_1_1_dynamic_array_1ab8ed0c0c65c0f7cf74e776705c4ba308" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>isEmpty</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a67171474c4da6cc8efe0c7fafefd2b2d" prot="private" virt="non-virtual"><scope>modm::DynamicArray</scope><name>iterator</name></member>
      <member refid="classmodm_1_1_dynamic_array_1aaf35b83439603d1d2d600b913f8be094" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>operator []</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a3bd3eb7198a36cda2a53b1806251c7b4" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>operator []</name></member>
      <member refid="classmodm_1_1_dynamic_array_1aaaa69117ff748b8d49c3733ab3f8f670" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a15ceec57b4334e8213c624852e87b7c5" prot="private" virt="non-virtual"><scope>modm::DynamicArray</scope><name>relocate</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a36306fdd222c10aae1dcf4cb56de3148" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>removeAll</name></member>
      <member refid="classmodm_1_1_dynamic_array_1afffc4aafbed104801cf6ab0fc95126d8" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>removeBack</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a475613c437b7a6a9f40173f56d4047b1" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>reserve</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a12c03ba1f3208344e43687a3e78165dc" prot="private" virt="non-virtual"><scope>modm::DynamicArray</scope><name>size</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a0f4abafca97727852b8328acd3222c9b" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>SizeType</name></member>
      <member refid="classmodm_1_1_dynamic_array_1a508e9a4bad1f79b6d13a10e3cce61e7f" prot="private" virt="non-virtual"><scope>modm::DynamicArray</scope><name>values</name></member>
      <member refid="classmodm_1_1_dynamic_array_1aacd42c441ddb6c147869c15a87e83d6e" prot="public" virt="non-virtual"><scope>modm::DynamicArray</scope><name>~DynamicArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
