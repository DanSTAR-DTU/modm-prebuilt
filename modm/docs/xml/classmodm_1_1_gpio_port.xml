<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_gpio_port" kind="class" language="C++" prot="public">
    <compoundname>modm::GpioPort</compoundname>
    <derivedcompoundref refid="classmodm_1_1_gpio_expander_port" prot="public" virt="non-virtual">modm::GpioExpanderPort&lt; GpioExpander, expander, StartPin, Width, DataOrder &gt;</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_gpio_port" prot="public" virt="non-virtual">modm::platform::GpioPort&lt; StartGpio, Width &gt;</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_software_gpio_port" prot="public" virt="non-virtual">modm::platform::SoftwareGpioPort&lt; Gpios &gt;</derivedcompoundref>
    <includes refid="gpio_8hpp" local="no">modm/architecture/interface/gpio.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classmodm_1_1_gpio_port_1a7ff5dde1f0e7851f0059d35be50bea33" prot="public" static="no">
        <name>DataOrder</name>
        <enumvalue id="classmodm_1_1_gpio_port_1a7ff5dde1f0e7851f0059d35be50bea33a960b44c579bc2f6818d2daaf9e4c16f0" prot="public">
          <name>Normal</name>
          <initializer>= false</initializer>
          <briefdescription>
<para>bit order of data is the same as bit order of port </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_gpio_port_1a7ff5dde1f0e7851f0059d35be50bea33a030aa94015bd11d183b897ddb541e4e3" prot="public">
          <name>Reversed</name>
          <initializer>= true</initializer>
          <briefdescription>
<para>bit order of data is the reverse bit order of port </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>This enum can be used to reverse the bit order of the Data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="147" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="typedef" id="classmodm_1_1_gpio_port_1a7bfb4242ca91cfe30823d1f4167f2c32" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using modm::GpioPort::PortType =  uint16_t</definition>
        <argsstring></argsstring>
        <name>PortType</name>
        <briefdescription>
<para>may also be uint8_t, depending on port width </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="161" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmodm_1_1_gpio_port_1abe0568b16960fc23df2c4ea72617d67a" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::GpioPort::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This holds the width of the port as number of bits and can be used in drivers to assert the correct requirements </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="154" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_gpio_port_1a0aeb54e20c1310dc35764c7f82112d2f" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::GpioPort::number_of_ports</definition>
        <argsstring></argsstring>
        <name>number_of_ports</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This holds the number of unique platform ports that this implementation accesses. It&apos;s always at least 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="158" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_gpio_port_1a2252b3d85e6f5d8bd43c978262a9617f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="classmodm_1_1_gpio_port_1a7ff5dde1f0e7851f0059d35be50bea33" kindref="member">DataOrder</ref></type>
        <definition>static constexpr DataOrder modm::GpioPort::getDataOrder</definition>
        <argsstring>()</argsstring>
        <name>getDataOrder</name>
        <briefdescription>
<para>returns the chosen data order </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_port_1afc30ee976ae40d57c2e89305926939ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioPort::setOutput</definition>
        <argsstring>()</argsstring>
        <name>setOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_port_1a0531406df14f6db9324668b80f62ba34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioPort::setInput</definition>
        <argsstring>()</argsstring>
        <name>setInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_port_1a0d98a18043f867bd80c1d085fc2c4b23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_gpio_port_1a7bfb4242ca91cfe30823d1f4167f2c32" kindref="member">PortType</ref></type>
        <definition>static PortType modm::GpioPort::read</definition>
        <argsstring>()</argsstring>
        <name>read</name>
        <briefdescription>
<para>The read data is always right-aligned regardless of physical mapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_port_1a84acfb6bba8e796e8c4a3805228d7b80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioPort::write</definition>
        <argsstring>(PortType data)</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="classmodm_1_1_gpio_port_1a7bfb4242ca91cfe30823d1f4167f2c32" kindref="member">PortType</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>The write data is always right-aligned regardless of physical mapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_gpio_port_1af9bd5b0377caca0d18099421a8d30e49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::GpioPort::toggle</definition>
        <argsstring>()</argsstring>
        <name>toggle</name>
        <briefdescription>
<para>Toggle the output states of all pins. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="184" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Input/output interface of a set of up to 16 I/O pins.</para><para>This class provides the interface for up to 16 parallel IOs. Be aware that the interface is the same regardless of the actual mapping of the IOs. For example, when a high octet <computeroutput>0xf400</computeroutput> is physically configured, the data will still be written and read as a low octet <computeroutput>0x00f4</computeroutput>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1218">
        <label>modm::platform::SoftwareGpioPort&lt; Gpios &gt;</label>
        <link refid="classmodm_1_1platform_1_1_software_gpio_port"/>
        <childnode refid="1215" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1215">
        <label>modm::GpioPort</label>
        <link refid="classmodm_1_1_gpio_port"/>
      </node>
      <node id="1216">
        <label>modm::GpioExpanderPort&lt; GpioExpander, expander, StartPin, Width, DataOrder &gt;</label>
        <link refid="classmodm_1_1_gpio_expander_port"/>
        <childnode refid="1215" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1217">
        <label>modm::platform::GpioPort&lt; StartGpio, Width &gt;</label>
        <link refid="classmodm_1_1platform_1_1_gpio_port"/>
        <childnode refid="1215" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" line="142" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/gpio.hpp" bodystart="141" bodyend="186"/>
    <listofallmembers>
      <member refid="classmodm_1_1_gpio_port_1a7ff5dde1f0e7851f0059d35be50bea33" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>DataOrder</name></member>
      <member refid="classmodm_1_1_gpio_port_1a2252b3d85e6f5d8bd43c978262a9617f" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>getDataOrder</name></member>
      <member refid="classmodm_1_1_gpio_port_1a0aeb54e20c1310dc35764c7f82112d2f" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>number_of_ports</name></member>
      <member refid="classmodm_1_1_gpio_port_1a7bfb4242ca91cfe30823d1f4167f2c32" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>PortType</name></member>
      <member refid="classmodm_1_1_gpio_port_1a0d98a18043f867bd80c1d085fc2c4b23" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>read</name></member>
      <member refid="classmodm_1_1_gpio_port_1a0531406df14f6db9324668b80f62ba34" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>setInput</name></member>
      <member refid="classmodm_1_1_gpio_port_1afc30ee976ae40d57c2e89305926939ac" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>setOutput</name></member>
      <member refid="classmodm_1_1_gpio_port_1af9bd5b0377caca0d18099421a8d30e49" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>toggle</name></member>
      <member refid="classmodm_1_1_gpio_port_1abe0568b16960fc23df2c4ea72617d67a" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>width</name></member>
      <member refid="classmodm_1_1_gpio_port_1a84acfb6bba8e796e8c4a3805228d7b80" prot="public" virt="non-virtual"><scope>modm::GpioPort</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
