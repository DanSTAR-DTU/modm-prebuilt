<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_matrix" kind="class" language="C++" prot="public">
    <compoundname>modm::Matrix</compoundname>
    <includes refid="quaternion_8hpp" local="no">modm/math/geometry/quaternion.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>ROWS</declname>
        <defname>ROWS</defname>
      </param>
      <param>
        <type>uint8_t</type>
        <declname>COLUMNS</declname>
        <defname>COLUMNS</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmodm_1_1_matrix_1ae3ed946e5f5bcb33d3fc01996e032e61" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T modm::Matrix&lt; T, ROWS, COLUMNS &gt;::element[ROWS *COLUMNS]</definition>
        <argsstring>[ROWS *COLUMNS]</argsstring>
        <name>element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="217" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_matrix_1a0b3376b5b3feeb97b758face51682b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Matrix&lt; T, ROWS, COLUMNS &gt;::Matrix</definition>
        <argsstring>()</argsstring>
        <name>Matrix</name>
        <briefdescription>
<para>Default Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> with uninitialized elements. Use <ref refid="classmodm_1_1_matrix_1ad328d29885c5a109943b76501495937e" kindref="member">zeroMatrix()</ref> to create a matrix with all elements set to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a523e7c713f29ab8dd7d3bc7e09f30715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Matrix&lt; T, ROWS, COLUMNS &gt;::Matrix</definition>
        <argsstring>(const T *data)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Create a matrix from an array. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting><codeline><highlight class="normal">const<sp/>int16_t<sp/>m[6]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>3,<sp/>4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>6,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">modm::Matrix&lt;int16_t,<sp/>3,<sp/>2&gt;<sp/>a(m);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a1682b615b7ab248cbb3042e986429cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::Matrix&lt; T, ROWS, COLUMNS &gt;::Matrix</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a03d0940aee9c8933ef7c3e5efbb0399b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator=</definition>
        <argsstring>(const Matrix&lt; U, ROWS, COLUMNS &gt; &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; U, ROWS, COLUMNS &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a6d678a8d0c7fa22f157638855338b59b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>MR</declname>
            <defname>MR</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>MC</declname>
            <defname>MC</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, MR, MC &gt;</type>
        <definition>Matrix&lt;T, MR, MC&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::subMatrix</definition>
        <argsstring>(uint8_t row, uint8_t column) const</argsstring>
        <name>subMatrix</name>
        <param>
          <type>uint8_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Create a new sub matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1aaa50715a5466524d6b000d9bf702ff18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator==</definition>
        <argsstring>(const Matrix &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a91e722d7a38fc1bed97f7734222f942d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator !=</definition>
        <argsstring>(const Matrix &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a1c95036789be3eb543baf401aed057f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator []</definition>
        <argsstring>(uint8_t row) const</argsstring>
        <name>operator []</name>
        <param>
          <type>uint8_t</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a9fea305cb9d38dcafadff9d4cc1e4ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator []</definition>
        <argsstring>(uint8_t row)</argsstring>
        <name>operator []</name>
        <param>
          <type>uint8_t</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a220826b5c769ade152636331943f4fa2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t modm::Matrix&lt; T, ROWS, COLUMNS &gt;::getNumberOfRows</definition>
        <argsstring>() const</argsstring>
        <name>getNumberOfRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a514d3248f4ea6bf106d7718ed8587f87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t modm::Matrix&lt; T, ROWS, COLUMNS &gt;::getNumberOfColumns</definition>
        <argsstring>() const</argsstring>
        <name>getNumberOfColumns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1ac64b428c164beb25f57c11535862b778" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, COLUMNS &gt;</type>
        <definition>Matrix&lt;T, 1, COLUMNS&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::getRow</definition>
        <argsstring>(uint8_t index) const</argsstring>
        <name>getRow</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a9d82d38890255f31d1ec55d8b0cf23a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS, 1 &gt;</type>
        <definition>Matrix&lt;T, ROWS, 1&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::getColumn</definition>
        <argsstring>(uint8_t index) const</argsstring>
        <name>getColumn</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a1a3255fab8365f931c19b10a3c223539" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* modm::Matrix&lt; T, ROWS, COLUMNS &gt;::ptr</definition>
        <argsstring>() const</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a5b485650dc61a6c9c431e373cc674d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T* modm::Matrix&lt; T, ROWS, COLUMNS &gt;::ptr</definition>
        <argsstring>()</argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a401bef2d3d9c9ed141a34e5b126fef88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator -</definition>
        <argsstring>()</argsstring>
        <name>operator -</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a20dfe5513e30054e3629c1536c3d2948" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator+</definition>
        <argsstring>(const Matrix &amp;rhs) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a3a556648f405f309bd1ec128f763aa51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator -</definition>
        <argsstring>(const Matrix &amp;rhs) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1ac35cf1d8d75b5aec3abc600b285e454b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator *</definition>
        <argsstring>(const T &amp;rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a1e4d78b8e60a0159b7befae841ae72ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator/</definition>
        <argsstring>(const T &amp;rhs) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1ace4f338d2c2f1454c3dedb2f46c111c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator+=</definition>
        <argsstring>(const Matrix &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1ab23739569b8bce642fa1ac7a15ad6762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator -=</definition>
        <argsstring>(const Matrix &amp;rhs)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1ad8fc98c2ae49fb7f240476247d23e5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator *=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a016f6651a053a2d99d84f8e21b4883a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator/=</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1ae110cc55b53096dcf4fdc63b2bae9411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator *=</definition>
        <argsstring>(const Matrix &amp;rhs)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> multiplication with matrices with the same size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a9d3dbb9aa1dda409cb0493a4998eae80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>RHSCOL</declname>
            <defname>RHSCOL</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS, RHSCOL &gt;</type>
        <definition>Matrix&lt;T, ROWS, RHSCOL&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::operator *</definition>
        <argsstring>(const Matrix&lt; T, COLUMNS, RHSCOL &gt; &amp;rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, COLUMNS, RHSCOL &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> multiplication with different size matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a2a8c719af63bedd9ca5e5e246c0e5858" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, COLUMNS, ROWS &gt;</type>
        <definition>Matrix&lt;T, COLUMNS, ROWS&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::asTransposed</definition>
        <argsstring>() const</argsstring>
        <name>asTransposed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1aa746412cbc7ac3db2be43265ec19e8e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::Matrix&lt; T, ROWS, COLUMNS &gt;::transpose</definition>
        <argsstring>()</argsstring>
        <name>transpose</name>
        <briefdescription>
<para>Transpose the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Will only work if the matrix is square! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1aef402466f0a2d05a8929ac10423e0405" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T modm::Matrix&lt; T, ROWS, COLUMNS &gt;::determinant</definition>
        <argsstring>() const</argsstring>
        <name>determinant</name>
        <briefdescription>
<para>Calculate the determinant. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses modm::determinant(*this); </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a9a8a6e93018e7cee81a54d6d7a6b415c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Matrix&lt; T, ROWS, COLUMNS &gt;::hasNan</definition>
        <argsstring>() const</argsstring>
        <name>hasNan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1ac1830dc1e9bca5400115e12a628b05e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::Matrix&lt; T, ROWS, COLUMNS &gt;::hasInf</definition>
        <argsstring>() const</argsstring>
        <name>hasInf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a6ff9d80f7ed9397c10b21582a390c68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::replace</definition>
        <argsstring>(const U *data)</argsstring>
        <name>replace</name>
        <param>
          <type>const U *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Fill the matrix with the values in <computeroutput>data</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a20f461b5d78fb066082063cb6b22e2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>MW</declname>
            <defname>MW</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>MH</declname>
            <defname>MH</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::replace</definition>
        <argsstring>(uint8_t row, uint8_t column, const Matrix&lt; T, MW, MH &gt; &amp;m)</argsstring>
        <name>replace</name>
        <param>
          <type>uint8_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>column</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, MW, MH &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a42e65cfe21ea58dcc08bf9e8d610ecea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::replaceRow</definition>
        <argsstring>(uint8_t index, const Matrix&lt; T, 1, COLUMNS &gt; &amp;m)</argsstring>
        <name>replaceRow</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, COLUMNS &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a372b59971ef0c6ce468ec00e422fda72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::replaceColumn</definition>
        <argsstring>(uint8_t index, const Matrix&lt; T, ROWS, 1 &gt; &amp;m)</argsstring>
        <name>replaceColumn</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS, 1 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a737f6cd5bdc6aaf75d30230558354198" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS, COLUMNS+1 &gt;</type>
        <definition>Matrix&lt;T, ROWS, COLUMNS+1&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::addColumn</definition>
        <argsstring>(uint8_t index, const Matrix&lt; T, ROWS, 1 &gt; &amp;c) const</argsstring>
        <name>addColumn</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS, 1 &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a5eea1aab9cf65978a20c36ce387ca839" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS+1, COLUMNS &gt;</type>
        <definition>Matrix&lt;T, ROWS+1, COLUMNS&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::addRow</definition>
        <argsstring>(uint8_t index, const Matrix&lt; T, 1, COLUMNS &gt; &amp;r) const</argsstring>
        <name>addRow</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, 1, COLUMNS &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1aa596883724e6512f2480a3a681d3bcd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS, COLUMNS-1 &gt;</type>
        <definition>Matrix&lt;T, ROWS, COLUMNS-1&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::removeColumn</definition>
        <argsstring>(uint8_t index) const</argsstring>
        <name>removeColumn</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a0b6e73fdec0043a36a7e1855e5f58eef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref>&lt; T, ROWS-1, COLUMNS &gt;</type>
        <definition>Matrix&lt;T, ROWS-1, COLUMNS&gt; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::removeRow</definition>
        <argsstring>(uint8_t index) const</argsstring>
        <name>removeRow</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="214" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_matrix_1ad328d29885c5a109943b76501495937e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>static const Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::zeroMatrix</definition>
        <argsstring>()</argsstring>
        <name>zeroMatrix</name>
        <briefdescription>
<para>Get a zero matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an internal zero matrix and returns a reference to that internal matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a0fadce46115d5b2a9f1e9e42f622e266" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>static const Matrix&amp; modm::Matrix&lt; T, ROWS, COLUMNS &gt;::identityMatrix</definition>
        <argsstring>()</argsstring>
        <name>identityMatrix</name>
        <briefdescription>
<para>Get a identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an internal identity matrix and returns a reference to that internal matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="103" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1_matrix_1a6af6403467f021cd461a12fc98daefc8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t modm::Matrix&lt; T, ROWS, COLUMNS &gt;::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
<para>Size of the <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> in Bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_matrix_1a1c1a9ae689700378155913d9f8b94652" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t modm::Matrix&lt; T, ROWS, COLUMNS &gt;::getNumberOfElements</definition>
        <argsstring>() const</argsstring>
        <name>getNumberOfElements</name>
        <briefdescription>
<para>Number of elements in the <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> (rows * columns) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/matrix.hpp" line="226" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for handling common matrix operations. </para>
    </briefdescription>
    <detaileddescription>
<para>Having the width and height as template parameters has several advantages over the tradition dynamic matrix class:</para>
<para><itemizedlist>
<listitem><para>The compiler knows how many elements you have in your matrix and can unroll and optimize loops</para>
</listitem><listitem><para>You can ensure that you are not doing operations on matrices with incompatible sizes (multiplication for example). The compiler will tell you at compile time if you do.</para>
</listitem><listitem><para>When you receive a matrix as a function parameter, you don&apos;t need to check that it is what you expect it to be. For example, if your function expects a 4x4 matrix, you&apos;ll ask for a <ref refid="classmodm_1_1_matrix" kindref="compound">Matrix</ref> and you are guaranteed to get what you asked for.</para>
</listitem></itemizedlist>
</para>
<para>Adapted from the implementation of Gaspard Petit (<ulink url="mailto:gaspardpetit@gmail.com">gaspardpetit@gmail.com</ulink>). <simplesect kind="see"><para>&lt;a href&quot;http://www-etud.iro.umontreal.ca/~petitg/cpp/matrix.html&quot;&gt;Homepage</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ROWS</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>COLUMNS</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Niklas Hauser </para>
</simplesect>
<simplesect kind="author"><para>Fabian Greif </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1390">
        <label>T</label>
      </node>
      <node id="1389">
        <label>modm::Matrix&lt; T, ROWS, COLUMNS &gt;</label>
        <link refid="classmodm_1_1_matrix"/>
        <childnode refid="1390" relation="usage">
          <edgelabel>element</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/quaternion.hpp" line="27" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/math/geometry/quaternion.hpp" bodystart="27" bodyend="-1"/>
    <listofallmembers>
      <member refid="classmodm_1_1_matrix_1a737f6cd5bdc6aaf75d30230558354198" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>addColumn</name></member>
      <member refid="classmodm_1_1_matrix_1a5eea1aab9cf65978a20c36ce387ca839" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>addRow</name></member>
      <member refid="classmodm_1_1_matrix_1a2a8c719af63bedd9ca5e5e246c0e5858" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>asTransposed</name></member>
      <member refid="classmodm_1_1_matrix_1aef402466f0a2d05a8929ac10423e0405" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>determinant</name></member>
      <member refid="classmodm_1_1_matrix_1ae3ed946e5f5bcb33d3fc01996e032e61" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>element</name></member>
      <member refid="classmodm_1_1_matrix_1a9d82d38890255f31d1ec55d8b0cf23a1" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>getColumn</name></member>
      <member refid="classmodm_1_1_matrix_1a514d3248f4ea6bf106d7718ed8587f87" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>getNumberOfColumns</name></member>
      <member refid="classmodm_1_1_matrix_1a1c1a9ae689700378155913d9f8b94652" prot="private" virt="non-virtual"><scope>modm::Matrix</scope><name>getNumberOfElements</name></member>
      <member refid="classmodm_1_1_matrix_1a220826b5c769ade152636331943f4fa2" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>getNumberOfRows</name></member>
      <member refid="classmodm_1_1_matrix_1ac64b428c164beb25f57c11535862b778" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>getRow</name></member>
      <member refid="classmodm_1_1_matrix_1a6af6403467f021cd461a12fc98daefc8" prot="private" virt="non-virtual"><scope>modm::Matrix</scope><name>getSize</name></member>
      <member refid="classmodm_1_1_matrix_1ac1830dc1e9bca5400115e12a628b05e7" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>hasInf</name></member>
      <member refid="classmodm_1_1_matrix_1a9a8a6e93018e7cee81a54d6d7a6b415c" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>hasNan</name></member>
      <member refid="classmodm_1_1_matrix_1a0fadce46115d5b2a9f1e9e42f622e266" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>identityMatrix</name></member>
      <member refid="classmodm_1_1_matrix_1a0b3376b5b3feeb97b758face51682b7f" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>Matrix</name></member>
      <member refid="classmodm_1_1_matrix_1a523e7c713f29ab8dd7d3bc7e09f30715" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>Matrix</name></member>
      <member refid="classmodm_1_1_matrix_1a1682b615b7ab248cbb3042e986429cef" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>Matrix</name></member>
      <member refid="classmodm_1_1_matrix_1a91e722d7a38fc1bed97f7734222f942d" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator !=</name></member>
      <member refid="classmodm_1_1_matrix_1ac35cf1d8d75b5aec3abc600b285e454b" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator *</name></member>
      <member refid="classmodm_1_1_matrix_1a9d3dbb9aa1dda409cb0493a4998eae80" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator *</name></member>
      <member refid="classmodm_1_1_matrix_1ad8fc98c2ae49fb7f240476247d23e5b1" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator *=</name></member>
      <member refid="classmodm_1_1_matrix_1ae110cc55b53096dcf4fdc63b2bae9411" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator *=</name></member>
      <member refid="classmodm_1_1_matrix_1a401bef2d3d9c9ed141a34e5b126fef88" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator -</name></member>
      <member refid="classmodm_1_1_matrix_1a3a556648f405f309bd1ec128f763aa51" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator -</name></member>
      <member refid="classmodm_1_1_matrix_1ab23739569b8bce642fa1ac7a15ad6762" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator -=</name></member>
      <member refid="classmodm_1_1_matrix_1a1c95036789be3eb543baf401aed057f9" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator []</name></member>
      <member refid="classmodm_1_1_matrix_1a9fea305cb9d38dcafadff9d4cc1e4ecb" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator []</name></member>
      <member refid="classmodm_1_1_matrix_1a20dfe5513e30054e3629c1536c3d2948" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator+</name></member>
      <member refid="classmodm_1_1_matrix_1ace4f338d2c2f1454c3dedb2f46c111c9" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator+=</name></member>
      <member refid="classmodm_1_1_matrix_1a1e4d78b8e60a0159b7befae841ae72ff" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator/</name></member>
      <member refid="classmodm_1_1_matrix_1a016f6651a053a2d99d84f8e21b4883a6" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator/=</name></member>
      <member refid="classmodm_1_1_matrix_1a03d0940aee9c8933ef7c3e5efbb0399b" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_matrix_1aaa50715a5466524d6b000d9bf702ff18" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>operator==</name></member>
      <member refid="classmodm_1_1_matrix_1a1a3255fab8365f931c19b10a3c223539" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_matrix_1a5b485650dc61a6c9c431e373cc674d2a" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>ptr</name></member>
      <member refid="classmodm_1_1_matrix_1aa596883724e6512f2480a3a681d3bcd5" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>removeColumn</name></member>
      <member refid="classmodm_1_1_matrix_1a0b6e73fdec0043a36a7e1855e5f58eef" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>removeRow</name></member>
      <member refid="classmodm_1_1_matrix_1a6ff9d80f7ed9397c10b21582a390c68f" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>replace</name></member>
      <member refid="classmodm_1_1_matrix_1a20f461b5d78fb066082063cb6b22e2a0" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>replace</name></member>
      <member refid="classmodm_1_1_matrix_1a372b59971ef0c6ce468ec00e422fda72" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>replaceColumn</name></member>
      <member refid="classmodm_1_1_matrix_1a42e65cfe21ea58dcc08bf9e8d610ecea" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>replaceRow</name></member>
      <member refid="classmodm_1_1_matrix_1a6d678a8d0c7fa22f157638855338b59b" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>subMatrix</name></member>
      <member refid="classmodm_1_1_matrix_1aa746412cbc7ac3db2be43265ec19e8e8" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>transpose</name></member>
      <member refid="classmodm_1_1_matrix_1ad328d29885c5a109943b76501495937e" prot="public" virt="non-virtual"><scope>modm::Matrix</scope><name>zeroMatrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
