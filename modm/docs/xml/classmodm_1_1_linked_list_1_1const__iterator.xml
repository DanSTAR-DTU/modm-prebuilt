<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classmodm_1_1_linked_list_1_1const__iterator" kind="class" language="C++" prot="public">
    <compoundname>modm::LinkedList::const_iterator</compoundname>
    <includes refid="linked__list_8hpp" local="no">modm/container/linked_list.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmodm_1_1_linked_list_1_1const__iterator_1af71fad9f4990e232af55c73aeddb3823" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class LinkedList</definition>
        <argsstring></argsstring>
        <name>LinkedList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="147" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1_linked_list_1_1const__iterator_1aef106bc24e388eb0a8774877ab5acc47" prot="private" static="no" mutable="no">
        <type><ref refid="structmodm_1_1_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>Node* modm::LinkedList&lt; T, Allocator &gt;::const_iterator::node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="178" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1a3b27aa7b155345a963533061f0ce8a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::LinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>()</argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1a25f519e7031e0e7f6850c99108fd8b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::LinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const iterator &amp;other)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list_1_1iterator" kindref="compound">iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy construtor. </para>
        </briefdescription>
        <detaileddescription>
<para>Used to convert a normal iterator to a const iterator. The other way is not possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1a82553832629e6fdc8e15983a1686b9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::LinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>(const const_iterator &amp;other)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy construtor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1a6f1915d32f20796976fde9685230beb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; modm::LinkedList&lt; T, Allocator &gt;::const_iterator::operator=</definition>
        <argsstring>(const const_iterator &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1aa885cbc54c51ff7c160e63b4c4e492ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; modm::LinkedList&lt; T, Allocator &gt;::const_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1a1bf5edd2398a1a66a4850bdd59091804" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::LinkedList&lt; T, Allocator &gt;::const_iterator::operator==</definition>
        <argsstring>(const const_iterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1a0a8e31fc3755fa890272553b45906fec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::LinkedList&lt; T, Allocator &gt;::const_iterator::operator !=</definition>
        <argsstring>(const const_iterator &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="classmodm_1_1_linked_list_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1a5b3c5496911b7da0851c258b6a65cf0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; modm::LinkedList&lt; T, Allocator &gt;::const_iterator::operator *</definition>
        <argsstring>() const</argsstring>
        <name>operator *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1acf88ead733498909b7e99311eb666ebb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* modm::LinkedList&lt; T, Allocator &gt;::const_iterator::operator -&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator -&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="171" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1_linked_list_1_1const__iterator_1ac0e00b672e0def0afe9b2dfe09ebef99" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::LinkedList&lt; T, Allocator &gt;::const_iterator::const_iterator</definition>
        <argsstring>(Node *node)</argsstring>
        <name>const_iterator</name>
        <param>
          <type><ref refid="structmodm_1_1_linked_list_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="174" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>forward const iterator </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" line="146" column="1" bodyfile="/home/amar/classes/danstar/modm-prebuilt/modm/src/modm/container/linked_list.hpp" bodystart="145" bodyend="179"/>
    <listofallmembers>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1a3b27aa7b155345a963533061f0ce8a7b" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1a25f519e7031e0e7f6850c99108fd8b13" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1a82553832629e6fdc8e15983a1686b9ee" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1ac0e00b672e0def0afe9b2dfe09ebef99" prot="private" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>const_iterator</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1af71fad9f4990e232af55c73aeddb3823" prot="private" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>LinkedList</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1aef106bc24e388eb0a8774877ab5acc47" prot="private" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>node</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1a0a8e31fc3755fa890272553b45906fec" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>operator !=</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1a5b3c5496911b7da0851c258b6a65cf0b" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>operator *</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1acf88ead733498909b7e99311eb666ebb" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>operator -&gt;</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1aa885cbc54c51ff7c160e63b4c4e492ab" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>operator++</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1a6f1915d32f20796976fde9685230beb8" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_linked_list_1_1const__iterator_1a1bf5edd2398a1a66a4850bdd59091804" prot="public" virt="non-virtual"><scope>modm::LinkedList::const_iterator</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
