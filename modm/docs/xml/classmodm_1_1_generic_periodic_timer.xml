<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_generic_periodic_timer" kind="class" language="C++" prot="public">
    <compoundname>modm::GenericPeriodicTimer</compoundname>
    <includes refid="periodic__timer_8hpp" local="no">modm/processing/timer/periodic_timer.hpp</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="classmodm_1_1_clock" kindref="compound">Clock</ref></type>
      </param>
      <param>
        <type>typename TimestampType</type>
        <defval><ref refid="group__modm__processing__timer_1ga8f3b60fc7930db595007904dc1e2090d" kindref="member">modm::Timestamp</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmodm_1_1_generic_periodic_timer_1ab8b3e30c9d815668e5025022554242c0" prot="private" static="no" mutable="no">
        <type>TimestampType</type>
        <definition>TimestampType modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::period</definition>
        <argsstring></argsstring>
        <name>period</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="87" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_generic_periodic_timer_1a00e2ccfe195d6576b55607d96c0ba484" prot="private" static="no" mutable="no">
        <type><ref refid="classmodm_1_1_generic_timeout" kindref="compound">GenericTimeout</ref>&lt; <ref refid="classmodm_1_1_clock" kindref="compound">Clock</ref>, TimestampType &gt;</type>
        <definition>GenericTimeout&lt;Clock, TimestampType&gt; modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="88" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1a60782c8ddd1b636c0f471658b4bb1671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::GenericPeriodicTimer</definition>
        <argsstring>(const TimestampType period)</argsstring>
        <name>GenericPeriodicTimer</name>
        <param>
          <type>const TimestampType</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Create and start the timer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1abb7d39c361e242662cb1f47272a6fced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::restart</definition>
        <argsstring>()</argsstring>
        <name>restart</name>
        <briefdescription>
<para>Restart the timer with the current period. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1aa2410a4eb1e1d96371604e7aef8f4b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::restart</definition>
        <argsstring>(const TimestampType period)</argsstring>
        <name>restart</name>
        <param>
          <type>const TimestampType</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Restart the timer with a new period value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1ad2230518ee4e1c2494cf53ac78b11b0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stops the timer and sets <ref refid="classmodm_1_1_generic_periodic_timer_1aba84311c3982e43797a82a50b3baf736" kindref="member">isStopped()</ref> to <computeroutput>true</computeroutput>, and isExpired() to <computeroutput>false</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1a4006d559bd9d74797afd91aaa83cede1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::execute</definition>
        <argsstring>()</argsstring>
        <name>execute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> exactly once during each period </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1abea73e2fdacdc8b824b179a3f0e86152" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>TimestampType::SignedType</type>
        <definition>TimestampType::SignedType modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::remaining</definition>
        <argsstring>() const</argsstring>
        <name>remaining</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the time until (positive time) or since (negative time) expiration, or 0 if stopped </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1adab47a9b18efe19bda4c89c87df96fd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__modm__processing__timer_1ga619927ca5dffdb82e1c77b41941d63cd" kindref="member">PeriodicTimerState</ref></type>
        <definition>PeriodicTimerState modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::getState</definition>
        <argsstring>() const</argsstring>
        <name>getState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current state of the timer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_generic_periodic_timer_1aba84311c3982e43797a82a50b3baf736" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::GenericPeriodicTimer&lt; Clock, TimestampType &gt;::isStopped</definition>
        <argsstring>() const</argsstring>
        <name>isStopped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the timer has been stopped, <computeroutput>false</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="84" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Generic periodic software timeout class for variable timebase and timestamp width.</para><para><simplesect kind="see"><para><ref refid="classmodm_1_1_generic_timeout" kindref="compound">GenericTimeout</ref></para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmodm_1_1_clock" kindref="compound">Clock</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Used clock which inherits from <ref refid="classmodm_1_1_clock" kindref="compound">modm::Clock</ref>, may have a variable timebase. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TimestampType</parametername>
</parameternamelist>
<parameterdescription>
<para>Used timestamp which is compatible with the chosen <ref refid="classmodm_1_1_clock" kindref="compound">Clock</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Fabian Greif </para></simplesect>
<simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" line="50" column="1" bodyfile="/home/nicolai/Danstar/software-dolken/modm-prebuilt/modm/src/modm/processing/timer/periodic_timer.hpp" bodystart="49" bodyend="89"/>
    <listofallmembers>
      <member refid="classmodm_1_1_generic_periodic_timer_1a4006d559bd9d74797afd91aaa83cede1" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>execute</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1a60782c8ddd1b636c0f471658b4bb1671" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>GenericPeriodicTimer</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1adab47a9b18efe19bda4c89c87df96fd2" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>getState</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1aba84311c3982e43797a82a50b3baf736" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>isStopped</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1ab8b3e30c9d815668e5025022554242c0" prot="private" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>period</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1abea73e2fdacdc8b824b179a3f0e86152" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>remaining</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1abb7d39c361e242662cb1f47272a6fced" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>restart</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1aa2410a4eb1e1d96371604e7aef8f4b89" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>restart</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1ad2230518ee4e1c2494cf53ac78b11b0f" prot="public" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>stop</name></member>
      <member refid="classmodm_1_1_generic_periodic_timer_1a00e2ccfe195d6576b55607d96c0ba484" prot="private" virt="non-virtual"><scope>modm::GenericPeriodicTimer</scope><name>timeout</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
