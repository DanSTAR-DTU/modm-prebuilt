<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmodm_1_1_spi_master" kind="class" language="C++" prot="public">
    <compoundname>modm::SpiMaster</compoundname>
    <basecompoundref refid="classmodm_1_1_peripheral_driver" prot="public" virt="non-virtual">modm::PeripheralDriver</basecompoundref>
    <basecompoundref refid="structmodm_1_1_spi" prot="public" virt="non-virtual">modm::Spi</basecompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_bit_bang_spi_master" prot="public" virt="non-virtual">modm::platform::BitBangSpiMaster&lt; Sck, Mosi, Miso &gt;</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_spi_master1" prot="public" virt="non-virtual">modm::platform::SpiMaster1</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_spi_master2" prot="public" virt="non-virtual">modm::platform::SpiMaster2</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_spi_master3" prot="public" virt="non-virtual">modm::platform::SpiMaster3</derivedcompoundref>
    <includes refid="spi__master_8hpp" local="no">modm/architecture/interface/spi_master.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_spi_master_1a3d9bb83efbdcba41bb2da9847873e432" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Signals</declname>
            <defname>Signals</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::SpiMaster::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect GPIOs to the peripheral and configure them.</para><para>This configures the Sck, Mosi and Miso signals and connects them.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Signals</parametername>
</parameternamelist>
<parameterdescription>
<para>One Scl and one Mosi signal are required (one Miso signal is optional) and can be passed out-of-order. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1a3aafda9026b16529d745cfe7ffbc0491" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SystemClock</type>
          </param>
          <param>
            <type><ref refid="group__modm__math__units_1ga30af1fac499efa181bc4708e24c577d1" kindref="member">baudrate_t</ref></type>
            <declname>baudrate</declname>
            <defname>baudrate</defname>
          </param>
          <param>
            <type><ref refid="group__modm__math__units_1ga4f017ee3fdf26cb780b0df55356f031c" kindref="member">percent_t</ref></type>
            <declname>tolerance</declname>
            <defname>tolerance</defname>
            <defval>5_pct</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::SpiMaster::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the hardware and sets the baudrate.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SystemClock</parametername>
</parameternamelist>
<parameterdescription>
<para>the currently active system clock </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired baudrate in Hz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>the allowed relative tolerance for the resulting baudrate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1af4576ea4439a4776afdd6e8dcfd5aea1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::SpiMaster::setDataMode</definition>
        <argsstring>(DataMode mode)</argsstring>
        <name>setDataMode</name>
        <param>
          <type><ref refid="structmodm_1_1_spi_1a00c4c03fc5d3c23c677740fb804ae820" kindref="member">DataMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Sets a new data mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1acd65f641ee60204f878a5e6cf3fb6741" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::SpiMaster::setDataOrder</definition>
        <argsstring>(DataOrder order)</argsstring>
        <name>setDataOrder</name>
        <param>
          <type><ref refid="structmodm_1_1_spi_1a738c2058b5a1778735b4c78df0bb6839" kindref="member">DataOrder</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Sets a new data order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1a16ad4479b4b74dc042a82994f5514846" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t modm::SpiMaster::acquire</definition>
        <argsstring>(void *ctx, ConfigurationHandler handler=nullptr)</argsstring>
        <name>acquire</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structmodm_1_1_spi_1a0d609550a29c439aa83e5999f584447d" kindref="member">ConfigurationHandler</ref></type>
          <declname>handler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request access to the spi master within a context. You may acquire the spi master multiple times within the same context.</para><para>The configuration handler will only be called when aquiring the spi master for the first time (if it is not a <computeroutput>nullptr</computeroutput>).</para><para><simplesect kind="warning"><para>Aquires must be balanced with releases of the <bold>same</bold> context! </para></simplesect>
<simplesect kind="warning"><para>Aquires are persistent even after calling <computeroutput><ref refid="classmodm_1_1_spi_master_1a3aafda9026b16529d745cfe7ffbc0491" kindref="member">initialize()</ref></computeroutput>!</para></simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if another context is using the spi master, otherwise <computeroutput>&gt;0</computeroutput> as the number of times this context acquired the master. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1a0f85bd01bb9341ca7cf5675c3814e1e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t modm::SpiMaster::release</definition>
        <argsstring>(void *ctx)</argsstring>
        <name>release</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release access to the spi master within a context.</para><para><simplesect kind="warning"><para>Releases must be balanced with acquires of the <bold>same</bold> context! </para></simplesect>
<simplesect kind="warning"><para>Releases are persistent even after calling <computeroutput><ref refid="classmodm_1_1_spi_master_1a3aafda9026b16529d745cfe7ffbc0491" kindref="member">initialize()</ref></computeroutput>!</para></simplesect>
<simplesect kind="return"><para><computeroutput>0</computeroutput> if nothing can be released anymore (for any context) <computeroutput>&gt;0</computeroutput> as the number of times this context can still release the master. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1a9a1697f8bc0dc1f89a5472c57f90fe6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t modm::SpiMaster::transferBlocking</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>transferBlocking</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap a single byte and wait for completion.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>received data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1ac6e7ee860a5ba2304db43f6608f7f77b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::SpiMaster::transferBlocking</definition>
        <argsstring>(uint8_t *tx, uint8_t *rx, std::size_t length)</argsstring>
        <name>transferBlocking</name>
        <param>
          <type>uint8_t *</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data buffers and length with options and starts a transfer. This may be hardware accelerated (DMA or Interrupt), but not guaranteed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to transmit buffer, set to <computeroutput>nullptr</computeroutput> to send dummy bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to receive buffer, set to <computeroutput>nullptr</computeroutput> to discard received bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be shifted out </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1a18ba2b2eb67ce7f9cd5ee0bf5705c039" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; uint8_t &gt;</type>
        <definition>static modm::ResumableResult&lt;uint8_t&gt; modm::SpiMaster::transfer</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>transfer</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap a single byte and wait for completion non-blocking!.</para><para>You must call this inside a Protothread or <ref refid="classmodm_1_1_resumable" kindref="compound">Resumable</ref> using <computeroutput>PT_CALL</computeroutput> or <computeroutput>RF_CALL</computeroutput> respectively. <simplesect kind="warning"><para>These methods differ from Resumables by lacking context protection! You must ensure that only one driver is accessing this resumable function by using <computeroutput>acquire(ctx)</computeroutput> and <computeroutput>release(ctx)</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>received data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_spi_master_1ad95ac22b0c7ec6113c28d46b7aa310e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodm_1_1_resumable_result" kindref="compound">modm::ResumableResult</ref>&lt; void &gt;</type>
        <definition>static modm::ResumableResult&lt;void&gt; modm::SpiMaster::transfer</definition>
        <argsstring>(uint8_t *tx, uint8_t *rx, std::size_t length)</argsstring>
        <name>transfer</name>
        <param>
          <type>uint8_t *</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data buffers and length with options and starts a non-blocking transfer. This may be hardware accelerated (DMA or Interrupt), but not guaranteed.</para><para>You must call this inside a Protothread or <ref refid="classmodm_1_1_resumable" kindref="compound">Resumable</ref> using <computeroutput>PT_CALL</computeroutput> or <computeroutput>RF_CALL</computeroutput> respectively. <simplesect kind="warning"><para>These methods differ from Resumables by lacking context protection! You must ensure that only one driver is accessing this resumable function by using <computeroutput>acquire(ctx)</computeroutput> and <computeroutput>release(ctx)</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to transmit buffer, set to <computeroutput>nullptr</computeroutput> to send dummy bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to receive buffer, set to <computeroutput>nullptr</computeroutput> to discard received bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to be shifted out </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="157" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interface for a <ref refid="structmodm_1_1_spi" kindref="compound">Spi</ref> Master with resource management, which allows to synchronize multiple drivers requesting hardware access.</para><para><simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1546">
        <label>modm::platform::BitBangSpiMaster&lt; Sck, Mosi, Miso &gt;</label>
        <link refid="classmodm_1_1platform_1_1_bit_bang_spi_master"/>
        <childnode refid="1543" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1544">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
      <node id="1545">
        <label>modm::Spi</label>
        <link refid="structmodm_1_1_spi"/>
      </node>
      <node id="1547">
        <label>modm::platform::SpiMaster1</label>
        <link refid="classmodm_1_1platform_1_1_spi_master1"/>
        <childnode refid="1543" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1548">
        <label>modm::platform::SpiMaster2</label>
        <link refid="classmodm_1_1platform_1_1_spi_master2"/>
        <childnode refid="1543" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1549">
        <label>modm::platform::SpiMaster3</label>
        <link refid="classmodm_1_1platform_1_1_spi_master3"/>
        <childnode refid="1543" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1543">
        <label>modm::SpiMaster</label>
        <link refid="classmodm_1_1_spi_master"/>
        <childnode refid="1544" relation="public-inheritance">
        </childnode>
        <childnode refid="1545" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1551">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
      <node id="1552">
        <label>modm::Spi</label>
        <link refid="structmodm_1_1_spi"/>
      </node>
      <node id="1550">
        <label>modm::SpiMaster</label>
        <link refid="classmodm_1_1_spi_master"/>
        <childnode refid="1551" relation="public-inheritance">
        </childnode>
        <childnode refid="1552" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" line="32" column="1" bodyfile="/home/nicolai/Documents/DanStar/Software-dolken/modm-prebuilt/modm/src/modm/architecture/interface/spi_master.hpp" bodystart="31" bodyend="159"/>
    <listofallmembers>
      <member refid="classmodm_1_1_spi_master_1a16ad4479b4b74dc042a82994f5514846" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>acquire</name></member>
      <member refid="classmodm_1_1_peripheral_driver_1a5c336ff9889c347e7eadb810bf984ebd" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>assertBaudrateInTolerance</name></member>
      <member refid="structmodm_1_1_spi_1a0d609550a29c439aa83e5999f584447d" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>ConfigurationHandler</name></member>
      <member refid="classmodm_1_1_spi_master_1a3d9bb83efbdcba41bb2da9847873e432" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>connect</name></member>
      <member refid="structmodm_1_1_spi_1a00c4c03fc5d3c23c677740fb804ae820" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>DataMode</name></member>
      <member refid="structmodm_1_1_spi_1a738c2058b5a1778735b4c78df0bb6839" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>DataOrder</name></member>
      <member refid="classmodm_1_1_spi_master_1a3aafda9026b16529d745cfe7ffbc0491" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>initialize</name></member>
      <member refid="classmodm_1_1_spi_master_1a0f85bd01bb9341ca7cf5675c3814e1e3" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>release</name></member>
      <member refid="classmodm_1_1_spi_master_1af4576ea4439a4776afdd6e8dcfd5aea1" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>setDataMode</name></member>
      <member refid="classmodm_1_1_spi_master_1acd65f641ee60204f878a5e6cf3fb6741" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>setDataOrder</name></member>
      <member refid="classmodm_1_1_spi_master_1a18ba2b2eb67ce7f9cd5ee0bf5705c039" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>transfer</name></member>
      <member refid="classmodm_1_1_spi_master_1ad95ac22b0c7ec6113c28d46b7aa310e4" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>transfer</name></member>
      <member refid="classmodm_1_1_spi_master_1a9a1697f8bc0dc1f89a5472c57f90fe6f" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>transferBlocking</name></member>
      <member refid="classmodm_1_1_spi_master_1ac6e7ee860a5ba2304db43f6608f7f77b" prot="public" virt="non-virtual"><scope>modm::SpiMaster</scope><name>transferBlocking</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
